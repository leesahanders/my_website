---
title: "Python projects set up and maintenance" 
description: "The power of venv!"
author: "Lisa"
date: "2024-09-13"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
editor: source
toc: true
image: "img/"
draft: false
freeze: true
filters:
   - lightbox
lightbox: auto
categories:
  - code
---

## Python projects setup

Setup the `venv` environment:

```bash
python -m venv .venv
. .venv/bin/activate
# .venv\Scripts\activate # Windows
```

Upgrade pip and then install needed packages:

```bash
pip install --upgrade pip
python -m pip install --upgrade pip wheel setuptools rsconnect-python
pip install -r requirements.txt
```

Run the application:

```bash
shiny run --reload app.py
```

Leave a virtual environment with:

```bash
deactivate
```

## Jupyter kernels, Quarto, and VS Code

```
# Create a venv and install packages
python -m venv .venv
. .venv/bin/activate
source .venv/bin/activate
pip install -r requirements.txt
pip install --upgrade pip

# Register as kernel
pip install ipykernel jupyter
python3 -m ipykernel install --name "new_venv" --user

# Check for missing dependencies
python -m pip check

# Automatically uprade all packages from requirements.txt 
pip install pip-upgrader
pip-upgrade requirements.txt
pip install -r requirements.txt

# Freeze your requirements
pip freeze > requirements.txt

Requires jupyter extension
```

For quarto and vs code: 

> If you create a virtual environment with venv in the env/ directory as described above, Visual Studio Code should automatically discover that environment when you load a workspace from the environmentâ€™s parent directory.
Source: https://quarto.org/docs/projects/virtual-environments.html#vs-code

```
python3 -m venv env
source env/bin/activate
python3 -m pip freeze > requirements.txt
python3 -m pip install -r requirements.txt
```

## Deploy

### rsconnect-python CLI

```bash
rsconnect deploy shiny .
```

### Git-backed

Update the code, and then run:

```bash
rsconnect write-manifest shiny --overwrite .
```

Commit the new `manifest.json` file to the git repo along with the code.

## Project updates

Create the requirements file:

```bash
python -m pip freeze > requirements.txt
```

```bash
rsconnect write-manifest shiny .
```

If you are running into deploy issues where there are breaking packages you can edit the requirements file explicitly: 

```bash
# requirements.txt generated by rsconnect-python on 2022-09-21 14:59:58.865441
streamlit==1.11.0
```

To use a Package Manager repository with a specific project defined by a `requirements.txt` file, add `-i [repositoryURL]` to the top of your file, for example:

```bash
-i https://packagemanager.posit.co/pypi/latest/simple
pandas
scipy
```

How to configure a pypi repository globally (using pip.conf): 
<https://docs.posit.co/resources/install-python/#optional-configure-a-pypi-repository>

## Troubleshooting

### Issues with Python not being on path

Set it manually to an installed Python version with: 

```bash
alias python="/opt/python/3.9.17/bin/python"
```

Set it in your .bashrc on mac or linux so that it is set for your profile every time you log in (typically this is located in the root directory of your home folder): 

```bash
# add this to your .bashrc
export PATH=/opt/python/3.11.9/bin:$PATH
```

Check for the available python versions (if typically installed): 

```bash
ls -ld /opt/python/*
```

## Resources

[Posit Connect User Guide: Shiny for Python](https://docs.posit.co/connect/user/shiny-python/)





