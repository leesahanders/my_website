---
title: "Mounting drives on a server for Posit Team"
description: "Various methods and failure modes with mounted drives"
author: "Lisa"
date: "2025-04-16"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
editor: source
toc: true
image: "img/"
draft: false
freeze: true
filters:
   - lightbox
lightbox: auto
categories:
  - code
---

## Overview

Workbench (and Connect) will work with the underlying linux system to make resources available to users. This includes things like mounted drives. 

Workbench doesn't natively mount drives, this isn't done through a config. Drive mounts are done through linux operations. 

### Server/VM

Typically we see this looking like 

1. Create a local directory 
2. `mount -t nfs -o optionshere sharehost:sharepath`

It can also involve [fstab](https://www.baeldung.com/linux/network-drive-etc-fstab) or [AutoFS](https://help.ubuntu.com/community/Autofs). 

Some specific situations may have some complexity: specific formats, cloud situations, or verifying NFS export options, but in general the mounting process is much simpler than installing the posit products and configuring them and is the same as what would be done on any linux server. 

For SMB/CIFS this could look like mounting via PAM, discussed here: <https://support.posit.co/hc/en-us/articles/360044190234-How-to-mount-a-Windows-SMB-CIFS-share-via-PAM>

### Permissions 

When mounting on the server it will need the appropriate permissions so that users are able to access the contents of the drive. 

For example for content running on Posit Connect the rstudio-connect user will need access to the drive, for example via `chmod 644`. Alternatively the drive could be mapped so that an alternate linux user has access and a user with admin access through the Connect UI can set the runAs user to the selected linux user. This will provide more security around protecting the files that are mounted. 

## Failures 

### Checking mounted drives and noexec option

Check if `/home` on the server, or is it a network mount (NFS or CIFS). In NFS, for example, there can be the use of access control lists which can impact permissions. Similarly, when working in a system that has a mounted share drive then would want to check that libraries are being written to that share so you get persistence. Typically this means writing to inside the home directory. Check mounted drives with: `df -h`

Check `/etc/fstab` to see if the home directories are mounted with `noexec`

For example, this shows that the home directories were mounted with `noexec`: `/dev/mapper/rhel-home  /home  xfs    defaults,noexec,nosuid,nodev   0 0`

This resulted in this error message:

```         
library(stringi)Error: package or namespace load failed for 'stringi' in dyn.load(file, DLLpath = DLLpath, ...):
unable to load shared object '/home/c_jjones/R/x86_64-pc-linux-gnu-library/4.3/stringi/libs/stringi.so':
  /home/c_jjones/R/x86_64-pc-linux-gnu-library/4.3/stringi/libs/stringi.so: failed to map segment from shared object
```


