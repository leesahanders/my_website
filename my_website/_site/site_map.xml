<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Lisa Anders - questionable.quarto</title>
<link>https://questionable.quarto.pub/blog/site_map.html</link>
<atom:link href="https://questionable.quarto.pub/blog/site_map.xml" rel="self" type="application/rss+xml"/>
<description>Making the most out of data</description>
<generator>quarto-1.8.23</generator>
<lastBuildDate>Thu, 11 Sep 2025 06:00:00 GMT</lastBuildDate>
<item>
  <title>Sparklyr and UV (to connect to Databricks)</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/databricks-and-uc-and-sparklyr.html</link>
  <description><![CDATA[ 






<section id="the-players" class="level2">
<h2 class="anchored" data-anchor-id="the-players">The players</h2>
<p>There are a bunch of packages and pieces between your R sesson and the databricks environment you want to leverage that are useful to be aware of.</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart LR
    A[Databricks Clusters] --&gt; B{Databricks-Connect Python Package};
    B --&gt; C[PySpark];
    C --&gt; D[pysparklyr];
    D --&gt; E[sparklyr];
    E --&gt; F[reticulate];
    F --&gt; G[R session];
    B -- "Must match runtime" --&gt; A;
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>If you are using managed credentials on Workbench show the credentials with:</p>
<p><code>env | grep DATABRICKS</code></p>
</section>
<section id="connecting-to-databricks-from-r-using-a-uv-created-venv" class="level2">
<h2 class="anchored" data-anchor-id="connecting-to-databricks-from-r-using-a-uv-created-venv">Connecting to Databricks from R using a UV created venv</h2>
<p>Sparklyr can use a previously existing environment for python. This is actually my preference (in SE) since it lets you have very explicit control over the contents of your python environment.</p>
<p>The trick here is to rely on sparklyr for the detection. It might be tempting to try to start modifying reticulate, but there is still some maturity to get pain points smoothed out. Sparklyr detecting the environment is a much better experience. For example you’d call the environment like this in order to use a previously created venv (my preference):</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(sparklyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dbplyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DBI)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(reticulate)</span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("pysparklyr")</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">sc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spark_connect</span>(</span>
<span id="cb1-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cluster_id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"redacted"</span>,</span>
<span id="cb1-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"databricks_connect"</span>,</span>
<span id="cb1-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/lisa.anders/demo/databricks_demo-main/.venv/bin/python"</span>,</span>
<span id="cb1-13">)</span></code></pre></div></div>
<p>In that example I created my uv venv with the below, after making sure that I was “cd’d” to the correct directory:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check what python versions you have access to</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-1d</span> /opt/python/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the uv project, this example declares the python version to use explicitly. Make sure this matches a version you have access to.</span></span>
<span id="cb2-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> init <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--app</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--python</span> 3.10.16</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> pip install databricks-connect</span></code></pre></div></div>
<p>If using a specific version of python make sure it is called out both in the <code>.python-versions</code> file and the <code>pyproject.toml</code> file</p>
<p>If using a specific version of databricks-connect then make sure that the version needed is called out in the <code>pyproject.toml</code> file like this:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">dependencies</span> = [</span>
<span id="cb3-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"databricks-connect==14.3.3"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div></div>
<p>After changing anything be sure to run <code>uv sync</code>.</p>
<p>You’ll want to make sure that the version of databricks-connect matches the version for your cluster. Double check the version-python-version requirements here. If it’s really old (think 14.3.3) then there are a bunch of issues with various dependencies and I’d recommend talking to the cluster owner to see if upgrading the runtime is a possibility.</p>
<p>Also note that the command will need to start the cluster - so if it hasn’t already started you are probably looking at it “hanging” until the cluster has successfully started. To prevent this delay consider pre-starting the cluster and then running the spark_connect command.</p>
</section>
<section id="troubleshooting" class="level2">
<h2 class="anchored" data-anchor-id="troubleshooting">Troubleshooting</h2>
<section id="venv" class="level3">
<h3 class="anchored" data-anchor-id="venv">Venv</h3>
<p>This is the page you should read: <a href="https://spark.posit.co/deployment/databricks-connect.html#environments" class="uri">https://spark.posit.co/deployment/databricks-connect.html#environments</a></p>
</section>
<section id="python" class="level3">
<h3 class="anchored" data-anchor-id="python">Python</h3>
<p>Next we’ll want to make sure that python is set up correctly, since sparklyr wraps pyspark.</p>
<p>Make sure you have the right python version. It will need to be compatible with the version of databricks-connect that you need: <a href="https://docs.databricks.com/aws/en/dev-tools/databricks-connect/python/install#version-support-matrix" class="uri">https://docs.databricks.com/aws/en/dev-tools/databricks-connect/python/install#version-support-matrix</a> and <a href="https://docs.databricks.com/aws/en/dev-tools/databricks-connect/requirements" class="uri">https://docs.databricks.com/aws/en/dev-tools/databricks-connect/requirements</a></p>
<p>Check what version of python reticulate is using: <code>reticulate::py_config()</code> and <code>ls -l /home/lisa.anders/.virtualenvs/r-reticulate/bin</code> and <code>ls -1d /opt/python/*</code></p>
<p>Figure out what python I have access to, we could also use py_discover_config() <code>ls -1d /opt/python/*</code> and which versions are available through uv with <code>uv python list --only-installed</code></p>
<p>Set the symlink: <code>ln -sf /opt/python/3.10.16/bin/python3.10 /home/lisa.anders/.virtualenvs/r-reticulate/bin/python3.10</code></p>
<p>Set up the folder as a uv project: <code>uv init</code> or we could declare the python version explicitly: <code>uv init --app --python 3.10.16</code></p>
<p>We might find that the version of databricks-connect that we need is only support on an older version of python. In that case we should use uv to install the version of python that we need. For example for databricks-connect 14.3.3 we need python 3.10. <code>uv python install 3.10</code> and then <code>uv python pin 3.10.16</code> (or edit .python-version) and then <code>uv sync</code></p>
<p>Make sure it’s called out in the uv pyproject.toml file:</p>
<pre><code>dependencies = [
    "databricks-connect==14.3.3",
]</code></pre>
<p>And then make sure everything matches with <code>uv sync</code> (or install the packages directly with: <code>uv pip install databricks-connect</code>)</p>
<p>You can create env for a version of python that matches the cluster python version with <code>pysparklyr::install_databricks()</code>.</p>
<p>Something like…</p>
<pre><code>install_databricks(version = "15.3", python_version = "3.11.9", envname = "r-sparklyr-databricks-15.4-3.11.9") 
sc &lt;- spark_connect( cluster_id = "redacted", version = "15.3", method = "databricks_connect", envname = "r-sparklyr-databricks-15.4-3.11.9" )</code></pre>
</section>
<section id="move-packages-from-one-python-virtual-environment-to-another" class="level3">
<h3 class="anchored" data-anchor-id="move-packages-from-one-python-virtual-environment-to-another">Move packages from one python virtual environment to another</h3>
<p>You could also try moving all the packages from one python virtual environment to another with:</p>
<pre><code>library(reticulate)

envname &lt;- "r-reticulate"

# backup list of packages and versions
packages &lt;- py_list_packages(envname = envname)

# delete existing virtualenv
virtualenv_remove(envname = envname)

# recreate it with packages
virtualenv_create(envname = envname, python = "/opt/python/3.12.11/bin/python", packages = packages$requirement)</code></pre>
</section>
<section id="reticulate" class="level3">
<h3 class="anchored" data-anchor-id="reticulate">Reticulate</h3>
<p>Run <code>reticulate::py_last_error()</code> for more details on any error messages.</p>
<p>If you want a dev version of reticulate use: <code>pak::pak("rstudio/reticulate")</code> or this is what someone else used: <code>pak::pkg_install("rstudio/reticulate", dependencies = FALSE)</code></p>
<p>Or with:</p>
<pre><code>install.packages("remotes")
remotes::install_github("rstudio/reticulate")</code></pre>
<p>Or if you add it as a git runner to your package manager use <code>install.packages("reticulate", repos="my-repo-for-git-runners)</code></p>
<p>See the available virtualenv’s with: <code>reticulate::virtualenv_list()</code>.</p>
<p>Remove a virtualenv created by reticulate with <code>virtualenv_remove("r-sparklyr-databricks-14.3")</code>.</p>
<p>In order for a created venv to be picked up by reticulate we need to set the RETICULATE_PYTHON variable to “.venv/bin/activate” in the project’s .Renviron file (from <a href="https://ryjohnson09.quarto.pub/stepping-stones/docs/R/reticulate/proj-settings.html">here</a>). Like: <code>RETICULATE_PYTHON=".venv/bin/activate"</code>. That can also cause issues though so you might want to unset it with <code>Sys.unsetenv("RETICULATE_PYTHON")</code>.</p>
</section>
<section id="databricks-runtime" class="level3">
<h3 class="anchored" data-anchor-id="databricks-runtime">Databricks runtime</h3>
<p>To successfully connect to a Databricks cluster, you will need to match the proper version of the <a href="https://pypi.org/project/databricks-connect/">databricks-connect</a> Python library to the Databricks Runtime (DBR) version in the cluster.</p>
<p>If you get an error message like:</p>
<blockquote class="blockquote">
<p>Error in py_call_impl(callable, call_args<img src="https://latex.codecogs.com/png.latex?unnamed,%20call_args">named) : Exception: Unsupported combination of Databricks Runtime &amp; Databricks Connect versions: 14.3 (Databricks Runtime) &lt; 16.1.6 (Databricks Connect).</p>
</blockquote>
<p>This is because the version of databricks-connect on your databricks environment doesn’t match what you have locally. Read through the python section above and follow those recommendations to make sure that you have (1) a python version that supports the databricks-connect version you need (2) the correct version of databricks-connect and (3) that the correct virtual environment is being pulled with the <code>envname</code> parameter.</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/databricks-and-uc-and-sparklyr.html</guid>
  <pubDate>Thu, 11 Sep 2025 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Improving the performance of R package installation on Workbench</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/R package installation improvements on Workbench.html</link>
  <description><![CDATA[ 






<section id="motivation" class="level2">
<h2 class="anchored" data-anchor-id="motivation">Motivation</h2>
<p>I wanted to take a moment to write up some notes on the package installation process in R that might be useful for troubleshooting slow package install times and implementing a workaround. This is coming out of a very great conversation I had with a colleague that I hope is useful for you too.</p>
</section>
<section id="package-installation-process-in-r" class="level2">
<h2 class="anchored" data-anchor-id="package-installation-process-in-r">Package Installation Process in R</h2>
<p>When a user runs install.packages it can go in a couple locations: - System library (global, only happens when run by an administrator) - Site library (optional, requires admin set up) - User libary - Project library (optional, requires specific renv setup)</p>
<p>Let’s start with a non renv example - if we have, say, 2 projects then the first time (when the user has a clean directory) the install for the packages for that 1st project could take awhile. This is particularly noticeable with bioconductor packages because the bioconductor repository doesn’t provide binaries and every package has to be compiled as source. After that, however, for the seconod project (if it is using the same packages) it will feed from the same library in the same user home directory, thus feeling faster. It won’t reinstall the packages.</p>
<p>However, in general relying on the user library is a bad thing. Take this example - imagine two projects that start out using the same package. If in project two that package is upgraded when we go back to the first project there is a risk the code isn’t working because the package was upgraded. This is where renv comes in.</p>
</section>
<section id="renv" class="level2">
<h2 class="anchored" data-anchor-id="renv">Renv</h2>
<p>Renv will operate very similarly to the typical process for installing packages. Except that when two projects need different versions of the same package it will install and maintain those two versions separately. By default it creates a project specific folder but it is linking to a package cache that is by default global for a given user. Same experience here where the first time a package is downloaded and compiled it will take awhile. But after that it will be fast, assuming the same package. Now if the renv is using different package versions then that will trigger the package reinstall and that could take a long time. Aligning the renv.lock files to use the same package versions would greatly speed up the process.</p>
<section id="magic-trick" class="level3">
<h3 class="anchored" data-anchor-id="magic-trick">Magic Trick</h3>
<p>Now here is a magic trick. If using a recent version of renv they could enable it to use pak: options(renv.config.pak.enabled=TRUE)</p>
<p>This would be either run inside every user session (risky since that is easy to forget) or could be put in the users rprofile file before running renv::restore. This would make the install, download, build, packages in parallel using pak. You can find the location of your rprofile file with the usethis package.</p>
</section>
</section>
<section id="other-options" class="level2">
<h2 class="anchored" data-anchor-id="other-options">Other Options</h2>
<p>If want to move beyond the per user renv cacheing then we could consider a system global package cache. IT would need to set up a directory with fairly wide permissions to make this happen. Example: <a href="https://github.com/sol-eng/singularity-rstudio?tab=readme-ov-file#what-does-renv-actually-do-" class="uri">https://github.com/sol-eng/singularity-rstudio?tab=readme-ov-file#what-does-renv-actually-do-</a></p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>So to summarize some possible solutions to improving the install time for packages:</p>
<ul>
<li>Use pak with renv to enable paralellized package installs with options(renv.config.pak.enabled=TRUE) (my colleague called this a “magic trick” and would be my choice for what to try)</li>
<li>Align the renv.lock files to use the same package versions where possible</li>
<li>Consider moving to a global package cache, but this would require IT overhead</li>
</ul>


</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/R package installation improvements on Workbench.html</guid>
  <pubDate>Wed, 09 Jul 2025 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Fun with LLM’s</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/LLMs.html</link>
  <description><![CDATA[ 






<section id="intro" class="level2">
<h2 class="anchored" data-anchor-id="intro">Intro</h2>
<p>I’ve heard LLM’s described as a revolutionary search engine, which feels pretty on the nose. Definitely the way we interact with the internet is vastly different when leveraging any LLM technology. I wanted to squirrel away some thoughts and experiments from my own exploration into various LLM technologies.</p>
</section>
<section id="what-llms-cant-do" class="level2">
<h2 class="anchored" data-anchor-id="what-llms-cant-do">What LLM’s can’t do</h2>
<p>As appealing as it may be, at the end of the day the burden is still on you figuring out how to articulate what you want. I think this is where a lot of the hype has gone off the rails - this idea of an LLM completely releasing you from any thought is never going to happen. Having skills in articulate a plan and coming up with ideas is always going to matter - as eloquently put in this xkcd (also proving that there really is an xkcd for anything).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/clarity-of-ideas-xkcd.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Pertinent XKCD"><img src="https://questionable.quarto.pub/blog/work/img/clarity-of-ideas-xkcd.jpg" class="img-fluid figure-img" style="width:60.0%" alt="Pertinent XKCD"></a></p>
<figcaption>Pertinent XKCD</figcaption>
</figure>
</div>
</section>
<section id="setting-up-claude-code-in-aws" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-claude-code-in-aws">Setting up Claude Code in AWS</h2>
<p>Install npm</p>
<pre><code>sudo apt install npm  
npm config set os linux

npm config set prefix ~/.npm-global
export PATH=~/.npm-global/bin:$PATH</code></pre>
<p>Make sure your aws credentials are set up. Create credential files in <code>~/.aws/credentials</code> and <code>~/.aws/config</code></p>
<p>Install Claude code:</p>
<pre><code>npm install -g @anthropic-ai/claude-code --force --no-os-check</code></pre>
<p>If needed, uninstall it:</p>
<pre><code>sudo apt-get remove npm
npm uninstall -g @anthropic-ai/claude-code</code></pre>
<p>Update your bashrc and add</p>
<pre><code>sudo nano  ~/.bashrc

export AWS_REGION=us-east-2 
export CLAUDE_CODE_USE_BEDROCK=1 
export ANTHROPIC_MODEL='us.anthropic.claude-sonnet-4-20250514-v1:0'</code></pre>
<p>You will need to set environment variables with the relevant parameters. In my case it is the following. I’m updating zhrc / .bashrc which is in my home directory as a hidden file so it will persist across sessions:</p>
<pre><code>export AWS_REGION=us-east-2
export CLAUDE_CODE_USE_BEDROCK=1
export ANTHROPIC_MODEL='us.anthropic.claude-sonnet-4-20250514-v1:0'

source ~/.profile
source ~/.bashrc</code></pre>
<p>If I did this as a sudo user I should also add it to my /etc/environment file:</p>
<pre><code>sudo nano /etc/environment 

PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"


export AWS_REGION=&lt;your region&gt;
export CLAUDE_CODE_USE_BEDROCK=1 
export ANTHROPIC_MODEL='us.anthropic.claude-sonnet-4-20250514-v1:0'</code></pre>
<pre><code>source ~/.bashrc
source /etc/environment </code></pre>
<p>Check that they set with:</p>
<pre><code>env | grep CLAUDE
sudo env | grep CLAUDE
env | grep AWS
env | grep ANTHROPIC</code></pre>
<p>To use it first cd into your project directory, log in to aws, and then you can do things with claude:</p>
<pre><code>cd soleng-book
aws sso login</code></pre>
<p>You’ll want to create an instruction file named <code>CLAUDE.md</code>, something like:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>CLAUDE.md</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb10" data-filename="CLAUDE.md" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Project - Guide</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Project Overview</span></span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">This</span> project is a set of pages documenting various topics around server infrastructure, software installation, integrations, and maintenance. It provides the following topics:</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Storage </span>
<span id="cb10-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> SSL </span>
<span id="cb10-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Networking </span>
<span id="cb10-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Slurm </span>
<span id="cb10-11"></span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Important Considerations</span></span>
<span id="cb10-13"></span>
<span id="cb10-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">**Always</span> run code quality checks before committing<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">**</span>. This includes linting, type checking, and running tests to ensure code quality and functionality.</span>
<span id="cb10-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">**Prefer</span> readable and maintainable code<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">**</span>. Avoid complex one-liners or overly clever solutions that reduce code clarity.</span>
<span id="cb10-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">**Always</span> document code and configurations<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">**</span>. Use docstrings for functions and classes, and comments where necessary to explain complex logic or decisions.</span>
<span id="cb10-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">**When</span> in doubt, ask for help<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">**</span>. If you<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'re unsure about how to implement something or how to fix an error, don'</span>t hesitate to reach out to the team for assistance.</span>
<span id="cb10-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">**Less</span> is more<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">**</span>. Avoid unnecessary complexity in code and configurations. Aim for simplicity and clarity in your solutions.</span>
<span id="cb10-19"></span>
<span id="cb10-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Documentation Quality Standards</span></span>
<span id="cb10-21"></span>
<span id="cb10-22"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Accuracy: Information is correct and up-to-date.</span>
<span id="cb10-23"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Clarity: Language is precise, unambiguous, and easy to understand.</span>
<span id="cb10-24"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Completeness: All necessary information is present<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">no</span> critical steps or explanations are missing.</span>
<span id="cb10-25"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Consistency: Terminology, formatting, and style are uniform throughout.</span>
<span id="cb10-26"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Conciseness: Information is presented efficiently without unnecessary words or repetition.</span>
<span id="cb10-27"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Relevance: Content directly addresses the needs and questions of the target audience.</span>
<span id="cb10-28"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Accessibility: Documentation is easy to navigate, search, and consume <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">e.g.,</span> clear headings, index, TOC<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">.</span></span>
<span id="cb10-29"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Examples/Illustrations: Sufficient and relevant code examples, diagrams, or screenshots are provided.</span>
<span id="cb10-30"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Audience Appropriateness: Language and technical depth are tailored to the intended readers.</span>
<span id="cb10-31"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Maintainability: Structure and content facilitate future updates and revisions.</span>
<span id="cb10-32"></span>
<span id="cb10-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Contributing</span></span>
<span id="cb10-34"></span>
<span id="cb10-35"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1.</span> Plan the changes carefully, considering the overall architecture and existing patterns.</span>
<span id="cb10-36"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2.</span> Write sections following existing code patterns and type hints</span>
<span id="cb10-37"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">3.</span> Add more detail where necessary</span>
<span id="cb10-38"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">4.</span> Once everything is working, make a commit and request human review.</span></code></pre></div></div>
</div>
<p>You can then use the claude command to be off to the races:</p>
<pre><code>claude</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/claude.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Off to the races!"><img src="https://questionable.quarto.pub/blog/work/img/claude.png" class="img-fluid figure-img" alt="Off to the races!"></a></p>
<figcaption>Off to the races!</figcaption>
</figure>
</div>
</section>
<section id="self-hosting-with-ollama" class="level2">
<h2 class="anchored" data-anchor-id="self-hosting-with-ollama">Self hosting with Ollama</h2>
<p>[Ollama] is a LLM model that you can self-host. You would want to place it on its own server (because it can an will consume all resources) and then access it through that IP address, like this:</p>
<pre><code>server_ip_address &lt;- "&lt;ADD YOUR SERVER'S IP ADDRESS HERE&gt;"

library(ellmer)

chat &lt;- chat_ollama(
  system_prompt = "Answer questions using the R programming language. ",
  base_url = paste0("http://", server_ip_address, ":11434"),
  model = "gemma3:1b",
)</code></pre>
<p>(Credit to Isabella)</p>
</section>
<section id="security" class="level2">
<h2 class="anchored" data-anchor-id="security">Security</h2>
<p>Large Language Models (LLMs) are revolutionizing everything from code generation to data analysis and customer interactions.&nbsp; However, their rapid adoption also introduces significant security concerns.&nbsp; From data privacy risks to potential misuse - such as generating malicious code or spreading misinformation - organizations must take a proactive approach to LLM security.</p>
<p>This section is tailored for IT administrators and security professionals who oversee LLM adoption, providing actionable insights on risk mitigation, access control, and enterprise-level security measures.</p>
<section id="the-security-challenges-of-llms" class="level3">
<h3 class="anchored" data-anchor-id="the-security-challenges-of-llms">The Security Challenges of LLMs</h3>
<p>LLMs present unique security risks that administrators must proactively address:</p>
<ul>
<li>Data Privacy &amp; Protection: LLMs process vast amounts of information, including proprietary and sensitive data.</li>
<li>Unauthorized access: Vulnerabilities like prompt injection and model poisoning can compromise entire enterprise systems.</li>
<li>Misinformation &amp; Compliance Risks: AI-generated content can introduce inaccuracies, requiring monitoring and governance.</li>
</ul>
<p>A well-defined enterprise LLM strategy is crucial to maintaining security while leveraging AI’s full potential.</p>
</section>
<section id="choosing-the-right-llm-deployment-model" class="level3">
<h3 class="anchored" data-anchor-id="choosing-the-right-llm-deployment-model">Choosing the Right LLM Deployment Model</h3>
<p>Administrators must select an LLM deployment model that aligns with organizational security policies and data governance requirements balanced against model capability. The three primary options include:</p>
<ol type="1">
<li><p>Self-Hosted (Highest Security): Models are deployed internally, ensuring full control over data and security policies (e.g., Ollama).</p></li>
<li><p>Trusted Cloud Providers (Balanced Security &amp; Scalability): Models hosted by vetted providers with strong security guarantees (e.g., Databricks, Snowflake, AWS Bedrock).</p></li>
<li><p>Unvetted Public Models (High Risk, Not recommended):&nbsp; Free or open-access LLMs with uncertain security and data retention policies (e.g., free-tier ChatGPT).</p></li>
</ol>
<blockquote class="blockquote">
<p>Administrator Tip: Always involve IT security teams in LLM vetting.&nbsp; Ensure that providers adhere to your organization’s data protection standards and contractual safeguards, such as NDAs and service-level agreements (SLAs).&nbsp; “Free” LLMs often come at the cost of your data.</p>
</blockquote>
</section>
<section id="best-practices-for-secure-llm-usage" class="level3">
<h3 class="anchored" data-anchor-id="best-practices-for-secure-llm-usage">Best Practices for Secure LLM Usage</h3>
<ol type="1">
<li>Code Assistance &amp; Completion (IDE Integration)</li>
</ol>
<p>Many developers integrate LLMs into their coding workflows for ghost text, inline chat, and code completion. To ensure security:</p>
<ul>
<li><p>Use IT-approved LLMs within the IDE-integrated editors.</p></li>
<li><p>Select solutions that protect data and have an active community responding to vulnerabilities.</p></li>
<li><p>Centralize access via Posit Workbench to eliminate the need for individual API Key management.</p></li>
</ul>
<ol start="2" type="1">
<li>Programmatic LLM Access (Proprietary Data Analysis)</li>
</ol>
<p>Developers often use LLMs for workflows like exploratory data analysis, requiring API access from code. Security measures should include:</p>
<ul>
<li><p>Using only IT-approved LLMs.</p></li>
<li><p>Choosing secure R and Python packages for LLM development, such as ellmer (R), chatlas (Python), which allow model switching.</p></li>
<li><p>Ensuring libraries come from trusted sources like Posit Package Manager to prevent vulnerability exploitation.</p></li>
<li><p>Verifying code snippets from LLM outputs to track drift and hallucinations over time.</p></li>
<li><p>Protecting authentication credentials using Managed Credentials in Posit Workbench instead of storing API keys manually</p></li>
</ul>
<ol start="3" type="1">
<li>Embedded LLMs in Applications &amp; Chat UIs</li>
</ol>
<p>When deploying applications with LLM-powered interactions:</p>
<ul>
<li><p>Use only IT-approved LLMs with secure access packages like shinychat for Shiny applications</p></li>
<li><p>Centralize application hosting and enforce strict access controls with Posit Connect</p></li>
<li><p>Protect authentication credentials with Managed Credentials to prevent exposure.</p></li>
<li><p>Monitor LLM contributions and ensure transparency, as some jurisdictions require explicit disclosure of AI-generated content.</p></li>
</ul>
</section>
<section id="case-study-how-posit-built-a-secure-chatbot" class="level3">
<h3 class="anchored" data-anchor-id="case-study-how-posit-built-a-secure-chatbot">Case Study: How Posit Built a Secure Chatbot</h3>
<p>One of the most common enterprise use cases for LLMs is chatbot development.&nbsp; At Posit, we applied the above best practices when building an internal chatbot for support assistance. Here’s what we learned:</p>
<ul>
<li><p>Risk Modeling is Crucial: We identified risks like data exposure, hallucinations, and unauthorized access before deployment.</p></li>
<li><p>LLM Vetting Pays Off: By selecting a trusted provider that was self-hosted instead of a free-tier model, we ensured contractual protections and security measures were in place.</p></li>
<li><p>Package Selection: We selected the package chatlas to be the backbone for our chatbot for its ease of use and ability to be hosted from our trusted Posit Package Manager repository.</p></li>
<li><p>Strict Access Controls Prevent Misuse: Our chatbot was hosted via Posit Connect, ensuring only authorized users had access.</p></li>
<li><p>Monitoring and Verification: We implemented verification for URL’s provided by the chatbot and a feedback mechanism by users to monitor performance over time.</p></li>
<li><p>Credential Management Simplified Security: We relied on Managed Credentials to securely connect to the chatbot’s LLM backend instead of exposing API keys.</p></li>
<li><p>Proactive Prompt Security: We fortified against prompt injection attacks by explicitly instructing it to refuse disclosure of its system prompt, preventing unauthorized manipulation and information leakage.</p></li>
</ul>
<p>These lessons reinforced the importance of security-first LLM implementations, whether for chatbot development or broader enterprise use cases.</p>
</section>
<section id="security-best-practices-a-shared-responsibility" class="level3">
<h3 class="anchored" data-anchor-id="security-best-practices-a-shared-responsibility">Security Best Practices: A Shared Responsibility</h3>
<p>For Developers:</p>
<p>✅ Define LLM usage requirements.</p>
<p>✅ Use only IT-approved LLMs.</p>
<p>✅ Verify outputs for consistency and track model performance.</p>
<p>✅ Choose rigorously maintained packages through Posit Package Manager.</p>
<p>✅ Protect Secrets - opt for Managed Credentials over API keys.</p>
<p>✅ Be transparent about AI-generated contributions.</p>
<p>For IT &amp; Admins</p>
<p>✅ Select LLM deployment models that align with security policies.</p>
<p>✅ Implement robust access controls and credential management.</p>
<p>✅ Develop a thread model and conduct regular audits.</p>
<p>✅ Provide clear usage guidelines and approved access methods.</p>
<p>✅ Centralize LLM access management to prevent unauthorized usage.</p>
<p>Enterprise-Wide Security Measures:</p>
<p>✅ Minimize data shared with LLMs.</p>
<p>✅ Define and enforce guardrails to prevent unauthorized responses.</p>
<p>✅ Implement monitoring to detect and mitigate prompt injection attacks.</p>
<p>✅ Use access controls to secure deployed LLM content.</p>
</section>
<section id="final-thoughts-llm-security-is-a-non-negotiable" class="level3">
<h3 class="anchored" data-anchor-id="final-thoughts-llm-security-is-a-non-negotiable">Final Thoughts: LLM Security is a Non-Negotiable</h3>
<p>LLMs are game-changers, but security must be a top priority. By implementing strong safeguards, vetting models carefully and fostering an enterprise-wide culture of responsible AI-use, organizations can unlock the full potential of LLMs without compromising data integrity.</p>
<p>Next Steps:</p>
<p>📌 Consult your LLM provider for additional best practices.</p>
<p>📌 Stay updated on key AI concepts like tokens, RAG, and prompt engineering.</p>
<p>📌 Explore secure deployment options with Posit Workbench and Posit Connect.</p>
<p>📌 Learn from real-world chatbot implementations and apply best practices to your own enterprise use cases.</p>
<p>By staying proactive, enterprises can confidently navigate the evolving LLM landscape while maintaining security and compliance.</p>
</section>
</section>
<section id="prompt-tips" class="level2">
<h2 class="anchored" data-anchor-id="prompt-tips">Prompt tips</h2>
<ol type="1">
<li>Be specific and descriptive</li>
<li>Define the output format</li>
<li>Add context by adding data, including the conversation history, RAG, etc</li>
<li>Give examples</li>
<li>Format the prompt with clear headlines and sections</li>
<li>Have it check its result</li>
</ol>
</section>
<section id="prompt-examples" class="level2">
<h2 class="anchored" data-anchor-id="prompt-examples">Prompt examples</h2>
<section id="default-prompt-usually-auto-included" class="level3">
<h3 class="anchored" data-anchor-id="default-prompt-usually-auto-included">Default prompt, usually auto included</h3>
<pre><code>You are a helpful assistant.</code></pre>
<p>often we don’t want this because then it can’t tell us when it is wrong.</p>
</section>
<section id="concise-answers" class="level3">
<h3 class="anchored" data-anchor-id="concise-answers">Concise answers</h3>
<pre><code>Answer questions directly and with no preamble. Do not use sections.</code></pre>
<pre><code>Answer this is as a terse technical consultant, 4 sentences max.</code></pre>
</section>
<section id="tell-it-to-tell-you-when-it-doesnt-know" class="level3">
<h3 class="anchored" data-anchor-id="tell-it-to-tell-you-when-it-doesnt-know">Tell it to tell you when it doesn’t know</h3>
<pre><code>If you can't answer the question based on the provided context, tell the user that you can't. </code></pre>
<pre><code>If you're unsure about any aspect of the project, make a reasonable decision and explain your choice in a comment.</code></pre>
<pre><code>It's important that you get clear, unambiguous instructions from the user, so if the user's request is unclear in any way, you should ask for clarification. If you aren't sure how to accomplish the user's request, say so, rather than using an uncertain technique.</code></pre>
<pre><code>Can you find the “set” in this photo? If you’re not able to answer this question reliably, tell me.</code></pre>
</section>
<section id="explain-itself" class="level3">
<h3 class="anchored" data-anchor-id="explain-itself">Explain itself</h3>
<pre><code>The response should not only contain the answer to the question, but also, a comprehensive explanation of how you came up with the answer.</code></pre>
</section>
<section id="limit-scope" class="level3">
<h3 class="anchored" data-anchor-id="limit-scope">Limit scope</h3>
<pre><code>Discuss only the R programming language and provide code examples in the R programming language. Friendly refuse to chat on something else." </code></pre>
<pre><code>Only answer questions related to Shiny, or R or Python. Don't answer any questions related to anything else.</code></pre>
<pre><code>You are a chatbot that is displayed on a web page next to a data dashboard. You will be asked to filter, sort, and answer questions on the data. The user interface in which this conversation is being shown is a narrow sidebar of a dashboard, so keep your answers concise and don't include unnecessary patter, nor additional prompts or offers for further assistance. For security reasons, you may only query this specific table. Always use SQL to count, sum, average, or otherwise aggregate the data. Do not retrieve the data and perform the aggregation yourself--if you cannot do it in SQL, you should refuse the request. </code></pre>
<pre><code>Edge cases that should be refused. All of these should be refused with an answer clarifying capability and requesting the user ask again. 
- Off-topic questions
- Questions that are on the topic, but are vageuly worded. 
- Questions where more information is needed from the user.
- Harassment / toxic language</code></pre>
</section>
<section id="dont-assume-the-user-has-asked-the-right-question" class="level3">
<h3 class="anchored" data-anchor-id="dont-assume-the-user-has-asked-the-right-question">Don’t assume the user has asked the right question</h3>
<pre><code>If the user provides a vague help request, like "Help" or "Show me instructions", describe your own capabilities in a helpful way, including examples of questions they can ask. Be sure to mention whatever advanced statistical capabilities (standard deviation, quantiles, correlation, variance) you have.</code></pre>
<pre><code>Don't assume the user asked the right question. Instead consider what they could have met and respond to the question that has an answer that is least complex. </code></pre>
</section>
<section id="detail-the-desired-output-format" class="level3">
<h3 class="anchored" data-anchor-id="detail-the-desired-output-format">Detail the desired output format</h3>
<pre><code>List the three most successful science fiction novels that have been turned into movies. 
Desired output format: A JSON with the keys novel, novel_year_of_publication, movie, movie_year_of_publication. </code></pre>
</section>
<section id="lead-the-witness" class="level3">
<h3 class="anchored" data-anchor-id="lead-the-witness">“Lead the witness”</h3>
<pre><code>I am creating a git issue to improve the documentation of our on prem software. Can you give this issue a once over, improving accuracy, tone, and making a more compelling argument? Please include as much of the original content as possible and stay concise. This is slightly controversial because the scope of our documentation for this product is constantly under tension over what we should document versus what should be documented in the respective editors that our product is making available via a web browser. There have been discussions to remove the "using git" sections entirely. Take this into account and strengthen the argument for why it is needed. Here is my first pass:
"first pass text"</code></pre>
<p>The “keep as much of the original content as possible” has really helped it keep my tone while being instructional for places where it’s able to catch technical misunderstandings. Doing a “leading the witness” approach helps you get the output you want, which I then try to run by humans for an actual value gut feel, since otherwise it’s just giving me an echo chamber.</p>
<pre><code>here is what I have as a short paragraph to intro a section in a documentation guide for a software on how to set up JIT. Can you please improve it's accuracy and make its message clearer? Keep it as similar to the original paragraph as possible. "JIT provisioning has the distinct advantages of (1) being on-demand and eliminating the need for pre-provisioning users without (2) needing the additional up front maintenance of managing a SCIM integration. These are advantages over other  methods of user provisioning like manual, LDAP/SSSD/Active Directory, or SCIM. If you already have one of those other methods and are happy with it, then likely there isn't a main driver for wanting to change. If you have need for pre-provisioning or a more robust role mapping than another method for user provisioning should be considered."</code></pre>
</section>
<section id="give-it-examples-of-good-and-bad" class="level3">
<h3 class="anchored" data-anchor-id="give-it-examples-of-good-and-bad">Give it examples of good and bad</h3>
<p>If I wanted to go a step further I might give it an example of “good” or callout “bad”.</p>
<pre><code>Here is what a good issue is like &lt;text&gt;, it should always include (1) (2) (3), make sure that it does. Don't include (A) (B) or (C), check that these aren't included before responding</code></pre>
</section>
<section id="follow-a-process-and-ask-for-feedback-before-continuing" class="level3">
<h3 class="anchored" data-anchor-id="follow-a-process-and-ask-for-feedback-before-continuing">Follow a process and ask for feedback before continuing</h3>
<pre><code>Answer questions thinking through step by step. </code></pre>
<pre><code>## Process to follow

1. Plan the changes carefully, considering the overall architecture and existing patterns.
2. Write the code follow existing code patterns and type hints
3. Add documentation where necessary
4. Run `just dev-format`
5. Ensure `just dev-check docker` or `just dev-check podman` passes
6. Consider adding or updating e2e tests in `app/tests/e2e/`. Add if needed.
7. Test changes with e2e tests using `just e2e-workflow docker` or `just e2e-workflow podman` for overall tests or to run specific tests use `just e2e-specific docker test` replacing test with the specific test filename and/or class + function name, for example `just e2e-specific docker test_asset_generation.py::TestInstallationGuideGeneration::test_config_downloads_from_install_guide_workbench`.
8. Once everything is working, make a commit and request human review.</code></pre>
<pre><code>Review these steps carefully and follow them to create the Shiny for {language} app. It is very important that your app follows these guidelines, so think about them before you start writing code:

- Analyze the user prompt carefully. Identify the main features, functionalities, and any specific requirements mentioned.

- Plan the structure of the app, including:
   - UI components (input widgets, output displays)
   - Server logic (data processing, reactive elements)
   - Any necessary data sources or external libraries

- Create the app code following these guidelines:
   - Use proper Shiny for {language} syntax and structure
   - Include necessary import statements at the beginning
   - Implement both the UI and server components
   - Ensure all features mentioned in the user prompt are included
   - Use cards for the UI layout
   - If the app contains a few input controls, default to using `page_sidebar` with the inputs in the sidebar and the outputs in the main panel--but if the user prompt specifies a different layout, follow that instead

- If the user prompt is vague or missing important details, make reasonable assumptions to fill in the gaps. Mention these assumptions in comments within the code.

- Ensure the app is complete and runnable. Include any additional helper functions or data processing steps as needed.</code></pre>
<pre><code>Write a blog post about climate change and include recent statistics following these steps: 
Gather facts: "List recent climate change statistics from 2023."
Plan the content: "Create an outline for a climate change blog post."
Write in parts: "Write an engaging introduction for a climate change blog post."
Expand each section separately.
Breaking down the task ensures each part is handled properly before moving to the next.</code></pre>
</section>
<section id="rendering-mermaid-diagrams" class="level3">
<h3 class="anchored" data-anchor-id="rendering-mermaid-diagrams">Rendering mermaid diagrams</h3>
<pre><code>Make a simple game application that displays the output of a mermaid diagram. The mermaid diagram illustrates the the difference between userprovisioning methods JIT and SCIM. show JIT and SCIM side by side, not together. </code></pre>
<p>Then once you’ve tweaked it to how you like it</p>
<pre><code>convert back into a mermaid diagram format</code></pre>
</section>
<section id="making-shiny-apps" class="level3">
<h3 class="anchored" data-anchor-id="making-shiny-apps">Making Shiny apps</h3>
<p>From: <a href="https://github.com/posit-dev/shiny-assistant/blob/main/shinyapp/app_prompt.md" class="uri">https://github.com/posit-dev/shiny-assistant/blob/main/shinyapp/app_prompt.md</a></p>
<pre><code>You are an AI assistant specialized in helping users with Shiny for {language}.
Your tasks include explaining concepts in Shiny, explaining how to do things with Shiny, or creating a complete, functional Shiny for {language} app code as an artifact based on the user's description.
Only answer questions related to Shiny, or R or Python. Don't answer any questions related to anything else.

If the user asks for explanations about concepts or code in Shiny for {language}, then you should provide detailed and accurate information about the topic. This may include descriptions, examples, use cases, and best practices related to Shiny for {language}. If your answer includes examples of Shiny apps, you should provide the code of each one within `&lt;SHINYAPP AUTORUN="0"&gt;` and `&lt;/SHINYAPP&gt;` tags, and otherwise adhere to the guidelines below for creating applications.

If the user asks for an application, you should provide a Shiny for {language} app code that meets the requirements specified in the user prompt. The app should be well-structured, include necessary components, and follow best practices for Shiny app development.

Review these steps carefully and follow them to create the Shiny for {language} app. It is very important that your app follows these guidelines, so think about them before you start writing code:

- Analyze the user prompt carefully. Identify the main features, functionalities, and any specific requirements mentioned.

- Plan the structure of the app, including:
   - UI components (input widgets, output displays)
   - Server logic (data processing, reactive elements)
   - Any necessary data sources or external libraries

- Create the app code following these guidelines:
   - Use proper Shiny for {language} syntax and structure
   - Include necessary import statements at the beginning
   - Implement both the UI and server components
   - Ensure all features mentioned in the user prompt are included
   - Use cards for the UI layout
   - If the app contains a few input controls, default to using `page_sidebar` with the inputs in the sidebar and the outputs in the main panel--but if the user prompt specifies a different layout, follow that instead

- If the user prompt is vague or missing important details, make reasonable assumptions to fill in the gaps. Mention these assumptions in comments within the code.

- Ensure the app is complete and runnable. Include any additional helper functions or data processing steps as needed.

- Output the entire app code within `&lt;SHINYAPP AUTORUN="1"&gt;` and `&lt;/SHINYAPP&gt;` tags. Inside those tags, each file should be within `&lt;FILE NAME="..."&gt;` and `&lt;/FILE&gt;` tags, where the `...` is replaced with the filename.

- Only put it in those tags if it is a complete app. If you are only displaying a code fragment, do not put it in those tags; simply put it in a code block with backticks.

- If the user asks to show the shinylive or editor panel, then create an app file where the content is completely empty. Do not put anything else in the file at all. Also, do not explain why you are doing this. Just do it.

{language_specific_prompt}

Consider multiple possible implementations of the application, then choose the best one. Remember to create a fully functional Shiny for {language} app that accurately reflects the user's requirements. If you're unsure about any aspect of the app, make a reasonable decision and explain your choice in a comment.

{verbosity}</code></pre>
</section>
<section id="making-r-shiny-apps" class="level3">
<h3 class="anchored" data-anchor-id="making-r-shiny-apps">Making R Shiny apps</h3>
<p>From: <a href="https://github.com/posit-dev/shiny-assistant/blob/main/shinyapp/app_prompt_r.md" class="uri">https://github.com/posit-dev/shiny-assistant/blob/main/shinyapp/app_prompt_r.md</a></p>
<pre><code>- Use the bslib package for styling and layout.</code></pre>
</section>
<section id="making-python-shiny-apps" class="level3">
<h3 class="anchored" data-anchor-id="making-python-shiny-apps">Making Python Shiny apps</h3>
<p>From: <a href="https://github.com/posit-dev/shiny-assistant/blob/main/shinyapp/app_prompt_python.md" class="uri">https://github.com/posit-dev/shiny-assistant/blob/main/shinyapp/app_prompt_python.md</a></p>
<pre><code>- Try not to import big packages like scipy.

- Prefer using matplotlib instead of plotly for plotting. A matplotlib plot should not return `plt`. It does not need to return anything, but if necessary, can return `fig`.

- Don't mix Shiny Core and Shiny Express syntax. Just use one. Use Core by default, and if the user asks for Express, then use Express.

- Do not use the captilized functions `reactive.Calc`, `reactive.Value`, or `reactive.Effect`. Instead, use the lowercase versions: `reactive.calc`, `reactive.value`, and `reactive.effect`.

- Do not use `ui.panel_sidebar()` because it no longer exists. Instead ,use `ui.sidebar()`.

- Do not use `panel_main()` because it no longer exists. Instead of `sidebar_layout(panel_sidebar(a, b), panel_main(x, y))`, use `sidebar_layout(sidebar(a, b), x, y)`.

- Never use the `@output` decorator, as it is deprecated. Instead, only use the `@render.xx` decorator.

- Avoid using `@render.image`. Prefer to use `@render.ui` instead and return a `ui.img()` object.

- If you have dynamic UI returning a `ui.img()`, use `@render.ui`, not `@render.image`, and use `ui.output_ui()` instead of `ui.output_image()`.

- For the qrcode package, when calling `img.save(buf)`, do not use the `format="PNG"` parameter. Just do `img.save(buf)`.

- Do not define the UI as a function. Instead use `app_ui = ...`, where the `...` is a static UI definition.

- If the app makes HTTP requests, use the `urllib3` library.

- If using Shiny Express, there are some things to keep in mind:
  - Use `from shiny.express import input, ui, ...`, where the `...` represents other necessary components.
  - Do not try to import `reactive` from `shiny.express`. It is imported from `shiny`.
  - For nestable UI components, like `ui.card()`, it should be used as `with ui.card(): ...`, instead of `ui.card(...)`

- If using Shiny Core, end with the `app = App(...)` call.

- If the user says that there is an error about a missing package, tell them to add requirements.txt with that package.

- Put all required packages in a `requirements.txt` file, and present that file inside of the `&lt;SHINYAPP&gt;` tags.

## Examples

This example shows the assistant creating an example app in the process of answering a question. Because the user did not explicitly ask to create an app, the example should be presented in &lt;SHINYAPP AUTORUN="0"&gt; instead of &lt;SHINYAPP AUTORUN="1"&gt;. This allows the user to run the app manually, but will not overwrite their existing work.

[Example]
[User]
How do I reset a `ui.input_text` to be empty?
[/User]
[Assistant]
To reset a `ui.input_text` to a default value in a Shiny for Python app, you can use the `update_text()` function. This function allows you to dynamically change the value of an input_text widget from the server side. Here's an explanation of how to do it:

1. First, you need to create an `input_text` widget in your UI with an ID.
2. In your server function, you can use the `@reactive.Effect` decorator to create a reactive effect that will update the input when a certain condition is met (like a button click).
3. Inside this effect, you use the `ui.update_text()` function to reset the value.

Here's a simple example that demonstrates this:

&lt;SHINYAPP AUTORUN="0"&gt;
&lt;FILE NAME="app.py"&gt;
from shiny import App, reactive, render, ui

app_ui = ui.page_fluid(
    ui.input_text("name", "Enter your name", value=""),
    ui.output_text("greeting"),
    ui.input_action_button("reset", "Reset"),
)

def server(input, output, session):
    @output
    @render.text
    def greeting():
        return f"Hello, {input.name()}!"

    @reactive.Effect
    @reactive.event(input.reset)
    def _():
        ui.update_text("name", value="")

app = App(app_ui, server)
&lt;/FILE&gt;
&lt;/SHINYAPP&gt;

In this example:

1. We have an `input_text` widget with the ID "name".
2. We have a button with the ID "reset".
3. In the server function, we create a reactive effect that listens for clicks on the reset button.
4. When the reset button is clicked, `ui.update_text("name", value="")` is called, which resets the "name" input to an empty string.

You can modify the default value to whatever you want by changing the `value` parameter in `ui.update_text()`. For example, if you want to reset it to "Default Name", you would use:

```python
ui.update_text("name", value="Default Name")
```

This approach allows you to reset the input text to any value you desire, providing flexibility in how you manage your app's state.
[/Assistant]
[/Example]

## Anti-Examples

These examples are INCORRECT and you must avoid these patterns when writing code. Look at these carefully and consider them before writing your own code.

### Use of nonexistent sidebar panel functions

The following code is INCORRECT because ui.panel_sidebar and ui.panel_main do not exist.

```
app_ui = ui.page_sidebar(
    ui.panel_sidebar(
        ui.input_action_button("generate", "Generate New Plot")
    ),
    ui.panel_main(
      ui.output_plot("plot")
    ),
)
```

Instead, sidebar page and sidebar layout code should look like this:

```
app_ui = ui.page_sidebar(
    ui.sidebar(
        ui.input_action_button("generate", "Generate New Plot")
    ),
    ui.output_plot("plot")
)
```

or:

```
app_ui = ui.page_fillable(
    ui.layout_sidebar(
        ui.sidebar(
            ui.input_action_button("generate", "Generate New Plot")
        ),
        ui.output_plot("plot")
    )
)
```

### Failure to import necessary modules, especially shiny.reactive

```
from shiny import App, render, ui
import numpy as np
import matplotlib.pyplot as plt

app_ui = ... # Elided for brevity

def server(input, output, session):

    @render.plot
    @reactive.event(input.generate)
    def regression_plot():
        n = input.num_points()
        noise_level = input.noise()

        # Elided for brevity

app = App(app_ui, server)
```

In this example, the code is missing the import statement for `reactive` from `shiny`. This will cause the code to fail when trying to use the `@reactive.event` decorator. The correct import statement should be:

```
from shiny import App, render, ui, reactive
```

### Incorrect import of reactive and req

The module shiny.express does not have `reactive` or `req` modules. The correct import should be from shiny.

Incorrect:

```
from shiny.express import input, ui, render, reactive, req
```

Correct:

```
from shiny import req, reactive
from shiny.express import input, ui, render
```

### `reactive.value` and a function with the same name

A reactive value must not have the same name as another object, like a function. In this example,

Incorrect, with the same name:

```
foo = reactive.value("1")

@render.text
def foo():
    ...
```

Correct, with different names:

```
foo_v = reactive.value("1")

@render.text
def foo():
    ...
```</code></pre>
</section>
<section id="references" class="level3">
<h3 class="anchored" data-anchor-id="references">References</h3>
<ul>
<li><a href="https://github.com/jcheng5/r-sidebot" class="uri">https://github.com/jcheng5/r-sidebot</a></li>
<li><a href="https://github.com/posit-dev/shiny-assistant" class="uri">https://github.com/posit-dev/shiny-assistant</a> and <a href="https://gallery.shinyapps.io/assistant/" class="uri">https://gallery.shinyapps.io/assistant/</a></li>
<li><a href="https://github.com/posit-dev/shiny-assistant/blob/main/shinyapp/app_prompt_python.md" class="uri">https://github.com/posit-dev/shiny-assistant/blob/main/shinyapp/app_prompt_python.md</a></li>
<li><a href="https://github.com/sol-eng/pharos/blob/main/CLAUDE.md" class="uri">https://github.com/sol-eng/pharos/blob/main/CLAUDE.md</a></li>
<li><a href="https://github.com/search?q=path%3A%2F%5ECLAUDE%5C.md%2F+OR+path%3A%2F%5Ellms%5C.txt%2F+OR+path%3A%2F%5E%5C.github%5C%2Fcopilot-instructions%5C.md%2F&amp;type=code" class="uri">https://github.com/search?q=path%3A%2F%5ECLAUDE%5C.md%2F+OR+path%3A%2F%5Ellms%5C.txt%2F+OR+path%3A%2F%5E%5C.github%5C%2Fcopilot-instructions%5C.md%2F&amp;type=code</a></li>
<li><a href="https://github.com/posit-dev/demobot" class="uri">https://github.com/posit-dev/demobot</a> (internal)</li>
</ul>
</section>
</section>
<section id="recommended-further-learningwatching" class="level2">
<h2 class="anchored" data-anchor-id="recommended-further-learningwatching">Recommended further learning/watching</h2>
<ul>
<li>Recommended video on AI from JJ: <a href="https://www.youtube.com/watch?v=LCEmiRjPEtQ" class="uri">https://www.youtube.com/watch?v=LCEmiRjPEtQ</a></li>
<li>New package for benchmarking LLM apps in R: <a href="https://github.com/tidyverse/vitals" class="uri">https://github.com/tidyverse/vitals</a></li>
<li>AWS Code Whisperer: <a href="https://open-vsx.org/extension/amazonwebservices/aws-toolkit-vscode" class="uri">https://open-vsx.org/extension/amazonwebservices/aws-toolkit-vscode</a></li>
<li>RStudio Copilot Integration: <a href="https://docs.posit.co/ide/user/ide/guide/tools/copilot.html" class="uri">https://docs.posit.co/ide/user/ide/guide/tools/copilot.html</a></li>
<li>Investigating truthfulness: <a href="https://transluce.org/investigating-o3-truthfulness" class="uri">https://transluce.org/investigating-o3-truthfulness</a></li>
<li>Joe’s LLM workshop:<a href="https://jcheng5.github.io/llm-quickstart/quickstart.html#/title-slide">https://jcheng5.github.io/llm-quickstart/quickstart.html#/title-slide</a></li>
<li>Security conference talk about the dangers of ML (4:08 is where he talks about ml): <a href="https://www.youtube.com/watch?v=ajGX7odA87k">https://www.youtube.com/watch?v=ajGX7odA87k</a></li>
<li>Moving beyond “algorithmic bias is a data problem”: <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8085589/" class="uri">https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8085589/</a></li>
<li>Here’s What Ethical AI Really Means - YouTube philosophy tube: <a href="https://www.youtube.com/watch?v=AaU6tI2pb3M" class="uri">https://www.youtube.com/watch?v=AaU6tI2pb3M</a></li>
<li>i-will-fucking-piledrive-you-if-you-mention-ai-again: <a href="https://ludic.mataroa.blog/blog/i-will-fucking-piledrive-you-if-you-mention-ai-again/" class="uri">https://ludic.mataroa.blog/blog/i-will-fucking-piledrive-you-if-you-mention-ai-again/</a></li>
<li>Podcast about AI, from tech will not save you: <a href="https://techwontsave.us/episode/277_generative_ai_is_not_inevitable_w_emily_m_bender_and_alex_hanna" class="uri">https://techwontsave.us/episode/277_generative_ai_is_not_inevitable_w_emily_m_bender_and_alex_hanna</a></li>
<li>Remove AI from from your google search: <a href="https://udm14.com/" class="uri">https://udm14.com/</a></li>
<li>AI reddit post watching microsoft employees go insane: <a href="https://old.reddit.com/r/ExperiencedDevs/comments/1krttqo/my_new_hobby_watching_ai_slowly_drive_microsoft/" class="uri">https://old.reddit.com/r/ExperiencedDevs/comments/1krttqo/my_new_hobby_watching_ai_slowly_drive_microsoft/</a></li>
<li>The who cares era and the contribution by AI: <a href="https://dansinker.com/posts/2025-05-23-who-cares/" class="uri">https://dansinker.com/posts/2025-05-23-who-cares/</a></li>
<li>AI hiring leak from McHire that was built by an AI company: <a href="https://www.wired.com/story/mcdonalds-ai-hiring-chat-bot-paradoxai/" class="uri">https://www.wired.com/story/mcdonalds-ai-hiring-chat-bot-paradoxai/</a></li>
<li>AWS CEO says replacing workers is short sided: <a href="https://www.theregister.com/2025/08/21/aws_ceo_entry_level_jobs_opinion/" class="uri">https://www.theregister.com/2025/08/21/aws_ceo_entry_level_jobs_opinion/</a></li>
<li>Wikipedia: Signs of AI Writing: <a href="https://en.wikipedia.org/wiki/Wikipedia:Signs_of_AI_writing" class="uri">https://en.wikipedia.org/wiki/Wikipedia:Signs_of_AI_writing</a></li>
<li>Vibe coding is legacy code: <a href="https://blog.val.town/vibe-code" class="uri">https://blog.val.town/vibe-code</a></li>
<li>Indirect prompt injection: <a href="https://simonwillison.net/2025/Aug/25/agentic-browser-security/" class="uri">https://simonwillison.net/2025/Aug/25/agentic-browser-security/</a></li>
</ul>


</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/LLMs.html</guid>
  <pubDate>Thu, 03 Jul 2025 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Creating a custom Workbench login page</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/workbench-custom-login.html</link>
  <description><![CDATA[ 






<section id="why-would-someone-want-to-do-this" class="level2">
<h2 class="anchored" data-anchor-id="why-would-someone-want-to-do-this">Why would someone want to do this?</h2>
<p>Login can be a challenging process for many users and having the admin provide additional details can be very handy to point folks in the right direction. Also, being able to include your own branding isn’t just a nice jazzy thing but can be a security requirement for some teams to help provide another layer of protection via visual indicators.</p>
</section>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>A customer requested that this page be made clearer: <a href="https://docs.posit.co/ide/server-pro/admin/authenticating_users/customizing_signin.html" class="uri">https://docs.posit.co/ide/server-pro/admin/authenticating_users/customizing_signin.html</a></p>
<p>They were confused that an example wasn’t built for them at the called out location <code>/opt/config/rstudio-login.html</code>.</p>
<p>This support article has some useful examples that are useful: <a href="https://support.posit.co/hc/en-us/articles/231327847-Customizing-the-Posit-Workbench-RStudio-Server-Pro-Login-Page" class="uri">https://support.posit.co/hc/en-us/articles/231327847-Customizing-the-Posit-Workbench-RStudio-Server-Pro-Login-Page</a></p>
<p>There are also some templates in this folder that might be useful to reference: <code>/usr/lib/rstudio-server/www/templates/encrypted-sign-in.html</code></p>
</section>
<section id="plain-html" class="level2">
<h2 class="anchored" data-anchor-id="plain-html">Plain html</h2>
<p>For this particular customer request I’ve been working on their goal is to modify that actual contents of the login information pane. Here is some (hopefully) useful exploration -</p>
<p>Modifying the config&nbsp;<code>/etc/rstudio/rserver.conf</code>&nbsp;with:</p>
<pre><code>auth-login-page-html=/etc/rstudio/login.html</code></pre>
<p>And then creating that file&nbsp;<code>/etc/rstudio/login.html</code>&nbsp;with contents like:</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Requesting access&lt;/h1&gt;
    &lt;p&gt;In order to get access to this software a ticket will need to be submitted through IT.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>This results in a login page with the information appended at the bottom:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/workbench-custom-login-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Workbench login page"><img src="https://questionable.quarto.pub/blog/work/img/workbench-custom-login-1.png" class="img-fluid figure-img" alt="Workbench login page"></a></p>
<figcaption>Workbench login page</figcaption>
</figure>
</div>
</section>
<section id="with-more-jazz" class="level2">
<h2 class="anchored" data-anchor-id="with-more-jazz">With more jazz</h2>
<p>If we append the instructions on the support article and add a logo to <code>/usr/lib/rstudio-server/www/images</code> then we can jazz things up further.</p>
<p>Note there are already files/images in <code>/usr/lib/rstudio-server/www/images</code> and in this example instead of using <code>logo.png</code> we made a custom image called <code>frog.png</code> by downloading an image from the internet with: <code>wget http://images.clipartpanda.com/frog-clip-art-frog_green.png -O /usr/lib/rstudio-server/www/images/logo.png</code></p>
<p><code>/etc/rstudio/login.html</code>:</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Requesting access&lt;/h1&gt;
    &lt;p&gt;In order to get access to this software a ticket will need to be submitted through IT.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;

&lt;script type="text/javascript"&gt;
window.onload=function(){

var logo = document.createElement("img");
logo.setAttribute("src","images/frog.png");
logo.setAttribute("height", "36px");
logo.setAttribute("width", "36px");
logo.setAttribute("style", "float: right;");
document.getElementById("banner").appendChild(logo);

var cap = document.getElementById("caption_header");
cap.innerHTML = "This is a message added by your admin. Sign into Posit with your assigned credentials credentials";    
}
&lt;/script&gt;

&lt;style&gt;
#banner {background-color: #4682b4;}
#caption {border-bottom-color: #4682b4;}
&lt;/style&gt;</code></pre>
<p>This results in a login page with information appended at the bottom as well as custom coloring and a logo and the header for the login blurb changed:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/workbench-custom-login-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Workbench login page"><img src="https://questionable.quarto.pub/blog/work/img/workbench-custom-login-2.png" class="img-fluid figure-img" alt="Workbench login page"></a></p>
<figcaption>Workbench login page</figcaption>
</figure>
</div>
</section>
<section id="reference" class="level2">
<h2 class="anchored" data-anchor-id="reference">Reference</h2>
<p><a href="https://github.com/rstudio/rstudio-pro/issues/8378">Git issue</a></p>


</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/workbench-custom-login.html</guid>
  <pubDate>Wed, 18 Jun 2025 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Exploring Positron</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/Positron.html</link>
  <description><![CDATA[ 






<p>Positron is a new IDE developed by Posit. I’ve been putting off giving it a deep dive. I love RStudio. Maybe it’s the green icons, or the simple 4 box layout, or even just that it’s what I’ve been using for so long but it really feels like a happy place to me.</p>
<p>I was the same way with RMarkdown. You could have torn it from my cold dead hands, but eventually that feature comes along that makes going through the process of changing worth it. And for me with Quarto that was <code>lightbox</code> with its ability to magically resize images. Such a simple thing, such a challenging thing to do outside of Quarto.</p>
<section id="positron-in-wsl" class="level2">
<h2 class="anchored" data-anchor-id="positron-in-wsl">Positron in WSL</h2>
<p>Check your linux version with <code>uname -m</code> and then install the correct one from : <a href="https://positron.posit.co/download.html" class="uri">https://positron.posit.co/download.html</a></p>
<p>I’m on Ubuntu Noble so I had a couple hoops to jump through for one of the system dependencies.</p>
<pre><code>wget https://cdn.posit.co/positron/releases/deb/x86_64/Positron-2025.08.0-130-x64.deb

sudo apt --fix-broken install
sudo apt install libasound2t64

sudo dpkg -i Positron-2025.08.0-130-x64.deb</code></pre>
<p>Open it with: <code>Positron</code>.</p>
<div class="quarto-video"><video id="video_shortcode_videojs_video1" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="Screen"></video></div>
<p>Pure magic - opens and works like a dream. Was expecting to have to do more setup with something to get it to open the GUI and am just over the moon at how easy and great the experience was.</p>
</section>
<section id="first-impressions" class="level2">
<h2 class="anchored" data-anchor-id="first-impressions">First impressions</h2>
<p>Changing the theme made it feel like less of a sterile and “other” place. I’m a big fan of dark modes and I actually really liked the built in dark mode.</p>
<p>gear -&gt; theme -&gt; positron dark</p>
<p>There are some good resources for porting your own theme also: <a href="https://www.r-bloggers.com/2025/05/porting-my-favorite-rstudio-color-theme-to-positron/" class="uri">https://www.r-bloggers.com/2025/05/porting-my-favorite-rstudio-color-theme-to-positron/</a></p>
</section>
<section id="viewing-data" class="level2">
<h2 class="anchored" data-anchor-id="viewing-data">Viewing data</h2>
<div id="fig-elephants" class="quarto-layout-panel">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-elephants-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="quarto-layout-row">
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-elephants" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-light-theme" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-light-theme-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="img/positron-theme-light.png" class="lightbox" data-gallery="fig-elephants" title="Figure&nbsp;1&nbsp;(a): Light theme"><img src="https://questionable.quarto.pub/blog/work/img/positron-theme-light.png" class="img-fluid figure-img" data-ref-parent="fig-elephants"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-light-theme-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Light theme
</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-elephants" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-dark-theme" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-dark-theme-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="img/positron-data.png" class="lightbox" data-gallery="fig-elephants" title="Figure&nbsp;1&nbsp;(b): dark theme"><img src="https://questionable.quarto.pub/blog/work/img/positron-data.png" class="img-fluid figure-img" data-ref-parent="fig-elephants"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dark-theme-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(b) dark theme
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-elephants-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Data Previewer now shows distributions!
</figcaption>
</figure>
</div>
</section>
<section id="my-extensions" class="level2">
<h2 class="anchored" data-anchor-id="my-extensions">My extensions</h2>
<p>Since Positron is a fork of VS Code it relies on extensions for adding various features. Here are some of my favorites:</p>
<ul>
<li>Air (R Language Support)</li>
<li>Posit Publisher</li>
<li>Black Formatter</li>
<li>Gitlive</li>
<li>Pyright</li>
<li>Jupyter</li>
<li>Jupter Cell Tags</li>
<li>Jupyter Keymap</li>
<li>Jupyter Slide Show</li>
<li>Project Manager</li>
<li>Python Debugger</li>
<li>Quarto</li>
<li>Ruff</li>
<li>Shiny</li>
<li>Scope to this</li>
<li>vscode-pets</li>
</ul>
<!--
Soon: 

- [databot](https://positpbc.atlassian.net/wiki/spaces/POSITRON/pages/1613365269/Databot+Getting+Started#Installation)
- [Positron Assistant](https://connect.posit.it/positron-wiki/positron-assistant.html)
-->
</section>
<section id="remote-connections-with-ssh" class="level2">
<h2 class="anchored" data-anchor-id="remote-connections-with-ssh">Remote connections with SSH</h2>
<p>This is bundled with Positron and there’s no need to install anything.</p>
<p>Resource: <a href="https://positron.posit.co/remote-ssh.html" class="uri">https://positron.posit.co/remote-ssh.html</a></p>
</section>
<section id="llm-integrations" class="level2">
<h2 class="anchored" data-anchor-id="llm-integrations">LLM integrations</h2>
<p>Stay tuned for Posit::Conf 2025!</p>
</section>
<section id="running-a-python-project" class="level2">
<h2 class="anchored" data-anchor-id="running-a-python-project">Running a python project</h2>
<p>Reference: <a href="https://positron.posit.co/start.html" class="uri">https://positron.posit.co/start.html</a></p>
<p>I’m a big fan of using the git integration to clone down a project, for example this set of <a href="https://github.com/rstudio/posit-demo-assets">demo examples</a>.</p>
<p>We’ll want to make sure that <code>ipykernel</code> is installed:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip install ipykernel</span></code></pre></div></div>
<p>We can discover which python versions we have access to with:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> /opt/python/</span></code></pre></div></div>
<section id="select-the-python-interpreter" class="level3">
<h3 class="anchored" data-anchor-id="select-the-python-interpreter">Select the python interpreter</h3>
<p>Manage the interpreter in the session (virtual environment) through the top right icon:</p>
<div id="fig-python-interp" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-python-interp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="img/python-interpreter.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Figure&nbsp;2: Python interpreter selection"><img src="https://questionable.quarto.pub/blog/work/img/python-interpreter.png" class="img-fluid figure-img"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-python-interp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Python interpreter selection
</figcaption>
</figure>
</div>
<p>Reference: <a href="https://positron.posit.co/managing-interpreters.html" class="uri">https://positron.posit.co/managing-interpreters.html</a></p>
<p>You can also manually select the python interpreter with <code>ctrl-shift-p</code> and then <code>Python: Select Interpreter</code> command and select the <code>Enter interpreter path...</code> option.</p>
<p>This gives you the ability to refresh the visible interpreters with the circle arrow symbol.</p>
<div id="fig-python-interp-manually" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-python-interp-manually-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="img/select-interpreter-manually.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="Figure&nbsp;3: Python interpreter manual selection"><img src="https://questionable.quarto.pub/blog/work/img/select-interpreter-manually.png" class="img-fluid figure-img"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-python-interp-manually-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: Python interpreter manual selection
</figcaption>
</figure>
</div>
<p>We can create a new interpreter (and then select it through the dropdown) either with uv or pip.</p>
<section id="the-uv-way" class="level4">
<h4 class="anchored" data-anchor-id="the-uv-way">The uv way</h4>
<p>Use <a href="https://github.com/astral-sh/uv">uv</a>. It will detect that this is a project and create the venv for us when we go to run the application.</p>
<p>Run the application:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> run app.py</span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> run shiny run <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--reload</span> app.py</span></code></pre></div></div>
</section>
<section id="the-pip-way" class="level4">
<h4 class="anchored" data-anchor-id="the-pip-way">The pip way</h4>
<p>Setup the <code>venv</code> environment:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv env</span>
<span id="cb5-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">.</span> env/bin/activate</span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># source env/bin/activate</span></span>
<span id="cb5-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span> pip</span>
<span id="cb5-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> requirements.txt</span></code></pre></div></div>
<p>I recommend using <code>env</code> instead of <code>.venv</code> because quarto will automatically pick it up.</p>
<p>Run the application:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">shiny</span> run <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--reload</span> app.py</span></code></pre></div></div>
</section>
<section id="register-new-interpreter-as-kernel-likely-optional" class="level4">
<h4 class="anchored" data-anchor-id="register-new-interpreter-as-kernel-likely-optional">Register new interpreter as kernel (likely optional)</h4>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Register as kernel</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install ipykernel jupyter</span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># python -m ipykernel install --name "my-new-project_venv" --user </span></span>
<span id="cb7-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> ipykernel install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shiny-income-share"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--user</span></span></code></pre></div></div>
</section>
</section>
<section id="running-and-previewing-an-app" class="level3">
<h3 class="anchored" data-anchor-id="running-and-previewing-an-app">Running and previewing an app</h3>
<p>Open the folder so that the root directory is the content example you want to run.</p>
<p>Make sure the appropriate virtual environment has been created (following the steps above) and selected as the interpreter.</p>
<p>Click the play button to launch the application.</p>
<div id="fig-python-app" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-python-app-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="img/running-shiny-python-app.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5" title="Figure&nbsp;4: Python Shiny App"><img src="https://questionable.quarto.pub/blog/work/img/running-shiny-python-app.png" class="img-fluid figure-img"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-python-app-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: Python Shiny App
</figcaption>
</figure>
</div>
</section>
<section id="creating-a-new-project" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-new-project">Creating a new project</h3>
<section id="the-pip-way-1" class="level4">
<h4 class="anchored" data-anchor-id="the-pip-way-1">The pip way</h4>
<p>Create a <code>venv</code> to isolate environments and generate a <code>requirements.txt</code> file so that only the minimum packages needed to support your project are included. Read <a href="https://docs.posit.co/connect/admin/python/package-management/index.html">this</a> for more on Python package management.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip freeze <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> requirements.txt</span>
<span id="cb8-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> requirements.txt</span></code></pre></div></div>
</section>
<section id="the-uv-way-1" class="level4">
<h4 class="anchored" data-anchor-id="the-uv-way-1">The uv way</h4>
<p>Create a <a href="https://docs.posit.co/connect/user/publishing-cli-notebook/index.html#creating-a-manifest-for-future-deployment"><code>manifest.json</code> file</a> to support git-backed publishing</p>
<p>For uv projects, they can be initialized and updated with (change format and packages as needed):</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> init <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--app</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--python</span> 3.12.6</span>
<span id="cb9-2">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> add numpy matplotlib jupyter</span>
<span id="cb9-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> sync <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span></span>
<span id="cb9-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> export <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> requirements.txt <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-hashes</span></span>
<span id="cb9-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> run rsconnect write-manifest api .</span>
<span id="cb9-6"></span>
<span id="cb9-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dev dependencies may need to be added </span></span>
<span id="cb9-8">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> add <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--dev</span> uv ipykernel</span></code></pre></div></div>
</section>
</section>
<section id="deploying" class="level3">
<h3 class="anchored" data-anchor-id="deploying">Deploying</h3>
<p>Reference the <a href="https://docs.posit.co/connect/user/shiny-python/">Posit Connect User Guide: Shiny for Python</a></p>
<section id="using-posit-publisher" class="level4">
<h4 class="anchored" data-anchor-id="using-posit-publisher">Using Posit Publisher</h4>
<p>Make sure the Posit Publisher extension is installed.</p>
<p>Click <code>new deployment</code> and follow the screens to add your developer information and an API key.</p>
<p>Make sure to add any files that need to be included in the bundle to (1) the .toml file (2) the project files list.</p>
<p>For example, the .toml file might look like:</p>
<pre><code># Configuration file generated by Posit Publisher.
# Please review and modify as needed. See the documentation for more options:
# https://github.com/posit-dev/publisher/blob/main/docs/configuration.md
'$schema' = 'https://cdn.posit.co/publisher/schemas/posit-publishing-schema-v3.json'
type = 'python-shiny'
entrypoint = 'app.py'
validate = true
files = [
  '/app.py',
  '/data,csv',
  '/requirements.txt',
  '/.posit/publish/shiny-income-share-positron-FLKH.toml',
  '/.posit/publish/deployments/deployment-NVOJ.toml',
  '/data.csv'
]
title = 'shiny-income-share-positron'

[python]
version = "3.11.9"
package_file = "requirements.txt"
package_manager = "pip"
</code></pre>
<p>Reference: <a href="https://github.com/posit-dev/publisher/blob/main/docs/configuration.md" class="uri">https://github.com/posit-dev/publisher/blob/main/docs/configuration.md</a></p>
</section>
<section id="rsconnect-python-cli" class="level4">
<h4 class="anchored" data-anchor-id="rsconnect-python-cli">rsconnect-python CLI</h4>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># With uv</span></span>
<span id="cb11-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> run rsconnect deploy shiny .</span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Without uv</span></span>
<span id="cb11-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rsconnect</span> deploy shiny .</span></code></pre></div></div>
</section>
<section id="git-backed" class="level4">
<h4 class="anchored" data-anchor-id="git-backed">Git-backed</h4>
<p>Update the code, and then run:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># With uv</span></span>
<span id="cb12-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> export <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> requirements.txt <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-hashes</span></span>
<span id="cb12-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> run rsconnect write-manifest shiny <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--overwrite</span> .</span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Without uv</span></span>
<span id="cb12-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> freeze <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> requirements.txt </span>
<span id="cb12-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rsconnect</span> write-manifest shiny <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--overwrite</span> .</span></code></pre></div></div>
<p>Commit the new <code>manifest.json</code> file to the git repo along with the code.</p>
</section>
</section>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<p>Inspired by: <a href="https://www.andrewheiss.com/blog/2024/07/08/fun-with-positron/" class="uri">https://www.andrewheiss.com/blog/2024/07/08/fun-with-positron/</a></p>


</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/Positron.html</guid>
  <pubDate>Tue, 03 Jun 2025 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Finding R System Dependencies</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/system-dependencies-r.html</link>
  <description><![CDATA[ 






<section id="using-pak-and-renv-to-find-r-system-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="using-pak-and-renv-to-find-r-system-dependencies">Using pak and renv to find R system dependencies</h2>
<p>Let’s try to get an environment of packages and understand the system dependencies. This would be useful for fresh installs into a new environment.</p>
</section>
<section id="a-note-on-methodology" class="level2">
<h2 class="anchored" data-anchor-id="a-note-on-methodology">A note on methodology</h2>
<p>In an ideal world a user will be able to identify what packages they are using. Do you really need that package from 3 years ago that you installed but ended up not using? Technology doesn’t solve all problems! Sometimes the “soft” method is the best way to solve a problem.</p>
</section>
<section id="steps" class="level2">
<h2 class="anchored" data-anchor-id="steps">Steps</h2>
<section id="create-the-current-environment-as-a-renv-project-and-snapshot-it" class="level3">
<h3 class="anchored" data-anchor-id="create-the-current-environment-as-a-renv-project-and-snapshot-it">Create the current environment as a renv project and snapshot it</h3>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(pak)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(renv)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Or restore a project with renv::restore() if using a pre-existing projectd</span></span>
<span id="cb1-5">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">init</span>()</span>
<span id="cb1-6">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">snapshot</span>()</span></code></pre></div></div>
</section>
<section id="find-what-os-we-are-on" class="level3">
<h3 class="anchored" data-anchor-id="find-what-os-we-are-on">Find what OS we are on</h3>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># R.version # Nope</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># version # Nope</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .Platform # nope</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .Platform$OS.type # nope</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sys.info() # nope</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sys.info()["sysname"] # nope</span></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># system("cat /etc/*release") # closer</span></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># system("lsb_release -a") # closer</span></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pak::system_r_platform_data()$distribution # this is the one!</span></span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(.Platform<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>OS.type <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unix"</span>){</span>
<span id="cb2-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.setenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PKG_SYSREQS_PLATFORM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>pak<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system_r_platform_data</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>distribution)</span>
<span id="cb2-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PKG_SYSREQS_PLATFORM"</span>))</span>
<span id="cb2-14">} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> { <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## windows</span></span>
<span id="cb2-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.setenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PKG_SYSREQS_PLATFORM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"windows"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># supported by pak</span></span>
<span id="cb2-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PKG_SYSREQS_PLATFORM"</span>))</span>
<span id="cb2-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warning</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Windows is not support by pak"</span>)</span>
<span id="cb2-18">}</span></code></pre></div></div>
</section>
<section id="optionally-recreate-the-environment-on-another-server-using-renv-and-pak" class="level3">
<h3 class="anchored" data-anchor-id="optionally-recreate-the-environment-on-another-server-using-renv-and-pak">Optionally, recreate the environment on another server using renv and pak</h3>
<pre><code>cp rserver/renv.lock /new-location 

cd /new-location &amp;&amp; \
    echo -e 'options(renv.config.pak.enabled=TRUE)\noptions(repos=c(CRAN="https://packagemanager.posit.co/cran/__linux__/rhel9/2025-03-10")) Sys.getenv("PKG_SYSREQS_PLATFORM" &gt; .Rprofile &amp;&amp; \
    R -q -e 'install.packages(c("renv"))' &amp;&amp; \
    R -q -e 'renv::activate()' &amp;&amp; \
    R -q -e 'renv::restore()'</code></pre>
</section>
<section id="find-the-installed-packages" class="level3">
<h3 class="anchored" data-anchor-id="find-the-installed-packages">Find the installed packages</h3>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(jsonlite)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb4-3">my_renvlock <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromJSON</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"renv.lock"</span>)</span>
<span id="cb4-4"></span>
<span id="cb4-5">pkgs_df<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(my_renvlock<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Packages, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enframe</span>(.) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Version"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(value)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>())</span></code></pre></div></div>
</section>
<section id="find-the-system-dependencies-for-those-installed-packages" class="level3">
<h3 class="anchored" data-anchor-id="find-the-system-dependencies-for-those-installed-packages">Find the system dependencies for those installed packages</h3>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">deps<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>pak<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_sysreqs</span>(pkgs_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Package, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">upgrade =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sysreqs_platform=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PKG_SYSREQS_PLATFORM"</span>))</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the commands to run to install system deps to support the package environment</span></span>
<span id="cb5-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(deps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pre_install,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(deps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pre_install),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(deps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>install_scripts,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(deps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>install_scripts,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(deps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>post_install,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(deps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>post_install),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div></div>
</section>
<section id="alternatively-find-the-most-common-package-downloaded-from-package-manager-and-support-those" class="level3">
<h3 class="anchored" data-anchor-id="alternatively-find-the-most-common-package-downloaded-from-package-manager-and-support-those">Alternatively, find the most common package downloaded from package manager and support those</h3>
<p>Credit: <a href="https://github.com/rstudio/rstudio-pro/issues/6536#issuecomment-2694317773" class="uri">https://github.com/rstudio/rstudio-pro/issues/6536#issuecomment-2694317773</a></p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(httr)</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(jsonlite)</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(pak)</span>
<span id="cb6-4"></span>
<span id="cb6-5">base_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://packagemanager.posit.co/__api__/metrics/packages"</span></span>
<span id="cb6-6">query_params <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb6-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_sort"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"count"</span>,</span>
<span id="cb6-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_order"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"desc"</span>,</span>
<span id="cb6-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_days"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>,</span>
<span id="cb6-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_sourceType"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>,</span>
<span id="cb6-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_limit"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb6-12">)</span>
<span id="cb6-13"></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make the GET request</span></span>
<span id="cb6-15">response <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GET</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> base_url, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">query =</span> query_params)</span>
<span id="cb6-16"></span>
<span id="cb6-17"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">status_code</span>(response) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>) {</span>
<span id="cb6-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse the JSON content</span></span>
<span id="cb6-19">  content <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">content</span>(response, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>)</span>
<span id="cb6-20">  data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromJSON</span>(content)</span>
<span id="cb6-21">  </span>
<span id="cb6-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set platform name ()</span></span>
<span id="cb6-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.setenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PKG_SYSREQS_PLATFORM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rockylinux-9"</span>)</span>
<span id="cb6-24">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># extract system reqs using pak</span></span>
<span id="cb6-25">  deps<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>pak<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_sysreqs</span>(data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name)</span>
<span id="cb6-26">  </span>
<span id="cb6-27">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print commands</span></span>
<span id="cb6-28">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(deps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pre_install,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(deps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pre_install),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-29">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(deps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>install_scripts,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(deps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>install_scripts,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-30">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(deps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>post_install,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(deps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>post_install),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-31">  </span>
<span id="cb6-32">} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb6-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error: Unable to fetch data from P3M. Status code:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">status_code</span>(response), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-34">}</span></code></pre></div></div>


</section>
</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/system-dependencies-r.html</guid>
  <pubDate>Wed, 21 May 2025 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Using SAML and SCIM with EntraID with Posit Team</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/saml-entraid-posit-team.html</link>
  <description><![CDATA[ 






<section id="configuring-azure-entraid-for-saml-auth-in-workbench-with-scim-for-user-provisioning-and-connect-no-user-provisioning-ui-access-only" class="level1">
<h1>Configuring Azure EntraID for SAML Auth in Workbench (with SCIM for user provisioning) and Connect (no user provisioning, UI access only)</h1>
<p>To configure Microsoft Entra ID for SAML, both the software address and an additional path, if being used, must be known. If there is not an additional path being served from then omit that from the below instructions. In addition Azure requires a secure connection, and so a valid SSL certificate (cannot be self-signed) is needed.</p>
<section id="networking-requirements" class="level2">
<h2 class="anchored" data-anchor-id="networking-requirements">Networking requirements</h2>
<p>Relevant cheat sheet in docs: <a href="https://docs.posit.co/getting-started/networking.html">https://docs.posit.co/getting-started/networking.html</a></p>
<p>Getting info from azure is on a push basis for SCIM provisioning, so we need connectivity open on port 443 via the express route or however so there is access. In order for authentication via SAML and Azure to work these ports need to be enabled:</p>
<ul>
<li>443 (for https)</li>
</ul>
<p>Networking access is needed between the Connect and Workbench servers and the Azure service.</p>
<p>Connect will also need web sockets enabled. Will be needed for each of the redirects (as detailed in the lower section).</p>
</section>
<section id="system-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="system-dependencies">System dependencies</h2>
<p>On Rhel9:</p>
<pre><code>yum install -y oddjob oddjob-mkhomedir</code></pre>
</section>
<section id="ssl-requirements" class="level2">
<h2 class="anchored" data-anchor-id="ssl-requirements">SSL requirements</h2>
<p>Azure restricts to only using https addresses, not http, for doing redirects and authentication via API. A SSL certificate must be installed on each server. This SSL cert must be recognizable by Azure, meaning that it can’t be an internal CA.</p>
<p>Does the cert need to be installed on the server, or does installing it for the prox work? It just needs the “front door” address to have HTTPS, if running with an App gateway, then you only need SSL on that load balancer/proxy.</p>
<section id="workbench" class="level3">
<h3 class="anchored" data-anchor-id="workbench">Workbench</h3>
<pre><code>openssl req -new -key $URL.key -out $URL.csr -config $URL.cnf
openssl genrsa -out $URL.key 2048</code></pre>
<pre><code>#-----------------------------------------------------------------------------------------#
# HTTPS Configuration Section
#
# The certificate key should be owned by rstudio and have perms: sudo chmod 600 /var/certs/rstudio.key
# Unfortunately at this time, RStudio doesn't support a passphrase on the SSL cert.
ssl-enabled=1
ssl-certificate-key=/path/to/key/posit.key
ssl-certificate=/path/to/certificate/posit.crt
ssl-protocols=TLSv1.2 TLSv1.3</code></pre>
<pre><code>openssl x509 -noout -modulus -in /etc/rstudio/fullchain.cer | openssl md5
openssl rsa -noout -modulus -in /etc/rstudio/fullchain.key | openssl md5</code></pre>
</section>
<section id="connect" class="level3">
<h3 class="anchored" data-anchor-id="connect">Connect</h3>
<pre><code>nano root.crt ← paste contents of root certificate 
sudo cp root.crt /etc/pki/ca-trust/source/anchors/
sudo update-ca-trust
trust list | grep -i &lt;name&gt;</code></pre>
<pre><code>[HTTPS]
; https://docs.posit.co/connect/admin/appendix/configuration/#HTTPS
; RStudio Connect will listen on this network address for HTTPS connections.
Listen = :443
;Path to a PEM encoded TLS certificate file. If the certificate is signed by a certificate authority,
;the certificate file should be the concatenation of the server's certificate followed by the CA's certificate
Certificate =  /path/to/certificate/connect.crt
;Path to a PEM encoded private key file corresponding to the certificate specified with
Key = /path/to/key/connect.key
; Force HTTPS
; https://docs.posit.co/connect/admin/security/#guaranteeing-https
;Permanent = True
MinimumTLS = 1.2</code></pre>
</section>
</section>
<section id="create-the-azure-applications" class="level2">
<h2 class="anchored" data-anchor-id="create-the-azure-applications">Create the Azure applications</h2>
<p>Two separate applications inside Azure need to be created to support authentication on Connect and Workbench (different reply url assertion consumer service url’s).</p>
<ul>
<li><p>Through the marketplace: Manage → enterprise apps → add a new one → search for rstudio</p></li>
<li><p><strong>Rstudio-server-pro SAML authentication</strong> - is what you want for Workbench (refer to <a href="https://docs.posit.co/ide/server-pro/authenticating_users/integrated_providers/azure_ad_saml.html">here</a>)</p></li>
<li><p><strong>Rstudio Connect SAML authentication</strong> - is what you want for Connect (refer to <a href="https://docs.posit.co/ide/server-pro/authenticating_users/integrated_providers/azure_ad_saml.html">here</a>)</p></li>
</ul>
<p>See the <a href="https://learn.microsoft.com/en-us/entra/identity/app-provisioning/customize-application-attributes">Customize user provisioning attribute mappings tutorial</a> in Microsoft’s documentation for more information on adding custom user attributes in Microsoft Entra ID.</p>
<section id="create-the-azure-application-for-workbench" class="level3">
<h3 class="anchored" data-anchor-id="create-the-azure-application-for-workbench">Create the Azure application for Workbench</h3>
<p>Refer to <a href="https://docs.posit.co/ide/server-pro/authenticating_users/integrated_providers/azure_ad_saml.html">here</a></p>
<p>For the URL’s if there is an additional path that Workbench is being served from then it should be added in the <code>&lt;path&gt;</code> field, otherwise that can be omitted. For example, the URL would be&nbsp;<code>https://&lt;RSW-SERVER&gt;/saml/metadataif</code> there isn’t an additional path.&nbsp;</p>
<p>In the&nbsp;Identifier (Entity ID)&nbsp;section, click&nbsp;Add identifier&nbsp;and in the&nbsp;Enter an identifier&nbsp;text box, type a URL using the following pattern: <code>https://&lt;RSW-SERVER&gt;/&lt;PATH&gt;/saml/metadata.</code></p>
<p>In the&nbsp;Reply URL (Assertion Consumer Server URL)&nbsp;section, click&nbsp;Add reply URL&nbsp;and type the URL using the following pattern: <code>https://&lt;RSW-SERVER&gt;/&lt;PATH&gt;/saml/acs.</code></p>
</section>
<section id="configure-workbench-with-saml" class="level3">
<h3 class="anchored" data-anchor-id="configure-workbench-with-saml">Configure Workbench with SAML</h3>
<p>Relevant page in docs: <a href="https://docs.posit.co/ide/server-pro/authenticating_users/saml_sso.html">https://docs.posit.co/ide/server-pro/authenticating_users/saml_sso.html</a> and <a href="https://docs.posit.co/ide/server-pro/authenticating_users/integrated_providers/azure_ad_saml.html">https://docs.posit.co/ide/server-pro/authenticating_users/integrated_providers/azure_ad_saml.html</a></p>
<p>Enable SAML auth:</p>
<pre><code>#/etc/rstudio/rserver.conf
auth-saml=1</code></pre>
<p>Complete the SAML section in the config to match the user attributes from EntraID:</p>
<pre><code>#/etc/rstudio/rserver.conf
auth-saml=1
auth-saml-metadata-url=&lt;federation-metadata-URI&gt;
auth-saml-sp-name-id-format=emailaddress
auth-saml-sp-attribute-username=NameID
auth-saml-sp-base-uri=&lt;RStudio-Server-URI&gt;
auth-saml-idp-post-binding=1</code></pre>
<p>Create the auth profile:</p>
<pre><code>sudo authselect create-profile pwb --base-on=minimal</code></pre>
<p>Edit the /etc/authselect/custom/pwb/nsswitch.conf file and add the pwb entry:</p>
<pre><code>#/etc/authselect/custom/pwb/nsswitch.conf
passwd:     files {if "with-altfiles":altfiles }systemd pwb {exclude if "with-custom-passwd"}
group:      files {if "with-altfiles":altfiles }systemd pwb {exclude if "with-custom-group"}
shadow:     files pwb                                       {exclude if "with-custom-shadow"}</code></pre>
<p>Enable the profile:</p>
<pre><code>authselect select custom/pwb --with-mkhomedir --force</code></pre>
<p>Note: At this time the docs aren’t accurate and say to run <code>sudo authselect select pwb --with-mkhomedir</code> instead of <code>authselect select custom/pwb --with-mkhomedir --force</code></p>
<p>Make sure the odd job service is active:</p>
<pre><code>systemctl enable --now oddjobd.service</code></pre>
<p>Prevent NSCD from caching information:</p>
<pre><code>vi /etc/nscd.conf
enable-cache passwd no
enable-cache group no
sudo systemctl restart nscd
ps -ef | grep nsc</code></pre>
</section>
<section id="configure-scim-provisioning-for-workbench" class="level3">
<h3 class="anchored" data-anchor-id="configure-scim-provisioning-for-workbench">Configure SCIM Provisioning for Workbench</h3>
<p>Relevant page in docs: <a href="https://docs.posit.co/ide/server-pro/user_provisioning/azure.html">https://docs.posit.co/ide/server-pro/user_provisioning/azure.html</a></p>
<p>Complete the user provisioning section in the config to match the user attributes from EntraID (modify the user-provisioning-start-uidas needed, might not matter and can be left off) :</p>
<pre><code>#/etc/rstudio/rserver.conf
user-provisioning-enabled=1
user-provisioning-start-uid=2000</code></pre>
</section>
<section id="configuring-the-scim-provisioning-token-for-workbench" class="level3">
<h3 class="anchored" data-anchor-id="configuring-the-scim-provisioning-token-for-workbench">Configuring the SCIM Provisioning token for Workbench</h3>
<p>Relevant page in docs: <a href="https://docs.posit.co/ide/server-pro/user_provisioning/managing_tokens.html">https://docs.posit.co/ide/server-pro/user_provisioning/managing_tokens.html</a></p>
<p>For SCIM provisioning&nbsp;and the token, I believe you will also need user provisioning turned on. You can do this with:&nbsp;</p>
<pre><code>#rserver.conf
user-provisioning-enabled=1</code></pre>
<p>Create a token:</p>
<pre><code>sudo rstudio-server user-service generate-token "My Token"</code></pre>
<p>Input the token through the Azure profile.</p>
<p>Provision a user by having a user log all the way in to Workbench.</p>
<p>Test it from command line:</p>
<pre><code>/usr/lib/rstudio-server/bin/pamtester --verbose rstudio &lt;user&gt; authenticate acct_mgmt setcred open_session close_session</code></pre>
</section>
<section id="create-the-azure-application-for-connect" class="level3">
<h3 class="anchored" data-anchor-id="create-the-azure-application-for-connect">Create the Azure application for Connect</h3>
<p>Refer to <a href="https://docs.posit.co/ide/server-pro/authenticating_users/integrated_providers/azure_ad_saml.html">here</a></p>
</section>
<section id="configure-connect-with-saml" class="level3">
<h3 class="anchored" data-anchor-id="configure-connect-with-saml">Configure Connect with SAML</h3>
<p>Relevant page in docs: <a href="https://docs.posit.co/connect/admin/authentication/saml-based/entra-id-saml/">https://docs.posit.co/connect/admin/authentication/saml-based/entra-id-saml/</a></p>
<pre><code>#; /etc/rstudio-connect/rstudio-connect.gcfg

[Server]
Address = https://posit.company.com

[Authentication]
Provider = "saml"

[SAML]
IdPMetaDataURL = "https://login.microsoftonline.com/{tenantid}/federationmetadata/2007-06/federationmetadata.xml?appid={appid}"
IdPAttributeProfile = azure
; Enable this for a better user experience, unless
; managing a large number of groups is a concern:
;GroupsAutoProvision = true
; When troubleshooting a SAML problem, more verbose logging
; is produced by uncommenting the following line:
;Logging = true</code></pre>
<p>EntraID limits group membership to 150. If a user is a member of more than 150 groups than their group list will be concatenated, potentially missing important ones that are needed inside Connect.</p>
<p>Register on first login can be disabled with:</p>
<pre><code>#; /etc/rstudio-connect/rstudio-connect.gcfg
[SAML]
RegisterOnFirstLogin = false</code></pre>
<p>In that case, users need to be created via the Connect API: <a href="https://docs.posit.co/connect/api/#post-/v1/users">https://docs.posit.co/connect/api/#post-/v1/users</a></p>
<pre><code>#!/bin/bash

API_KEY="your api key"

DATA='{
  "email": "john_doe@posit.co",
  "first_name": "John",
  "last_name": "Doe",
  "password": "",
  "unique_id": "string",
  "user_must_set_password": false,
  "user_role": "viewer",
  "username": "john_doe"
}'

curl --silent --show-error -L --max-redirs 0 --fail \
    -X POST \
    -H "Authorization: Key ${API_KEY}" \
    --data-raw "${DATA}" \
    "https://connect.example.com/__api__/v1/users"</code></pre>
</section>
</section>
<section id="restart" class="level2">
<h2 class="anchored" data-anchor-id="restart">Restart</h2>
<section id="workbench-1" class="level3">
<h3 class="anchored" data-anchor-id="workbench-1">Workbench</h3>
<pre><code>sudo rstudio-server restart</code></pre>
</section>
<section id="connect-1" class="level3">
<h3 class="anchored" data-anchor-id="connect-1">Connect</h3>
<pre><code>sudo systemctl restart rstudio-connect</code></pre>
</section>
</section>
<section id="assertions" class="level2">
<h2 class="anchored" data-anchor-id="assertions">Assertions</h2>
<p>This image shows the needed assertions on the left, and the assertions associated with a test user on the right. Test user is failing to log into Workbench due to missing assertions. Once the last name and email were added logins were successful.</p>
<p>The list of assertions expected by Connect are documented <a href="https://docs.posit.co/connect/admin/authentication/saml-based/entra-id-saml/#the-azure-profile">here</a>:</p>
<pre><code>; /etc/rstudio-connect/rstudio-connect.gcfg
[SAML]
UniqueIdAttribute = NameID
NameIDFormat = persistent
UsernameAttribute = http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name
FirstNameAttribute = http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname
LastNameAttribute = http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname
EmailAttribute = http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress
GroupsAttribute = http://schemas.microsoft.com/ws/2008/06/identity/claims/groups</code></pre>
</section>
<section id="troubleshooting" class="level2">
<h2 class="anchored" data-anchor-id="troubleshooting">Troubleshooting</h2>
<p>If no useful messages are showing in the Connect or Workbench logs, it could be an issue with the auth provider configuration, URL’s, or network access. Turning on debug logging may help with errors outside of the auth provider configuration.</p>
</section>
<section id="but-what-about-proxies" class="level2">
<h2 class="anchored" data-anchor-id="but-what-about-proxies">But what about proxies?</h2>
<p>Example endpoint for app: whole host name including proxy information scim v2, for example <a href="https://workbench-hostname">https://workbench-hostname</a>&gt;/scim/v2. Example in the case they are running with a proxy at root wb: <a href="https://%3CWorkbench%20URL%3E/%3CPATH%3E/scim/v2">https://<workbench url="">/<path>/scim/v2</path></workbench></a></p>
<section id="workbench-2" class="level3">
<h3 class="anchored" data-anchor-id="workbench-2">Workbench</h3>
<p>Relevant page in docs: <a href="https://docs.posit.co/ide/server-pro/access_and_security/running_with_a_proxy.html">https://docs.posit.co/ide/server-pro/access_and_security/running_with_a_proxy.html</a> and <a href="https://docs.posit.co/ide/server-pro/authenticating_users/saml_sso.html#proxy-considerations">https://docs.posit.co/ide/server-pro/authenticating_users/saml_sso.html#proxy-considerations</a></p>
<p>The reverse proxy should be correctly forwarding the connection and the certificate on the proxy is publicly trusted. Workbench needs to know it’s running on HTTPS however. Generally that’s done by the proxy forwarding the X-Forward-Proto header as https.</p>
<p>We have an example here showing setting the X-Forward-Proto&nbsp;headers, an example without SSL is described as “If the Nginx proxy is using SSL and Workbench has ssl-enabled=0” :&nbsp;<a href="https://docs.posit.co/ide/server-pro/access_and_security/running_with_a_proxy.html#nginx-configuration">https://docs.posit.co/ide/server-pro/access_and_security/running_with_a_proxy.html#nginx-configuration</a> &nbsp;</p>
<p>The documentation default is:&nbsp;</p>
<pre><code>#/etc/rstudio/rserver.conf
www-root-path=/rstudio</code></pre>
<p>However, in the proxy configuration you are actually being hosted on /wb not rstudio so I believe it should look like:&nbsp;</p>
<pre><code>#/etc/rstudio/rserver.conf
www-root-path=/wb</code></pre>
<p>I believe in your URL to your tenant that it will need the /wb prefix as well, IE instead of &lt;https://<workbench url="">/scim/v2&gt; it should be&nbsp;&lt;https://<workbench url="">/<path>/scim/v2&gt;</path></workbench></workbench></p>
<p>The path prefix will need to be propagated throughout, what comes to mind is also the ACS URL configuration in the Enterprise App which is currently pointing to&nbsp;&lt;https://<workbench url="">/saml/acs&gt;but should be &lt;https://<workbench url="">/<path>/saml/acs&gt;</path></workbench></workbench></p>
</section>
<section id="connect-2" class="level3">
<h3 class="anchored" data-anchor-id="connect-2">Connect</h3>
<p>Relevant page in docs: <a href="https://docs.posit.co/connect/admin/proxy/">https://docs.posit.co/connect/admin/proxy/</a> and <a href="https://docs.posit.co/connect/admin/authentication/saml-based/entra-id-saml/index.html#authenticating-with-saml-using-multiple-network-aliases">https://docs.posit.co/connect/admin/authentication/saml-based/entra-id-saml/index.html#authenticating-with-saml-using-multiple-network-aliases</a></p>
<p>Connect needs web sockets to be enabled.</p>
<pre><code># Support proxying of web-socket connections
map $http_upgrade $connection_upgrade {
  default upgrade;
  ''      close;
}</code></pre>
</section>
</section>
<section id="what-happens-when-users-leave-the-organization" class="level2">
<h2 class="anchored" data-anchor-id="what-happens-when-users-leave-the-organization">What happens when users leave the organization?</h2>
<p>When users leave the organization, or removed from the application, than their account will be locked. This is the advantage of configuring it with SCIM / integrating directly with the authentication provider. Any home directories, deployed content, etc will remain on the server and can be cleaned up using any internal policies.</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/saml-entraid-posit-team.html</guid>
  <pubDate>Wed, 07 May 2025 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Validation</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/validation.html</link>
  <description><![CDATA[ 






<section id="frame-of-mind" class="level2">
<h2 class="anchored" data-anchor-id="frame-of-mind">Frame of mind</h2>
<p>My colleagues recommendation while reading these resources:</p>
<blockquote class="blockquote">
<p>Put yourself in a mental model that you are at a certain company and you want to build a whole new IT system that’s addressing certain unmet needs. Due to the nature of the use case you need to use this CSV (Computer System Validation) approach. Your goal is to meet user requirements while keeping risks under control.</p>
</blockquote>
<blockquote class="blockquote">
<p>As an exercise, think about can you come up with some guiding principles on how to set up Posit Team to make it GXP compliant. For example, what happens if deploy a shiny app and what part of processes are happening there when it comes to GXP, CSV, and such. The icing on the cake is how can we change the Connect configuration to make it compliant.</p>
</blockquote>
</section>
<section id="definitions" class="level2">
<h2 class="anchored" data-anchor-id="definitions">Definitions</h2>
<p><strong>DQ</strong> Design Qualification - a design is assessed and documented to make sure it meets user requirements and regulatory standards (typically doesn’t apply to Posit software)</p>
<p><strong>IQ</strong> Installation Qualification - verifies that equipment and systems are installed correctly according to the manufacturers instructions</p>
<p><strong>OQ</strong> Operational Qualification - verifies that a system performs as required over time, typically requires implementation of control systems, alarms, and testing of functions under different conditions</p>
<p><strong>PQ</strong> Performance Qualification - verifies the system performance while operating under normal operating conditions, typically involves real production environments or batches and monitors quality outcomes</p>
<p><strong>CSV</strong> Computer System Validation is a form of software validation to ensure that a regulated computerized system is as safe, secure, and reliable as paper based records.</p>
<p><strong>URD/URS</strong> User Requirements Document or User Requirements Specification specifies what the user expects the software to be able to do.</p>
<p><strong>GXP</strong> A set of principles that govern the use of various systems and recommend the implementation of strict controls</p>
<p><strong>GMP</strong> Good Manufacturing Practices, guidelines that govern the manufacture and sale of food, beverages, cosmetics, pharmaceuticals, dietary supplements, and medical devices</p>
<p><strong>SCE</strong> Statistical Compute Environment - typically computerized systems where late-stage clinical development workloads run</p>
<p><strong>SOP</strong> Standard Operating Procedure is a set of repeatable steps and instructions that an organization can follow in order to achieve a common activity.</p>
<p><strong>Production</strong> Day to day system for productive use. Change control for system-wide changes is in place.</p>
<p><strong>Development</strong> Small replica of the production system. No change control. Used for IT internal testing of new features/changes.</p>
<p><strong>Test/Staging/QA</strong> Small replica of the production system. Fully change controlled. Used to allow for business testing before rolling out the change to Production.</p>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<section id="start-here" class="level3">
<h3 class="anchored" data-anchor-id="start-here">Start here</h3>
<p>Internal to Posit resources:</p>
<ul>
<li><p>Computerized system validation - google this - Michael uploaded in the pharma task force github a summarized csv - <a href="https://github.com/rstudio/pharma-taskforce/blob/main/doc/Overview/CSV.md" class="uri">https://github.com/rstudio/pharma-taskforce/blob/main/doc/Overview/CSV.md</a></p></li>
<li><p>Michael had a post in the Life science and healthcare channel - posted pdf document - <a href="https://positpbc.slack.com/archives/CQ55EG3U7/p1742983108413489" class="uri">https://positpbc.slack.com/archives/CQ55EG3U7/p1742983108413489</a></p></li>
<li><p>This post from MichaelM is useful about validated environments: <a href="https://positpbc.slack.com/archives/C2P7MTJKE/p1746448154247119?thread_ts=1746118620.637929&amp;cid=C2P7MTJKE" class="uri">https://positpbc.slack.com/archives/C2P7MTJKE/p1746448154247119?thread_ts=1746118620.637929&amp;cid=C2P7MTJKE</a></p></li>
<li><p>Another internal post about the limitations of renv - <a href="https://positpbc.slack.com/archives/C2P7MTJKE/p1746653854586919?thread_ts=1746118620.637929&amp;cid=C2P7MTJKE" class="uri">https://positpbc.slack.com/archives/C2P7MTJKE/p1746653854586919?thread_ts=1746118620.637929&amp;cid=C2P7MTJKE</a></p></li>
</ul>
</section>
<section id="as-a-vendor---disclaimer" class="level3">
<h3 class="anchored" data-anchor-id="as-a-vendor---disclaimer">As a vendor - disclaimer</h3>
<p>We as posit are not in the business of validating packages. We can talk about how to do it high level but its up to them to build such a process or point them at Atorus OpenVal (which doesn’t use Package Manager), or Jumping Rivers Litmus system.</p>
</section>
<section id="now-add-some-more-documents" class="level3">
<h3 class="anchored" data-anchor-id="now-add-some-more-documents">Now add some more documents</h3>
<p>Phil resources: (See Trevor chat)</p>
<p>Posit pro products (still says Rstudio everything): <a href="https://posit.co/wp-content/uploads/2024/11/rstudio_compliance_validation.pdf?_gl=1*1nenc0g*_ga*MTI1ODM3MDExLjE3MzY2MTk0MTQ.*_ga_2C0WZ1JHG0*MTc0NjIwNDQyOC4zNjQuMC4xNzQ2MjA0NDM1LjAuMC4w" class="uri">https://posit.co/wp-content/uploads/2024/11/rstudio_compliance_validation.pdf?_gl=1*1nenc0g*_ga*MTI1ODM3MDExLjE3MzY2MTk0MTQ.*_ga_2C0WZ1JHG0*MTc0NjIwNDQyOC4zNjQuMC4xNzQ2MjA0NDM1LjAuMC4w</a></p>
<p>R validation: <a href="https://www.r-project.org/doc/R-FDA.pdf" class="uri">https://www.r-project.org/doc/R-FDA.pdf</a></p>
<p>Tidyverse, tidymodels: <a href="https://posit.co/wp-content/uploads/2024/11/validation-tidy.pdf?_gl=1*1rog1io*_ga*MTI1ODM3MDExLjE3MzY2MTk0MTQ.*_ga_2C0WZ1JHG0*MTc0NjIwNDQyOC4zNjQuMC4xNzQ2MjA0NDI4LjAuMC4w" class="uri">https://posit.co/wp-content/uploads/2024/11/validation-tidy.pdf?_gl=1*1rog1io*_ga*MTI1ODM3MDExLjE3MzY2MTk0MTQ.*_ga_2C0WZ1JHG0*MTc0NjIwNDQyOC4zNjQuMC4xNzQ2MjA0NDI4LjAuMC4w</a></p>
<p>Shiny and rmarkdown:<a href="https://posit.co/wp-content/uploads/2024/11/validation-shiny-rmd.pdf?_gl=1*1nenc0g*_ga*MTI1ODM3MDExLjE3MzY2MTk0MTQ.*_ga_2C0WZ1JHG0*MTc0NjIwNDQyOC4zNjQuMC4xNzQ2MjA0NDM1LjAuMC4w" class="uri">https://posit.co/wp-content/uploads/2024/11/validation-shiny-rmd.pdf?_gl=1*1nenc0g*_ga*MTI1ODM3MDExLjE3MzY2MTk0MTQ.*_ga_2C0WZ1JHG0*MTc0NjIwNDQyOC4zNjQuMC4xNzQ2MjA0NDM1LjAuMC4w</a></p>
</section>
<section id="finally-lets-check-out-the-stories-on-the-posit-blog" class="level3">
<h3 class="anchored" data-anchor-id="finally-lets-check-out-the-stories-on-the-posit-blog">Finally lets check out the stories on the Posit blog</h3>
<p><a href="https://posit.co/blog/publishing-a-shiny-app-in-r-with-clinical-trial-data-to-posit-connect/">Deploying a Shiny App in R using clinical trial data with Posit Connect</a></p>
<p><a href="https://posit.co/blog/team-101-posit-workbench/">Securing Workbench for Clinical Workflows, with JnJ</a></p>
<p><a href="https://posit.co/blog/jnj-posit-live-event-march-2025-qa/">Johnson &amp; Johnson x Posit Live Event March 2025 Q&amp;A</a></p>
<p><a href="https://posit.co/blog/roche-posit-live-event-sept-2024-qa/">Roche x Posit Live Event Sept 2024 Q&amp;A</a></p>
<p><a href="https://posit.co/blog/roches-first-end-to-end-r-journey-to-submission/">Roche’s end-to-end R submission for a new drug application</a></p>
<p><a href="https://posit.co/blog/webr-fda-pilot/">How pharma is pioneering WebAssembly with webR &amp; Shiny for FDA clinical trial submissions</a></p>
</section>
<section id="tools-that-will-help-make-this-easier" class="level3">
<h3 class="anchored" data-anchor-id="tools-that-will-help-make-this-easier">Tools that will help make this easier</h3>
<ul>
<li><a href="https://posit.co/products/enterprise/package-manager/">Posit Package Manager</a></li>
<li>R package <a href="https://www.jumpingrivers.com/blog/should-i-use-your-r-pkg/">litmus</a> by Jumping Rivers and service</li>
<li>R package <a href="https://sonatype-nexus-community.github.io/oysteR/">oysteR</a> by Sonatype Nexus for checking package vulnerabilities against the OSS index</li>
<li>R package <a href="https://pak.r-lib.org/">pak</a></li>
<li>R package <a href="https://pharmar.github.io/riskmetric/">riskmetric</a></li>
<li><a href="https://www.atorusresearch.com/openval/">Atorus OpenVal</a></li>
<li><a href="https://insightsengineering.github.io/teal.logger/latest-tag/index.html">teal.logger</a> for logging actions taken inside a shiny app</li>
</ul>
</section>
</section>
<section id="take-aways" class="level2">
<h2 class="anchored" data-anchor-id="take-aways">Take aways</h2>
<section id="what-has-worked-in-the-past" class="level3">
<h3 class="anchored" data-anchor-id="what-has-worked-in-the-past">What has worked in the past?</h3>
<p>There has been one successfully submission of a shiny app to the FDA and it was stripped down so that there weren’t any interactive elements and it ran via WASM. While aditional monitoring and logging is really exciting, and I hope is something we can see in the future, at the moment it may be worth being grounded that what a validated output may look like will be more like a compendium of static documents that are navigated via a shiny app rather than a true interactive application.</p>
</section>
<section id="what-are-the-guiding-principles" class="level3">
<h3 class="anchored" data-anchor-id="what-are-the-guiding-principles">What are the guiding principles?</h3>
<p>They key guiding principle is to understand what your use case is and where risks could be introduced.</p>
<p>Common risk areas:</p>
<ul>
<li>Was it installed correctly?</li>
<li>When changes are made, IE upgrades to packages or software, how would any newly introduced risks be detected?</li>
<li>Is the way users will use the system understood and can be turned into tests in order to validate the system?</li>
<li>How is data or code being handled so that things like patient data are handled securely?</li>
</ul>
<p>Whenever there is a change to the system it needs to through either a full validation or mini-validation</p>
</section>
<section id="developing-a-sop" class="level3">
<h3 class="anchored" data-anchor-id="developing-a-sop">Developing a SOP</h3>
<ul>
<li>New system is identified for CSV based on a risk assessment (collaboration between QA, Business and IT)</li>
<li>URS (USer Requirement Specifications) are drafted (typically in the form of user stories) (business)</li>
<li>Design specifications are produced where technical design and identified business needs are aligned (IT)</li>
<li>The Validation plan is created that documents the overall solution and how the system will be validated (IT)</li>
<li></li>
</ul>
<section id="managing-installations" class="level4">
<h4 class="anchored" data-anchor-id="managing-installations">Managing installations</h4>
<p>The name of the game here is transparency, security, and reproducability. Whether using docker, singularity, k8s, slurm, a load balanced servers, or a single server it doesn’t really matter as long as all steps are followed and documented.</p>
</section>
<section id="upgrades" class="level4">
<h4 class="anchored" data-anchor-id="upgrades">Upgrades</h4>
<p>When upgrade, security risks with old OS, then need to understand where the risks are and have tests and re-validate to make sure same results before and after the upgrade. Qualification documentation will allow you to replicate the system the same as it was back then when you are asked years later to re-do some piece of the data analysis from a health authority. Your documentation needs to be in a state where you can replicate it. Money at that point is no object because the risk of losing a submissions is monumental.</p>
</section>
<section id="managing-packages" class="level4">
<h4 class="anchored" data-anchor-id="managing-packages">Managing packages</h4>
<p>Sophisticated math libraries for linear algebra like BLAS then those things are so performance optimized that they use different code for diff OS’s. You could get different results.</p>
<p>Need a process that gives assurance that a package is ready for use - use atorus openval, preinstall packages and test them in their respective locations, or if you allow the users to allow packages then every user is responsible for testing, validating their stuff each and every time.</p>
<p>Strong misconception - that technology can solve all the problems. People will always try to find loopholes, no matter how clever you configure it. That’s the important thing with business processes. If they follow the processes then they will be compliant, otherwise they will be out of compliance and there is nothing IT can do about it.</p>
<p>Docker images are acting as a site library in a way - installing packages into a direct instance where deploying packages. Could have been an EC2 just the same. Using a site library. Pre-install all the needed packages and dependencies, run testing on those packages and document that.</p>
<p>current is tested-r package repositories that has meta data - intentionally called tested not validated because it is all automated but wouldn’t recommend all to do because some of the packages have a higher risk, if serious about risk mitigation you would want to a different level of testing for high risk packages than low risk packages. In a real world not possible to automate everything. A human being still needs to accept those.</p>
<p>Litmus is 30+ different risk numbers weighted together</p>
<p>Testing needs to be done every time you install the package with that given version. Any change needs to be documented. Need to do an impact analysis, will inform how many other things need to be tested again. Site library with 100 packages and install 1 more then need to asses how other packages will be impacted, do we need to upgrade the other packages, test and so on and so forth.</p>
<p>When user installs would need to rerun test suite, produce suite of documentation, if allowed to install directly otherwise site library is a huge pro because do the tests and documentation once for all users.</p>
<p>Code is a change to the system also, need to justify the changes too. Critical analyses sometimes also have two different teams that are segregated and do the same analysis independently to make sure risk of making wrong decision is mitigated - double programming.</p>
<p>This is leaning on the cautious side of things.</p>
<p>Need repository that you can rely on in 3-5 maybe 10 years, if trust local package manager more than cran mirrors then useful for that purpose. meta data is cosmetics.</p>
<section id="why-not-renv-or-just-installing-packages-into-user-home-directories" class="level5">
<h5 class="anchored" data-anchor-id="why-not-renv-or-just-installing-packages-into-user-home-directories">Why not renv? Or just installing packages into user home directories?</h5>
<p><a href="https://rstudio.github.io/renv">renv</a> is a very common and useful R package that helps users maintain project specific package environments. It is very similar in function to Python <code>venv</code> environments.</p>
<p><code>renv</code> gives you a snapshot in time for your project for which packages you had and what their versions were. This is very useful and an important part of reproduceability.</p>
<p>Unfortunately using <code>renv</code> on its own without other pieces for how packages are installaed can lead to breaking qualification requirements. Re-downloading packages would introduce risk. Every time a package is downloaded that constitutes a change in the system and needs to go through a validation process to ensure that no new risks have been introduced. If that is done once and periodically after, to install packages in a site library, that can be a manageable level of effort. But to do that for every user every time they install a package would be an unreasonable amount of effort.</p>
<p>renv is the answer for knowledge of what packges you used, some level of reproduceability, but if you think about what learned with the CSV stuff. Any package installation on the system constitutes a change, any change needs to be documented tested and approved.</p>
</section>
</section>
</section>
<section id="shiny-application-submissions-to-the-fda" class="level3">
<h3 class="anchored" data-anchor-id="shiny-application-submissions-to-the-fda">Shiny application submissions to the FDA</h3>
<p>The first every shiny submission was done in such a way the FDA was only accepting the app once the team had removed all the interactive elements so it was more like a clickable document in the end.</p>
</section>
<section id="workbench-config-settings" class="level3">
<h3 class="anchored" data-anchor-id="workbench-config-settings">Workbench config settings</h3>
</section>
<section id="connect-config-settings" class="level3">
<h3 class="anchored" data-anchor-id="connect-config-settings">Connect config settings</h3>
</section>
<section id="package-manager-config-settings" class="level3">
<h3 class="anchored" data-anchor-id="package-manager-config-settings">Package Manager config settings</h3>
</section>
</section>
<section id="but-what-about-python" class="level2">
<h2 class="anchored" data-anchor-id="but-what-about-python">But what about Python?</h2>
<ul>
<li><code>pak</code> -&gt; <code>uv</code></li>
<li><code>riskmetric</code> -&gt; no equivalent today</li>
<li><code>renv</code> -&gt; <code>venv</code> (note taken that this is useful for recording package versions, a risk if used to install packages)</li>
<li>Package Manager -&gt; Package Manager</li>
</ul>
<p>I’ve been eyeing:</p>
<ol type="1">
<li><a href="https://pypi.org/project/pip-audit/">pip-audit</a> (uses the data from <a href="https://github.com/pypa/advisory-database">advisory database</a>)</li>
<li>googles <a href="https://github.com/google/osv-scanner">osv-scanner</a> (that uses the data from <a href="http://osv.dev/">osv.dev</a>)</li>
</ol>
<p>But those are just very surface level tools that check if a vulnerability has been detected</p>


</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/validation.html</guid>
  <pubDate>Mon, 05 May 2025 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Configuring Jupyter for use with Posit Workbench</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/Configuring Jupyter.html</link>
  <description><![CDATA[ 






<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>Configuring Jupyter to work on Posit Workbench is very doable, but there are a couple gotchas. Hopefully these steps are useful!</p>
</section>
<section id="install-steps" class="level2">
<h2 class="anchored" data-anchor-id="install-steps">Install steps</h2>
<p>Try following these steps for installing jupyter: <a href="https://docs.posit.co/ide/server-pro/integration/jupyter-standalone.html" class="uri">https://docs.posit.co/ide/server-pro/integration/jupyter-standalone.html</a></p>
<p>This may look like:</p>
<pre><code>## Set variables 
export JUPYTER_PYTHON_VERSION=3.12.4
export JUPYTERLAB_VERSION=4.2.5
export WORKBENCH_JUPYTERLAB_VERSION=1.0

## Install Jupyter 
sudo /opt/python/"${JUPYTER_PYTHON_VERSION}"/bin/pip install jupyterlab=="${JUPYTERLAB_VERSION}" notebook pwb_jupyterlab~="${WORKBENCH_JUPYTERLAB_VERSION}"

## Set the jupyter.conf to the jupyter-exe location
# jupyter.conf
cat &gt; /etc/rstudio/jupyter.conf &lt;&lt;EOF
jupyter-exe=/opt/python/${JUPYTER_PYTHON_VERSION}/bin/jupyter
labs-enabled=1
notebooks-enabled=1
default-session-cluster=Local

EOF</code></pre>
<p>Jupyter ports for HA: FromPort=8888,ToPort=8898</p>
</section>
<section id="troubleshooting" class="level2">
<h2 class="anchored" data-anchor-id="troubleshooting">Troubleshooting</h2>
<p>Uninstall the current version of Jupyter Notebook: <code>pip uninstall jupyter</code></p>
<p>Restart RStudio Server: Restart the RStudio Server to apply the changes:</p>
<p><code>sudo rstudio-server restart</code></p>
<p>Restart Launcher: If you are using the Launcher, restart it as well:</p>
<p><code>sudo rstudio-launcher restart</code></p>
<p>Can you also try to start a notebook manually by running the following from the Linux shell? <code>/opt/python/3.9.14/bin/jupyter notebook</code>. Does that complete as an unprivileged user? What about with sudo? <code>sudo /opt/python/3.9.14/bin/jupyter notebook</code></p>
<p>Similarly, <code>sudo /opt/python/3.9.14/bin/jupyter lab</code></p>
<p>Umask in STIG systems is typically set to <code>0077</code> (on rhel9) which will make the libraries installed under the python version unable to be used by normal users. Set umask to <code>0022</code> and then reinstall python and jupyter to fix this. Alternatively could try to fix the file permissions with the -exec flag and chmod, for example with <code>chmod -R o+rx /opt/python/&lt;version&gt;</code> which would set the permissions to 755 or <code>chmod -R og+rX /opt/python/&lt;version&gt;</code> which gives read permissions to all files but only execute permissions to those that already had execute permissions (typically the owner).</p>
<p>Uninstall Python: <a href="https://docs.posit.co/resources/install-python.html#uninstall" class="uri">https://docs.posit.co/resources/install-python.html#uninstall</a></p>
<p>Re-install Python: <a href="https://docs.posit.co/resources/install-python.html#install-required-dependencies" class="uri">https://docs.posit.co/resources/install-python.html#install-required-dependencies</a></p>
<p>Add Python to the path:</p>
<pre><code># add this to your .bashrc
export PATH=/opt/python/3.11.9/bin:$PATH</code></pre>
<p>Manage kernels: <a href="https://docs.posit.co/ide/server-pro/user/jupyter-lab/guide/jupyter-kernel-management.html" class="uri">https://docs.posit.co/ide/server-pro/user/jupyter-lab/guide/jupyter-kernel-management.html</a></p>
<p>Users can register their own virtual kernel with the ipykernel package running the command (within an activated environment on the CLI/terminal):</p>
<pre><code>python -m ipykernel install --user --name short-name --display-name "Long Name"</code></pre>
<p>Upon launching a new jupyterlab or VS Code session this environment can be selected from this menu.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>python</category>
  <guid>https://questionable.quarto.pub/blog/work/Configuring Jupyter.html</guid>
  <pubDate>Thu, 01 May 2025 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Monitoring Posit Team</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/Monitoring Posit Team.html</link>
  <description><![CDATA[ 






<section id="software-monitoring" class="level2">
<h2 class="anchored" data-anchor-id="software-monitoring">Software Monitoring</h2>
<p>Each of our products has their own method for monitoring. In addition to each individual monitoring method, Chronicle exists to pull that same information but aggregate it for customers. IMO it’s particularly useful for customers that have multiple environments that want their own single report to see the stuff they care about.</p>
<p><strong>Workbench</strong></p>
<ul>
<li>Metrics endpoint (Prometheus) that can be pulled into other systems: <a href="https://docs.posit.co/ide/server-pro/auditing_and_monitoring/prometheus_metrics.html">https://docs.posit.co/ide/server-pro/auditing_and_monitoring/prometheus_metrics.html</a></li>
<li>API for more bespoke metrics (new): <a href="https://docs.posit.co/ide/server-pro/workbench_api/workbench_api.html">https://docs.posit.co/ide/server-pro/workbench_api/workbench_api.html</a></li>
<li>Build-in admin dashboard shows metrics around sessions (needs to be enabled): <a href="https://docs.posit.co/ide/server-pro/server_management/administrative_dashboard.html">https://docs.posit.co/ide/server-pro/server_management/administrative_dashboard.html</a></li>
</ul>
<p><strong>Connect</strong></p>
<ul>
<li>Metrics endpoint (Prometheus) that can be pulled into other systems: <a href="https://docs.posit.co/connect/admin/operational-metrics/index.html">https://docs.posit.co/connect/admin/operational-metrics/index.html</a></li>
<li>API for more bespoke metrics: <a href="https://docs.posit.co/connect/api/">https://docs.posit.co/connect/api/</a> and <a href="https://docs.posit.co/connect/cookbook/">https://docs.posit.co/connect/cookbook/</a></li>
<li>Built-in admin dashboard shows metrics around resource consumption, scheduled jobs, etc</li>
</ul>
<p><strong>Package Manager</strong></p>
<ul>
<li>Metrics endpoint (Prometheus) that can be pulled into other systems: <a href="https://docs.posit.co/rspm/admin/operational-metrics.html">https://docs.posit.co/rspm/admin/operational-metrics.html</a></li>
<li>API for more bespoke metrics: <a href="https://docs.posit.co/rspm/admin/admin-cli.html#cli-remote-setup">https://docs.posit.co/rspm/admin/admin-cli.html#cli-remote-setup</a></li>
<li>Configure space alerts: <a href="https://docs.posit.co/rspm/admin/alerts.html">https://docs.posit.co/rspm/admin/alerts.html</a></li>
<li>Built-in admin dashboard shows metrics around packages being downloaded</li>
</ul>
<p>Chronicle is still very early in development and customers have to build their own reports. Typically that looks like installing Chronicle on the Connect server and then publishing a quarto report that they made to Connect.There are a bunch of metrics reporting software that can take a stream of data and display it. You might hear datadog, splunk, grafana mentioned as the actual visualization tool being used in organizations.</p>
<p>Reach out to Posit to learn more about Chronicle and how to install it.</p>
</section>
<section id="application-monitoring" class="level2">
<h2 class="anchored" data-anchor-id="application-monitoring">Application Monitoring</h2>
<p>Information like who accessed the platform, who accessed each app can be gotten with the Connect API, for example with this cookbook recipe: <a href="https://docs.posit.co/connect/cookbook/metrics/viewing-content-usage-information/" class="uri">https://docs.posit.co/connect/cookbook/metrics/viewing-content-usage-information/</a></p>
<p>Getting what someone did inside of the application is harder. I’ve seen customers use <a href="https://shiny.posit.co/r/articles/build/google-analytics/">google analytics</a> for this (<a href="https://quarto.org/docs/websites/website-tools.html#google-analytics">example for quarto</a>). I’ve been really interested in exploring packages like <a href="https://appsilon.github.io/shiny.telemetry/">shiny.telemetry</a> by Appsilon for digging into this data also (it uses an external database to store this data).</p>
<p>Alternativelyl a simple way to add user information is to simply add print statements through the code so it will print choices to the log. The log files can be accessed over this endpoint with the Connect API: <a href="https://docs.posit.co/connect/api/#get-/v1/content/-guid-/jobs/-key-/download" class="uri">https://docs.posit.co/connect/api/#get-/v1/content/-guid-/jobs/-key-/download</a></p>
<p>Admin logs on Connect are restricted to the admin user: <a href="https://docs.posit.co/connect/admin/auditing/index.html#audit-log-output" class="uri">https://docs.posit.co/connect/admin/auditing/index.html#audit-log-output</a></p>
<p>By default, audited events are only recorded in the database. Admin users are able to view audit entries in the dashboard: <a href="https://docs.posit.co/connect/api/#get-/v1/audit_logs" class="uri">https://docs.posit.co/connect/api/#get-/v1/audit_logs</a></p>


</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/Monitoring Posit Team.html</guid>
  <pubDate>Wed, 30 Apr 2025 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Mounting drives on a server for Posit Team</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/mounting-drives-server.html</link>
  <description><![CDATA[ 






<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>Workbench and Connect will work with the underlying linux system to make resources available to users. This includes things like mounted drives.</p>
<p>Neither Workbench nor Connect natively mount drives, this isn’t done through a config. Drive mounts are done through linux operations.</p>
<section id="nfs" class="level3">
<h3 class="anchored" data-anchor-id="nfs">NFS</h3>
<p>Typically we see this looking like</p>
<ol type="1">
<li>Create a local directory</li>
<li><code>mount -t nfs -o optionshere sharehost:sharepath</code></li>
</ol>
<p>The important bit would be to set permissions with chown, chmod, and maybe facl for either the rstudio-connect user, or the alternate user they choose, for example something like:</p>
<pre><code>sudo chown user:group /folder
chmod 764 /folder</code></pre>
<p>Change the code (764) for what the folder is being locked down to in order to prevent other users from being able to access it. Those lines will make that user the owner of the folder, and then chmod 764 should give only the owner access. But I recommend referencing your linux team.</p>
<p>It can also involve <a href="https://www.baeldung.com/linux/network-drive-etc-fstab">fstab</a> or <a href="https://help.ubuntu.com/community/Autofs">AutoFS</a>.</p>
<p>Some specific situations may have some complexity: specific formats, cloud situations, or verifying NFS export options, but in general the mounting process is much simpler than installing the posit products and configuring them and is the same as what would be done on any linux server.</p>
<p>If running in kubernetes then the mount needs to be added to each job pod and it gets more complicated.</p>
</section>
</section>
<section id="smbcifs" class="level2">
<h2 class="anchored" data-anchor-id="smbcifs">SMB/CIFS</h2>
<p>For SMB/CIFS this could look like mounting via PAM, discussed here: <a href="https://support.posit.co/hc/en-us/articles/360044190234-How-to-mount-a-Windows-SMB-CIFS-share-via-PAM" class="uri">https://support.posit.co/hc/en-us/articles/360044190234-How-to-mount-a-Windows-SMB-CIFS-share-via-PAM</a></p>
<p>Alternatively, the SMB/CIFS could be <a href="https://www.techrepublic.com/article/how-to-permanently-mount-a-windows-share-on-linux/">mounted directly</a> with <code>cifs-utils</code> using a service account if traceability or access controls aren’t needed with <code>sudo mount -t cifs -o username=&lt;user&gt;,password=&lt;password&gt; //&lt;server&gt;/&lt;share&gt; /mnt/&lt;mountpoint&gt;</code>.</p>
<p><a href="https://infohub.delltechnologies.com/en-us/l/dell-unity-nas-capabilities/multiprotocol-17/">Multiprotocol NAS</a> is another option for a more enterprise solution.</p>
</section>
<section id="copying-a-project-from-one-users-home-directory-to-another" class="level2">
<h2 class="anchored" data-anchor-id="copying-a-project-from-one-users-home-directory-to-another">Copying a project from one users home directory to another</h2>
<p>Reference: <a href="https://support.posit.co/hc/en-us/articles/12959116352663-Transferring-project-ownership-in-Posit-Workbench" class="uri">https://support.posit.co/hc/en-us/articles/12959116352663-Transferring-project-ownership-in-Posit-Workbench</a></p>
<p>This will recursively copy the project from user1’s home directory to user2’s home directory</p>
<p>`sudo cp -R /home/user1/project /home/user2/``</p>
<p>And this will change the owner recursively to user2</p>
<p><code>sudo chown -R user2:user2 /home/user2/project</code></p>
</section>
<section id="permissions" class="level2">
<h2 class="anchored" data-anchor-id="permissions">Permissions</h2>
<p>When mounting on the server it will need the appropriate permissions so that users are able to access the contents of the drive.</p>
<p>For example for content running on Posit Connect the rstudio-connect user will need access to the drive, for example via <code>chmod 644</code>. Alternatively the drive could be mapped so that an alternate linux user has access and a user with admin access through the Connect UI can set the runAs user to the selected linux user. This will provide more security around protecting the files that are mounted.</p>
</section>
<section id="logging-user-actions" class="level2">
<h2 class="anchored" data-anchor-id="logging-user-actions">Logging user actions</h2>
<p>For customers wanting to log user actions on NFS shares that is done through linux admin utilities, like <code>auditd</code>.</p>
<p>Alternatively kerberized NFS shares can be used for centralized logging/auditing but is significantly more admin overhead.</p>
</section>
<section id="failures" class="level2">
<h2 class="anchored" data-anchor-id="failures">Failures</h2>
<section id="checking-mounted-drives-and-noexec-option" class="level3">
<h3 class="anchored" data-anchor-id="checking-mounted-drives-and-noexec-option">Checking mounted drives and noexec option</h3>
<p>Check if <code>/home</code> on the server, or is it a network mount (NFS or CIFS). In NFS, for example, there can be the use of access control lists which can impact permissions. Similarly, when working in a system that has a mounted share drive then would want to check that libraries are being written to that share so you get persistence. Typically this means writing to inside the home directory. Check mounted drives with: <code>df -h</code></p>
<p>Check <code>/etc/fstab</code> to see if the home directories are mounted with <code>noexec</code></p>
<p>For example, this shows that the home directories were mounted with <code>noexec</code>: <code>/dev/mapper/rhel-home  /home  xfs    defaults,noexec,nosuid,nodev   0 0</code></p>
<p>This resulted in this error message:</p>
<pre><code>library(stringi)Error: package or namespace load failed for 'stringi' in dyn.load(file, DLLpath = DLLpath, ...):
unable to load shared object '/home/username/x86_64-pc-linux-gnu-library/4.3/stringi/libs/stringi.so':
  /home/username/R/x86_64-pc-linux-gnu-library/4.3/stringi/libs/stringi.so: failed to map segment from shared object</code></pre>
</section>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<p>A linux based forum like <a href="https://serverfault.com/">serverfault</a> can be useful for getting more answers for linux topics like this.</p>
<ul>
<li><a href="https://www.golinuxcloud.com/linux-mount-nfs/" class="uri">https://www.golinuxcloud.com/linux-mount-nfs/</a></li>
<li><a href="https://planetscale.com/blog/io-devices-and-latency#storage-in-the-cloud" class="uri">https://planetscale.com/blog/io-devices-and-latency#storage-in-the-cloud</a></li>
<li><a href="https://solutions.posit.co/admin-training/courses/workbench/04_datasources.html#smbcifs" class="uri">https://solutions.posit.co/admin-training/courses/workbench/04_datasources.html#smbcifs</a></li>
<li>Really interesting community post with script for automounting windows shares: <a href="https://community.rstudio.com/t/active-directory-ad-permissions-and-file-share-mounting-for-rsp/5427/5" class="uri">https://community.rstudio.com/t/active-directory-ad-permissions-and-file-share-mounting-for-rsp/5427/5</a></li>
<li>Example for mounting a drive: <a href="https://superuser.com/questions/134734/how-to-mount-a-drive-from-terminal-in-ubuntu" class="uri">https://superuser.com/questions/134734/how-to-mount-a-drive-from-terminal-in-ubuntu</a></li>
</ul>


</section>

 ]]></description>
  <category>code</category>
  <category>data</category>
  <guid>https://questionable.quarto.pub/blog/work/mounting-drives-server.html</guid>
  <pubDate>Tue, 29 Apr 2025 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Setting the R package repository on Posit Workbench</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/r-repository-settings-workbench.html</link>
  <description><![CDATA[ 






<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>The repository for packages being used for installation by users is often important to configure. When using something like Package Manager you’ll want users to install packages from there, rather than the broader internet.</p>
</section>
<section id="at-a-glance" class="level2">
<h2 class="anchored" data-anchor-id="at-a-glance">At a glance</h2>
<p>The best pattern is to configure the repository across R sessions using R config options, not RStudio configs. A shared site library can be created (leveraging <code>Rprofile.site</code> and <code>Renviron.site</code> for example) or using <code>renv</code> with a shared <code>renv</code> package cache (maintaining reproduceability through the <code>renv.lock</code> file).</p>
<p>The <code>Renviron.site</code> would override the <code>Rprofile.site</code> setting and therefore may be more robust.</p>
<section id="renviron.site" class="level3">
<h3 class="anchored" data-anchor-id="renviron.site">Renviron.site</h3>
<p>Referencing: <a href="https://github.com/sol-eng/singularity-rstudio/blob/main/data/workbench/scripts/run.R" class="uri">https://github.com/sol-eng/singularity-rstudio/blob/main/data/workbench/scripts/run.R</a></p>
<p>Create a <code>Renviron.site</code> file and define:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/opt/R/Some-R-Version/lib/R/etc/Renviron.site</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" data-filename="/opt/R/Some-R-Version/lib/R/etc/Renviron.site" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">RENV_PATHS_PREFIX_AUTO</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TRUE</span>
<span id="cb1-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">RENV_PATHS_CACHE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/scratch/renv</span>
<span id="cb1-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">R_LIBS_SITE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>R_LIBS_SITE=<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${R_LIBS_SITE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/usr/local/lib/R/site-library:/usr/local/lib/R/library:/usr/lib64/R/library:/usr/share/R/library'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
</div>
</section>
<section id="rprofile.site" class="level3">
<h3 class="anchored" data-anchor-id="rprofile.site">.Rprofile.site</h3>
<p>Set <code>.libPaths()</code> in <code>.Rprofile.site</code>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/opt/R/Some-R-Version/lib/R/etc/Rprofile.site</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" data-filename="/opt/R/Some-R-Version/lib/R/etc/Rprofile.site" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">options</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">repos</span> = c<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CRAN</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://packagemanager.posit.co/all/latest"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">))</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interactive()</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb2-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">options</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">width</span> = 120<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.info()</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sysname"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]]</span> == <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Windows"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb2-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Sys.setenv</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RENV_DOWNLOAD_METHOD</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"curl"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb2-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"folder"</span> %in% tolower<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">list.files</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:/"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)))</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb2-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">!</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rlib"</span> %in% list.files<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:/username/"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">))</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb2-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">print</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Creating Rlib folder"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb2-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">dir.create</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:/username/Rlib"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">,mode</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0777"</span>,recursive = T<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb2-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="cb2-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"\033[0;32;1mSetting local user lib\033[0m\n"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb2-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.libPaths</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">c</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:/username/Rlib"</span> , .libPaths<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb2-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb2-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"\033[0;33;1mYou should consider getting the access right so we can put your local R-lib there, instead of OneDrive.\033[0m\n"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb2-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span></code></pre></div></div>
</div>
</section>
<section id="test" class="level3">
<h3 class="anchored" data-anchor-id="test">Test</h3>
<p>Test this by running and checking the outputs of:</p>
<ul>
<li><code>.libPaths()</code></li>
<li><code>options()$repos</code></li>
</ul>
</section>
</section>
<section id="long-winded" class="level2">
<h2 class="anchored" data-anchor-id="long-winded">Long-winded</h2>
<section id="startup-behavior-of-r-when-loading-package-environment-details" class="level3">
<h3 class="anchored" data-anchor-id="startup-behavior-of-r-when-loading-package-environment-details">Startup behavior of R when loading package environment details</h3>
<p>R Startup behavior (funny): <a href="https://rstats.wtf/r-startup.html" class="uri">https://rstats.wtf/r-startup.html</a></p>
<blockquote class="blockquote">
<p>Credit: This section was largely taken from an internal Posit resource of unknown authorship</p>
</blockquote>
<p>From bash it is different than from the editor.</p>
<p>See <a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/Startup.html" title="https://stat.ethz.ch/R-manual/R-devel/library/base/html/Startup.html">here</a> for the official startup docs from R.</p>
<p>R from the command line/bash will take the user’s environment. It will not read any additional bash files during start-up (which the RStudio products will do). It will still read in the R startup files (Renviron/Rprofile).</p>
<p>Prior to loading the R session from the bash shell any commands in this file will be read and execute commands if it exists: <code>/etc/profile</code></p>
<p>Next, the the first of the following files that exists and is readable will have commands executed from (only one of these files will be read and executed):</p>
<ul>
<li><p><code>~/.bash_profile</code></p></li>
<li><p><code>~/.bash_login</code></p></li>
<li><p><code>~/.profile</code></p></li>
</ul>
<p>R then always loads the following (in order):</p>
<ul>
<li><p><code>R_HOME/etc/Renviron.site</code> (set for all users)</p></li>
<li><p><code>.Renviron</code> - user-specific, typically in the user’s home directory, but can be elsewhere (for instance, in a Project folder)</p></li>
<li><p><code>R_HOME/etc/Rprofile.site</code> (set for all users)</p></li>
<li><p><code>.Rprofile</code> - user-specific, typically in the user’s home directory, but can be elsewhere (for instance, in a Project folder)</p></li>
</ul>
<p>Beyond this, what gets put in the environment depends on the product.</p>
<ul>
<li><p>RStudio Server / Workbench: before any of this executes, RStudio Server will first include the contents of /etc/rstudio/rsession-profile if it exists. It will also add anything set in rsession-ld-library-path in rserver.conf to the LD_LIBRARY_PATH environment variable.</p></li>
<li><p>Shiny Server / Connect: you can affect the environment variables for a specific application using program supervisors</p></li>
</ul>
<p>This page in the documentation is the new home for the golden source of info for startup behavior: <a href="https://docs.posit.co/ide/user/ide/guide/environments/r/managing-r.html" class="uri">https://docs.posit.co/ide/user/ide/guide/environments/r/managing-r.html</a></p>
</section>
<section id="r-sessions-across-all-workbench-ides" class="level3">
<h3 class="anchored" data-anchor-id="r-sessions-across-all-workbench-ides">R sessions across all Workbench IDE’s</h3>
<p>Relying on <code>repos.conf</code> for R repository configuration IMHO is a clear anti-pattern which especially large customers with large setups should not use. <code>repos.conf</code> is a relic from a time where there was only RSP.</p>
<p>Configure the repository settings in R directly, rather than through the RStudio settings.</p>
<p>Resources:</p>
<ul>
<li><p>A great resource for setting this up simply is: <a href="https://docs.posit.co/ide/user/ide/guide/environments/r/managing-r.html" class="uri">https://docs.posit.co/ide/user/ide/guide/environments/r/managing-r.html</a></p></li>
<li><p>For a more complex example that could be used in slurm environments refer to: <a href="https://github.com/sol-eng/singularity-rstudio/blob/main/data/workbench/scripts/run.R" class="uri">https://github.com/sol-eng/singularity-rstudio/blob/main/data/workbench/scripts/run.R</a></p></li>
</ul>
<p>The <code>Renviron.site</code> would override the <code>Rprofile.site</code> setting and therefore may be more robust.</p>
<section id="renviron.site-1" class="level4">
<h4 class="anchored" data-anchor-id="renviron.site-1">Renviron.site</h4>
<p>Create a <code>Renviron.site</code> file and define:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/opt/R/Some-R-Version/lib/R/etc/Renviron.site</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" data-filename="/opt/R/Some-R-Version/lib/R/etc/Renviron.site" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Key1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>value1</span>
<span id="cb3-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">RENV_PATHS_PREFIX_AUTO</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TRUE</span>
<span id="cb3-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">RENV_PATHS_CACHE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/scratch/renv</span>
<span id="cb3-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">R_LIBS_SITE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>R_LIBS_SITE=<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${R_LIBS_SITE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/usr/local/lib/R/site-library:/usr/local/lib/R/library:/usr/lib64/R/library:/usr/share/R/library'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
</div>
<p>And then <code>Sys.getenv("Key1")</code> will return <code>"value1"</code> in a users R session.</p>
<p>This can be set at the user or system level. Users have the choice between user or project level (project taking preference). The <a href="https://usethis.r-lib.org/">usethis</a> package includes a helper function for editing <code>.Renviron</code> files from an R session with&nbsp;<code>usethis::edit_r_environ()</code>. For a system level install it is placed per R version, for example at <code>/opt/R/4.1.1/lib/R/etc/Renviron.site</code>.</p>
</section>
<section id="rprofile.site-1" class="level4">
<h4 class="anchored" data-anchor-id="rprofile.site-1">.Rprofile.site</h4>
<p>Set <code>.libPaths()</code> in <code>.Rprofile.site</code>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/opt/R/Some-R-Version/lib/R/etc/Rprofile.site</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" data-filename="/opt/R/Some-R-Version/lib/R/etc/Rprofile.site" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">options</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">repos</span> = c<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CRAN</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://packagemanager.posit.co/all/latest"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">))</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interactive()</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb4-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">options</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">width</span> = 120<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span></code></pre></div></div>
</div>
<p>Again this file can be se at the user or system level. At the user level the easiest way to edit your <code>.Rprofile</code> file is to use the <code>usethis::edit_r_profile()</code> function from within an R session. You can specify whether you want to edit the user or project level <code>.Rprofile.</code> For a system level install it is placed per R version, for example at <code>/opt/R/4.2.0/lib/R/etc/Rprofile.site</code>.</p>
</section>
<section id="configuring-a-shared-library" class="level4">
<h4 class="anchored" data-anchor-id="configuring-a-shared-library">Configuring a shared library</h4>
<p>Taken from an <a href="https://positpbc.slack.com/archives/C2P7MTJKE/p1738088423395249?thread_ts=1737982807.176319&amp;cid=C2P7MTJKE">internal discussion</a></p>
<p>Set <code>.libPaths()</code> in <code>.Rprofile.site</code>.</p>
<p>There are two main options:</p>
<ul>
<li><p>Install a set of R packages in a shared library. The users here would need to specify which packages they really need and then their IT team could install those into a <code>site-library</code> in each R version, ideally leveraging a time-based snapshot from package manager for reproducibility reason. Users in this case would be limited to a certain package version for some time. They however can update those packages regularly (e.g.&nbsp;quarterly) to lessen the pain here. As mentioned above, do <strong>NOT</strong> use any recommendation from the Posit Admin guide for this setup but follow the standard approach to configure the same in R (leveraging <code>Rprofile.site</code> and <code>Renviron.site</code> for example).</p></li>
<li><p>Educate/train the users to all use <code>renv</code> - then every user would have maximum degree of freedom to choose which packages and which version they want to use for each project. They then would maintain <code>renv.lock</code> files for each project and the admin team can then configure a shared <code>renv</code> package cache to ensure that any given package/version combination is only stored once.</p></li>
</ul>
<p>Both options in their own right also protect the data scientists from producing irreproducible code since in neither case they rely on that melting pot of R package mess that typically piles up in <code>R_LIBS_USER</code> (in particular for systems where R points to latest CRAN which IMHO is another anti-pattern)</p>
<section id="script-for-updating-packages-from-rspm-that-have-changed-to-site-library" class="level5">
<h5 class="anchored" data-anchor-id="script-for-updating-packages-from-rspm-that-have-changed-to-site-library">Script for updating packages from rspm that have changed to site library</h5>
<pre><code># update existing packages
update.packages(lib.loc=&lt;site.library&gt;, repos=&lt;PPM Repo&gt;, ask=FALSE)

# add any new packages
new.packages(lib.loc=&lt;site.library&gt;, repos=&lt;PPM Repo&gt;, ask=FALSE)</code></pre>
</section>
</section>
</section>
<section id="workbench-and-rstudio-sessions-only" class="level3">
<h3 class="anchored" data-anchor-id="workbench-and-rstudio-sessions-only">Workbench and RStudio sessions only</h3>
<p>The oft recommended path is to use the <code>repos.conf</code> or <code>rsession.conf</code> file to configure the repository URL.</p>
<p>This might look like:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/rstudio/rsession.conf</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb6" data-filename="/etc/rstudio/rsession.conf" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">r-cran-repos=http://cran.at.r-project.org/</span></span></code></pre></div></div>
</div>
<p>Or:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/rstudio/repos.conf</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb7" data-filename="/etc/rstudio/repos.conf" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">RSPM</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>https://packagemanager.posit.co/cran/__linux__/jammy/latest</span>
<span id="cb7-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">CRAN</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>https://packagemanager.posit.co/cran/__linux__/jammy/latest</span>
<span id="cb7-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Australia</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>https://cran.ms.unimelb.edu.au/</span>
<span id="cb7-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Austria</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>https://lib.ugent.be/CRAN/</span></code></pre></div></div>
</div>
<p>And adding to <code>rsession.conf</code>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/rstudio/rsession.conf</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb8" data-filename="/etc/rstudio/rsession.conf" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use this to change the location / name of the repos.conf file</span></span>
<span id="cb8-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">r-cran-repos-file=/etc/rstudio/repos.conf</span></span></code></pre></div></div>
</div>
<p>Reference: <a href="https://docs.posit.co/ide/server-pro/rstudio_pro_sessions/package_installation.html" class="uri">https://docs.posit.co/ide/server-pro/rstudio_pro_sessions/package_installation.html</a></p>
</section>
<section id="ld_library_path" class="level3">
<h3 class="anchored" data-anchor-id="ld_library_path">LD_LIBRARY_PATH</h3>
<p>Reference: <a href="https://rstudioide.zendesk.com/agent/tickets/107856" class="uri">https://rstudioide.zendesk.com/agent/tickets/107856</a></p>
<p>There are a few different places the LD_LIBRARY_PATH can be modified within Workbench settings, only some of which will work for packages like <code>rJava</code>. For instance, including the ldpaths script in <code>/etc/rstudio/r-versions</code> can ensure the correct library is set on R session startup. The final step in this support article shows a method of setting this up which should work even on non-containerized Workbench sessions (the mkdir command can be excluded, since that directory should already exist on a server-installed version of Workbench):</p>
<p>We need to force the installed R version to use it’s own ldpaths startup script when it starts inside the container.</p>
<p><code>RUN mkdir -p /etc/rstudio &amp;&amp; printf "Path: /opt/R/${R_VERSION}\nScript: /opt/R/${R_VERSION}/lib/R/etc/ldpaths" &gt; /etc/rstudio/r-versions</code></p>
<p>These steps are good to follow: <a href="https://solutions.posit.co/envs-pkgs/using-rjava/index.html#additional-steps-for-workbench" class="uri">https://solutions.posit.co/envs-pkgs/using-rjava/index.html#additional-steps-for-workbench</a></p>
<p>The additional steps that need to be followed on Workbench are:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/rstudio/r-versions</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb9" data-filename="/etc/rstudio/r-versions" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Path:</span> /opt/R/4.2.0</span>
<span id="cb9-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Script:</span> /opt/R/4.2.0/lib/R/etc/ldpaths</span></code></pre></div></div>
</div>
</section>
<section id="troubleshooting" class="level3">
<h3 class="anchored" data-anchor-id="troubleshooting">Troubleshooting</h3>
<p>To determine the environment details it can be useful to run <code>Sys.getenv()</code> from inside and outside RStudio, to see if the user’s bash files are setting environment variables inappropriately for the system.</p>
<p>If the issue is occurring within RStudio it can be helpful to capture the output of<code>system("ldd /usr/lib/rstudio-server/bin/rsession")</code> from inside and outside RStudio to see which R libraries are being loaded.</p>
<p>Test from a user session the repository details with:</p>
<ul>
<li><code>.libPaths()</code></li>
<li><code>options()$repos</code></li>
</ul>
<p>Permissions on the various configs can cause various issues with soft fails, for example a working permission is: <code>chmod 644</code>, or for the rstudio directory consider <code>chmod 0755 /etc/rstudio</code> or <code>chmod o+x /etc/rstudio</code> to add the <code>x</code> bit for just rstudio-server without opening up the other permissions if it is desired to keep it restricted (may result in odd behavior).</p>
<p>Check permissions with: <code>ls -la /etc/rstudio</code></p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>R</category>
  <guid>https://questionable.quarto.pub/blog/work/r-repository-settings-workbench.html</guid>
  <pubDate>Thu, 24 Apr 2025 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Using the remote CLI with package manager</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/rspm_remote_admin_cli.html</link>
  <description><![CDATA[ 






<section id="overview" class="level3">
<h3 class="anchored" data-anchor-id="overview">Overview</h3>
<p>Remote CLI use: <a href="https://docs.posit.co/rspm/admin/admin-cli/#cli-remote-use" class="uri">https://docs.posit.co/rspm/admin/admin-cli/#cli-remote-use</a></p>
<blockquote class="blockquote">
<p>The entire admin CLI is now available for use remotely, with the exception of the offline, online and cluster commands. API tokens can be generated with the new global:admin scope to allow full access to the CLI.</p>
</blockquote>
<p>In order to use the admin CLI remotely you need an admin to create an API token for you (<code>rspm create token</code>)</p>
<p>The admin will likely need to follow these steps:</p>
<ul>
<li>Enable the <code>Authentication.APITokenAuth</code> configuration setting and restart the Package Manager service.</li>
<li>Create a token using the <code>rspm create token</code> command. For example <code>rspm create token --scope=global:admin --expires=never</code></li>
<li>Give the token and the full address of the server (including the port if not using a default port like 80/443) to the remote user.</li>
</ul>
<p>As a user these are needed:</p>
<ul>
<li>Download the Package Manager CLI, ensuring that the CLI version matches the server version.</li>
<li>Set an environment variable named <code>PACKAGEMANAGER_TOKEN</code> with the value of the token.</li>
<li>Set an environment variable named <code>PACKAGEMANAGER_ADDRESS</code> with the address of the Package Manager server.</li>
</ul>
<p>Some other commands useful to know about:</p>
<ul>
<li><code>rspm encrypt generate</code> for creating the encryption token from the CLI before setting up the server.</li>
<li>Generate a bootstrap key programmatically: <a href="https://docs.posit.co/rspm/admin/appendix/bootstrap/" class="uri">https://docs.posit.co/rspm/admin/appendix/bootstrap/</a></li>
<li><code>rspm create token --scope=sources:write --description 'meatballhat is testing' --sources='*' --expires=1h</code> generates an API key for one hour</li>
<li><code>rspm create token --description="user A" --sources=local-src --expires=30d --scope=sources:write</code> creates a token for adding binary packages remotely</li>
<li>useful example showing setup instructions for a package manager instance: <a href="https://github.com/rstudio/evaluations/blob/main/src/scripts/config_rspm.sh" class="uri">https://github.com/rstudio/evaluations/blob/main/src/scripts/config_rspm.sh</a></li>
<li>here’s the way we included the rspm cli in the container images: <a href="https://github.com/rstudio/sol-eng-demo-server/pull/110/files" class="uri">https://github.com/rstudio/sol-eng-demo-server/pull/110/files</a></li>
<li>list of all commands: <a href="https://docs.posit.co/rspm/admin/appendix/cli/rspm/" class="uri">https://docs.posit.co/rspm/admin/appendix/cli/rspm/</a></li>
</ul>
</section>
<section id="environment-set-up" class="level3">
<h3 class="anchored" data-anchor-id="environment-set-up">Environment set-up</h3>
<p>Current environment token:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">PACKAGEMANAGER_ADDRESS</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;</span>redacted<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">PACKAGEMANAGER_TOKEN</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;</span>redacted<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div></div>
</section>
<section id="running-commands" class="level3">
<h3 class="anchored" data-anchor-id="running-commands">Running commands</h3>
<p>As a user we can test our access with something like this:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the Package Manager CLI, ensuring that the CLI version matches the server version. For example RSPM_SERVER_VERSION=2024.04.2-29 or RSPM_SERVER_VERSION=2023.12.0-13, find the version through the UI or with rspm --version</span></span>
<span id="cb2-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">RSPM_SERVER_VERSION</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>2024.08.2-9</span>
<span id="cb2-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">RSPM_SERVER_VERSION</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>2024.08.4-10</span>
<span id="cb2-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">RSPM_SERVER_VERSION</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>2024.11.0-7</span>
<span id="cb2-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> rspm <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> https://cdn.posit.co/package-manager/linux/amd64/rspm-cli-linux-<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${RSPM_SERVER_VERSION}</span></span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> +x rspm</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set an environment variable named PACKAGEMANAGER_TOKEN with the value of the token.</span></span>
<span id="cb2-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>redacted<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$PACKAGEMANAGER_TOKEN</span></span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set an environment variable named PACKAGEMANAGER_ADDRESS with the address of the Package Manager server. </span></span>
<span id="cb2-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">PACKAGEMANAGER_ADDRESS</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;</span>redacted<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$PACKAGEMANAGER_ADDRESS</span></span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test it! </span></span>
<span id="cb2-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> verify</span>
<span id="cb2-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> list tokens</span>
<span id="cb2-19"></span>
<span id="cb2-20"></span>
<span id="cb2-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test it! </span></span>
<span id="cb2-22"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> list blocklist-rules</span>
<span id="cb2-23"></span>
<span id="cb2-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test it! Need a package to try to push to test these</span></span>
<span id="cb2-25"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> add <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>internal <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--path</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lisaPackageManagerDemo_0.0.1.tar.gz</span></code></pre></div></div>
<p>Let’s create a new repository for blocked packages that is inspired by <a href="https://github.com/rstudio/evaluations/blob/main/src/scripts/config_rspm.sh" class="uri">https://github.com/rstudio/evaluations/blob/main/src/scripts/config_rspm.sh</a></p>
<p>First we should create our .txt files with the desired subset of packages:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># curated cran</span></span>
<span id="cb3-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dplyr\nggplot2\narrow\nlubridate\njsonlite\nreadxl\nhaven\ngdata\nigraph\ncommonmark'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> package_subset_r.csv</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># curated pypi</span></span>
<span id="cb3-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plotnine\npolars\npillow\ngreat-tables'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> package_subset_py.txt</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">snapshot</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>2025-01-22</span></code></pre></div></div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># blocked packages -- R</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create source <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>curated-cran <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-packages-r </span>
<span id="cb4-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create blocklist-rule <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-packages-r <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--vulns</span></span>
<span id="cb4-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create blocklist-rule <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-packages-r <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--package-name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ggplot2 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--description</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Installation of 'ggplot2' is blocked"</span></span>
<span id="cb4-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> update <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-packages-r <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--file-in</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'package_subset_r.csv'</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--commit</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--snapshot</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${snapshot}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create repo <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-r <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--description</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Curated CRAN with vulnerability blocking enabled. Downloads of ggplot2 are also disallowed."</span></span>
<span id="cb4-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> subscribe <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-r <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-packages-r</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># blocked packages -- python</span></span>
<span id="cb4-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create source <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-packages-python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>curated-pypi</span>
<span id="cb4-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create blocklist-rule <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-packages-python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--vulns</span></span>
<span id="cb4-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create blocklist-rule <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-packages-python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--package-name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plotnine <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--description</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Installation of 'plotnine' is blocked."</span></span>
<span id="cb4-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> update <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-packages-python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--file-in</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>package_subset_py.txt <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--snapshot</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${snapshot}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--commit</span></span>
<span id="cb4-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create repo <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--description</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Curated PyPI with vulnerability blocking enabled. Downloads of plotnine are also disallowed."</span></span>
<span id="cb4-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> subscribe <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-packages-python</span></code></pre></div></div>
<p>Let’s check for package versions that violate the blocklist rule for blocking vulnerabilities:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#rspm test blocklist-rules --repo=[repo name] --package-name=[package name] --version=[version]</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> test blocklist-rules <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--package-name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pillow</span>
<span id="cb5-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> test blocklist-rules <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--package-name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pillow <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>10.0.1</span></code></pre></div></div>
<p>Let’s set up a cran that has all vulnerable packages blocked (rather than a subset). This wasn’t possible until the newest release.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create repo <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cran-vulns-blocked <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>r <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--description</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Access CRAN packages with known vulnerabilities blocked'</span></span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> subscribe <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cran-vulns-blocked <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cran</span>
<span id="cb6-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create blocklist-rule <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cran-vulns-blocked <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--vulns</span></span></code></pre></div></div>
<p>Let’s now do the same for pypi:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create repo <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pypi-vulns-blocked <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--description</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Access PyPi packages with known vulnerabilities blocked'</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> subscribe <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pypi-vulns-blocked <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pypi</span>
<span id="cb7-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create blocklist-rule <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pypi-vulns-blocked <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--vulns</span></span></code></pre></div></div>
<p>Let’s check for package versions that violate the blocklist rule for blocking vulnerabilities:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#rspm test blocklist-rules --repo=[repo name] --package-name=[package name] --version=[version]</span></span>
<span id="cb8-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> test blocklist-rules <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cran-vulns-blocked <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--package-name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>jsonlite <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1.8.7</span>
<span id="cb8-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> test blocklist-rules <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pypi-vulns-blocked <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--package-name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pillow <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>10.0.1</span></code></pre></div></div>
<p>Let’s create a blocklist rule to block a specific package:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create blocklist-rule <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cran-vulns-blocked <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--package-name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ggplot2 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--description</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Installation of 'ggplot2' is blocked"</span></span>
<span id="cb9-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> test blocklist-rules <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cran-vulns-blocked <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--package-name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ggplot2</span></code></pre></div></div>
<p>Remove a repository (oops!):</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> delete repo <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pypi-vulns-blocked</span></code></pre></div></div>
<p>Try to download a blocked package:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(remotes)</span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">CRAN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://pkg.demo.posit.team/cran-vulns-blocked/__linux__/noble/latest"</span>))</span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_version</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jsonlite"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.8.7"</span>)</span></code></pre></div></div>
<p>or we can instead curl it to see what happens:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> https://pkg.demo.posit.team/cran-vulns-blocked/latest/src/contrib/Archive/jsonlite/jsonlite_1.8.7.tar.gz</span></code></pre></div></div>
</section>
<section id="rosv" class="level3">
<h3 class="anchored" data-anchor-id="rosv">rosv</h3>
<p>rosv r package: <a href="https://github.com/cran/rosv" class="uri">https://github.com/cran/rosv</a></p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rosv)</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pull the entire set of PyPI vulnerability data</span></span>
<span id="cb13-4">pkg_vul <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">osv_query</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ecosystem =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PyPI'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all_affected =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb13-5">pypi_vul <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_osv_list</span>(pkg_vul, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">as.data.frame =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">NA_value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pull the entire set of cran vulnerability data</span></span>
<span id="cb13-8">pkg_vul <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">osv_query</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ecosystem =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CRAN'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all_affected =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb13-9">cran_vul <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_osv_list</span>(pkg_vul, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">as.data.frame =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">NA_value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)</span>
<span id="cb13-10"></span>
<span id="cb13-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scan an R project </span></span>
<span id="cb13-12">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">osv_scan</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r_project'</span>)</span></code></pre></div></div>
</section>
<section id="r-advisory-database" class="level3">
<h3 class="anchored" data-anchor-id="r-advisory-database">r-advisory-database</h3>
<p>r-advisory-database: <a href="https://github.com/RConsortium/r-advisory-database" class="uri">https://github.com/RConsortium/r-advisory-database</a></p>
</section>
<section id="troubleshooting" class="level3">
<h3 class="anchored" data-anchor-id="troubleshooting">Troubleshooting</h3>
<blockquote class="blockquote">
<p>“unsupported protocol scheme”“”</p>
</blockquote>
<p>This error is due to the missing <code>https://</code> in front of the URL. Add that and try again.</p>
<blockquote class="blockquote">
<p>“Error: unable to get the claims from the token: signature is invalid”</p>
</blockquote>
<p>Was the package manager server recently updated? The encryption key changes between versions (is re-generated). It is used for all secret management in PPM, including JWT tokens, encrypted configuration values like database passwords, and credentials for git builders. Logic needs to be added to manage the key across versions if you want things like API keys to persist. Follow the docs <a href="https://docs.posit.co/rspm/admin/appendix/encryption/">here</a> and consider setting the supported env var <code>PACKAGEMANAGER_ENCRYPTION_KEY</code>.</p>


</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/rspm_remote_admin_cli.html</guid>
  <pubDate>Wed, 22 Jan 2025 07:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>AWS Connections from Posit Team</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/aws-data-sources.html</link>
  <description><![CDATA[ 






<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>This article walks through the different access options for data resources in AWS. Access patterns for AWS resources will vary based on several general factors:</p>
<ol type="1">
<li>Where the code is running (e.g.&nbsp;Posit Workbench vs.&nbsp;Posit Connect)</li>
<li>The credential (e.g.&nbsp;OIDC, IAM roles, kerberos authentication, IAM instance profile and policy, username/password, etc.)</li>
<li>The connection method (e.g.&nbsp;Workbench managed credentials, R or Python package, ODBC, etc.)</li>
<li>Which AWS resource is being accessed</li>
</ol>
<section id="aws-data-resources" class="level3">
<h3 class="anchored" data-anchor-id="aws-data-resources">AWS data resources</h3>
<p>Popular data storage options in AWS include S3, Aurora, Redshift, and Athena. Each type is useful for different workflows.</p>
<table class="caption-top table">
<colgroup>
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
</colgroup>
<thead>
<tr class="header">
<th><strong>Service</strong></th>
<th><strong>Type</strong></th>
<th><strong>Data Type</strong></th>
<th><strong>Best For</strong></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Amazon S3</strong></td>
<td>Object Storage</td>
<td>Unstructured, Semi-structured</td>
<td>Data lakes, blob storage, backups, archive</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td><strong>Amazon RDS / Aurora</strong></td>
<td>Relational Database</td>
<td>Structured</td>
<td>Real-time transactions, enterprise apps, Aurora/MySQL/PostgreSQL/MariaDB/Microsoft SQL Server/Oracle database engines</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td><strong>Amazon Redshift</strong></td>
<td>Data Warehouse</td>
<td>Structured, Semi-structured</td>
<td>Analytics, Business Intelligence</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td><strong>Amazon Athena</strong></td>
<td>Interactive Query to S3</td>
<td>Semi-structured, Structured</td>
<td>Ad-hoc queries on S3 data</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</section>
<section id="aws-identity-and-access-management-iam" class="level3">
<h3 class="anchored" data-anchor-id="aws-identity-and-access-management-iam">AWS Identity and Access Management (IAM)</h3>
<p>The foundation of identity management on AWS is through the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html">Identity and Access Management (IAM) web service</a>. The basic principles are:</p>
<ul>
<li>A user is set up on IAM (this can be synced with an external authentication agent)</li>
<li>Their sign-in credentials are used to authenticate with AWS (either as an AWS account root user, an IAM user, or assuming an IAM role)</li>
<li>Sign-in credentials are matched to a principal (an IAM user, federated user, IAM role, or application)</li>
<li>Access is requested and granted to a specific service according to the relevant services policy</li>
</ul>
<p>Vocabulary:</p>
<ul>
<li><p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users.html">IAM users</a> are individual entities, typically a human user. By default IAM users have minimum permissions and access must be granted to them.</p></li>
<li><p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups.html">IAM groups</a> can be used to describe a collection of IAM users and grant permissions to a larger set of users, rather than individually.</p></li>
<li><p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">Roles</a> are an identity that has specific permissions. Any IAM user can be granted a role which would then give them access to those permissions for the time alotted. Services can also be granted roles which allows the service to perform actions on your behalf.</p></li>
<li><p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html">Policies</a> define permissions. They can be attached to identities or resources. These permissions define if a request is allowed or denied.</p></li>
</ul>
</section>
</section>
<section id="credentials" class="level2">
<h2 class="anchored" data-anchor-id="credentials">Credentials</h2>
<p>This guide will focus on the recommended tools for authentication to AWS resources when using Posit. The different methods that are commonly used are:</p>
<ul>
<li>User: Workbench Managed Credentials using Identity and Access Management (IAM) (recommended) 🔗</li>
<li>User: Developer managed credentials using Identity and Access Management (IAM), Secrets manager, or Key Management Service (KMS) 🔗</li>
<li>User or One-to-many: Developer managed keypair using an AWS secret key and access key 🔗</li>
<li>One-to-many: Grant trusted access to resource from VM using an IAM instance profile and policy or role 🔗</li>
</ul>
<p>Not supported:</p>
<ul>
<li>Browser authentication methods. Posit Workbench does not support this method. After a successful login, AWS will redirect you to <code>localhost</code> instead of your Workbench instance.</li>
</ul>
</section>
<section id="connection-methods" class="level2">
<h2 class="anchored" data-anchor-id="connection-methods">Connection Methods</h2>
<p>AWS supports many different types of connection methods. This guide will focus on the recommended connection methods when using Posit Workbench and Posit Connect.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset" data-group="language">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true" href="">R</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false" href="">Python</a></li></ul>
<div class="tab-content" data-group="language">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p>Connection authentication is through the <a href="https://www.paws-r-sdk.com/">paws</a> package. In addition it provides the ability to return data objects for many of the resources inside AWS. For resources that are databases the <a href="https://odbc.r-dbi.org/reference/dbConnect-OdbcDriver-method.html">odbc</a> and <a href="https://dbi.r-dbi.org/">DBI</a> packages are also needed in order to create connection objects. Your Posit admin should follow the instructions on the <a href="https://docs.posit.co/pro-drivers/">Install Pro Drivers</a> page of the documentation.</p>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p>Connection authentication is through the <a href="https://pypi.org/project/boto3/">boto3</a> package. For resources that are databases this can be used in conjunction with data frame libraries like <a href="https://docs.pola.rs/">polars</a> or <a href="https://pandas.pydata.org/">pandas</a>. Your Posit admin should follow the instructions on the <a href="https://docs.posit.co/pro-drivers/">Install Pro Drivers</a> page of the documentation.</p>
</div>
</div>
</div>
</section>
<section id="user-credential-examples" class="level2">
<h2 class="anchored" data-anchor-id="user-credential-examples">User Credential Examples</h2>
<section id="development-environments-ie-workbench" class="level3">
<h3 class="anchored" data-anchor-id="development-environments-ie-workbench">Development Environments (IE Workbench)</h3>
<p>Development environments refer to environments where users write and execute cod, which include Posit Workbench. In the development environment the running user is executing the code, so both interactive and non-interactive authentiation methods are possible. Most commonly the credential method chosen uses the credetials of the running user.</p>
<p>The admin for Workbench can configure credentials on Workbench to help make this process easier for developers. Currently, this feature is only supported for RStudio Pro and VS Code sessions.</p>
</section>
<section id="example-access-patterns" class="level3">
<h3 class="anchored" data-anchor-id="example-access-patterns">Example Access Patterns</h3>
<section id="workbench-managed-creds-iam" class="level4">
<h4 class="anchored" data-anchor-id="workbench-managed-creds-iam">Workbench Managed Credentials</h4>
<p>Workbench Managed Credentials is the recommended way to access data on AWS from Posit Workbench. This method is secure and provides a nice user experience because Workbench manages the credentials for the user.This uses the AWS <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc.html">web identity federation</a> mechanism to securely set credentials in individual sessions.</p>
<p>An admin can configure Workbench to provide user-specific AWS credentials for sessions that are tied to their Single Sign-On credentials. Under the hood Workbench uses the AWS web identity federation mechanism (IAM with OpenID Connect) to set these credentials in individual sessions. For more details the administrator should refer to the <a href="https://docs.posit.co/ide/server-pro/authenticating_users/aws_credentials.html">AWS Credentials</a> page in the Posit Workbench Admin Guide.</p>
<section id="aws-configuration" class="level5">
<h5 class="anchored" data-anchor-id="aws-configuration">AWS Configuration</h5>
<p>AWS will need to be configured with an appropriate IAM Identity Provider and IAM Roles that Workbench users will assume. See the <a href="https://docs.posit.co/ide/server-pro/authenticating_users/aws_credentials.html#aws-configuration">AWS Configuration</a> page for step-by-step directions.</p>
<p>Users that need access to resources will need the policy associated with their IAM role updated.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset" data-group="resource">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true" href="">S3</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false" href="">RDS / Aurora</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false" href="">Redshift</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-4" aria-controls="tabset-2-4" aria-selected="false" href="">Athena</a></li></ul>
<div class="tab-content" data-group="resource">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<p>For access from Workbench to S3 that could look like <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/security_iam_service-with-iam.html">this</a>:</p>
<pre><code>{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "Allow user complete access to create and remove objects in the bucket",
            "Effect": "Allow",
            "Principal": {
                "AWS": "arn:aws:iam::12345678901:user/user"
            },
            "Action": "s3:*",
            "Resource": "arn:aws:s3:::amzn-s3-demo-bucket"
        }
    ]
}</code></pre>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<p>For access from Workbench to RDS / Aurora that could look like <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.IAMPolicy.html">this</a> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.IAMPolicy.html">this</a>:</p>
<pre><code>{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "rds-db:connect"
            ],
            "Resource": [
                "arn:aws:rds:us-east-2:637485797898:db:cluster-db/username"
            ]
        }
    ]
}</code></pre>
<p>The database will need to have user access granted, for example <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.DBAccounts.html#UsingWithRDS.IAMDBAuth.DBAccounts.PostgreSQL">for postgres use <code>GRANT rds_iam TO db_userx;</code></a>.</p>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<p>For access from Workbench to Redshift that could look like <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/generating-user-credentials.html">this</a>:</p>
<pre><code>{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": "redshift:GetClusterCredentials",
            "Resource": "arn:aws:redshift:us-east-2:637485797898:dbuser:demo-cluster/username"
        }
    ]
}</code></pre>
<p>The database will need to have user access granted, use the <a href="https://docs.aws.amazon.com/redshift/latest/dg/r_GRANT.html">GRANT</a> command. For more details refer to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/generating-iam-credentials-steps.html">the AWS documentation</a>.</p>
</div>
<div id="tabset-2-4" class="tab-pane" aria-labelledby="tabset-2-4-tab">
<p>For access from Workbench to Aurora that could look like <a href="https://docs.aws.amazon.com/athena/latest/ug/example-policies-workgroup.html">this</a>:</p>
<pre><code>{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "athena:*"
            ],
            "Resource": [
                "*"
            ]
        }
    ]
}</code></pre>
<p>There are two managed policies for Athena that are needed to grant access <code>AmazonAthenaFullAccess</code> and <code>AWSQuicksightAthenaAccess</code>.</p>
<p>Additional permissions may be needed in order to access the underlying dataset stored in S3.</p>
</div>
</div>
</div>
</section>
<section id="workbench-managed-creds-user" class="level5">
<h5 class="anchored" data-anchor-id="workbench-managed-creds-user">User Configuration</h5>
<p>When starting a new Workbench session, users should click on the AWS credential selection widget to login to AWS. After selecting and starting the session with attached credentials, the credentials needed to connect to AWS resources (<code>AWS_ROLE_ARN</code> and <code>AWS_WEB_IDENTITY_TOKEN_FILE</code>) are available within the session.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/aws-new-connection.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="AWS accounts in the New Session dialog’s credential selection widget"><img src="https://questionable.quarto.pub/blog/work/img/aws-new-connection.png" class="img-fluid figure-img" alt="AWS accounts in the New Session dialog’s credential selection widget"></a></p>
<figcaption>AWS accounts in the New Session dialog’s credential selection widget</figcaption>
</figure>
</div>
<p>The <a href="https://docs.posit.co/ide/server-pro/user/posit-workbench/managed-credentials/aws.html">Posit Workbench User Guide - Workbench-managed AWS Credentials</a> page in the Posit Workbench User Guide provides more details on logging into AWS via Posit Workbench.</p>
<p>It is not possible to share credentials amongst users with Workbench Managed Credentials.</p>
</section>
<section id="workbench-managed-credentials-r-and-python-examples" class="level5">
<h5 class="anchored" data-anchor-id="workbench-managed-credentials-r-and-python-examples">R and Python Examples</h5>
<p>Users can verify the available credentials within their Workbench session by installing the <a href="https://aws.amazon.com/cli/">AWS CLI</a>.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"awscliv2.zip"</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unzip</span> awscliv2.zip</span>
<span id="cb5-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./aws/install</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> ~/.local/aws-cli <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-b</span> ~/.local/bin</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">aws</span> sts get-caller-identity</span></code></pre></div></div>
<div class="tabset-margin-container"></div><div class="panel-tabset" data-group="language">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-5-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-5-1" aria-controls="tabset-5-1" aria-selected="true" href="">R</a></li><li class="nav-item"><a class="nav-link" id="tabset-5-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-5-2" aria-controls="tabset-5-2" aria-selected="false" href="">Python</a></li></ul>
<div class="tab-content" data-group="language">
<div id="tabset-5-1" class="tab-pane active" aria-labelledby="tabset-5-1-tab">
<div class="tabset-margin-container"></div><div class="panel-tabset" data-group="r-resource">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true" href="">S3</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false" href="">RDS / Aurora</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-3" aria-controls="tabset-3-3" aria-selected="false" href="">Redshift</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-4" aria-controls="tabset-3-4" aria-selected="false" href="">Athena</a></li></ul>
<div class="tab-content" data-group="r-resource">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(paws)</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create an S3 service object in the region you are working on</span></span>
<span id="cb6-4">s3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> paws<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">config =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">region =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us-east-2"</span>))</span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Is this needed? </span></span>
<span id="cb6-7">token <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build_auth_token</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">endpoint =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo-cluster-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">region =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us-east-2"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">user =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span>) </span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb6-9"></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># locate the s3 bucket you want</span></span>
<span id="cb6-11">bucket <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo-projects'</span></span>
<span id="cb6-12">s3<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_objects</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Bucket =</span> bucket)</span>
<span id="cb6-13"></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># upload data to s3 bucket</span></span>
<span id="cb6-15">s3<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">put_object</span>(</span>
<span id="cb6-16">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Bucket =</span> bucket,</span>
<span id="cb6-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Key =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data.csv'</span></span>
<span id="cb6-18">)</span>
<span id="cb6-19"></span>
<span id="cb6-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read data from s3 bucket</span></span>
<span id="cb6-21">s3_download <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> s3<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_object</span>(</span>
<span id="cb6-22">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Bucket =</span> bucket,</span>
<span id="cb6-23">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Key =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-24">)</span></code></pre></div></div>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<p>Currently there is an <a href="https://github.com/paws-r/paws/issues/324">issue</a> preventig the credentials from being correctly loaded. In order to get this working (until the issue is fixed) the AWS CLI can be used to retrieve a functional token with <code>aws rds generate-db-auth-token --hostname demo-cluster-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com --port 5432 --region us-east-2 --username username</code> or call out to Python and use boto3 (for example with reticulate).</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(odbc)</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DBI)</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(paws)</span>
<span id="cb7-4">rds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> paws<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rds</span>()</span>
<span id="cb7-5">token <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build_auth_token</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">endpoint =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo-cluster-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">region =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us-east-2"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">user =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span>) </span>
<span id="cb7-6">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(odbc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">odbc</span>(),</span>
<span id="cb7-7">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Driver   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PostgreSQL"</span>,</span>
<span id="cb7-8">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Server   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo-cluster-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com"</span>,</span>
<span id="cb7-9">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Database =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo_db"</span>,</span>
<span id="cb7-10">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">UID      =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span>,</span>
<span id="cb7-11">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">PWD      =</span> token,</span>
<span id="cb7-12">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Port     =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5432</span>,</span>
<span id="cb7-13">                      )</span></code></pre></div></div>
</div>
<div id="tabset-3-3" class="tab-pane" aria-labelledby="tabset-3-3-tab">
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(odbc)</span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DBI)</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(paws)</span>
<span id="cb8-4">DB_NAME <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo_db'</span></span>
<span id="cb8-5">CLUSTER_IDENTIFIER <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo-cluster'</span></span>
<span id="cb8-6">DB_USER <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'username'</span></span>
<span id="cb8-7">redshift <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> paws<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">redshift</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">region =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us-east-2"</span>)</span>
<span id="cb8-8">temp_credentials <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> redshift<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_cluster_credentials</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DbUser =</span> DB_USER, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DbName =</span> DB_NAME, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ClusterIdentifier =</span> CLUSTER_IDENTIFIER, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">AutoCreate =</span> F)</span>
<span id="cb8-9">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(odbc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">odbc</span>(),</span>
<span id="cb8-10">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Driver   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Redshift"</span>,</span>
<span id="cb8-11">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Server   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo-cluster.cyvu3e2plbhb.us-east-2.redshift.amazonaws.com"</span>,</span>
<span id="cb8-12">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Database =</span> DB_NAME,</span>
<span id="cb8-13">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">UID      =</span> temp_credentials<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>DbUser,</span>
<span id="cb8-14">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">PWD      =</span> temp_credentials<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>DbPassword,</span>
<span id="cb8-15">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Port     =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5439</span></span>
<span id="cb8-16">                      )</span></code></pre></div></div>
</div>
<div id="tabset-3-4" class="tab-pane" aria-labelledby="tabset-3-4-tab">
<p>For R developers the <a href="https://www.paws-r-sdk.com/docs/athena/">paws</a> package can be used. More commonly, users connect directly to the data stored in S3.</p>
</div>
</div>
</div>
</div>
<div id="tabset-5-2" class="tab-pane" aria-labelledby="tabset-5-2-tab">
<div class="tabset-margin-container"></div><div class="panel-tabset" data-group="python-resource">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-4-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-1" aria-controls="tabset-4-1" aria-selected="true" href="">S3</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-2" aria-controls="tabset-4-2" aria-selected="false" href="">RDS / Aurora</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-3" aria-controls="tabset-4-3" aria-selected="false" href="">Redshift</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-4" aria-controls="tabset-4-4" aria-selected="false" href="">Athena</a></li></ul>
<div class="tab-content" data-group="python-resource">
<div id="tabset-4-1" class="tab-pane active" aria-labelledby="tabset-4-1-tab">
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install boto3</span></code></pre></div></div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyodbc</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> boto3</span>
<span id="cb10-3">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boto3.client(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s3'</span>)</span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Is this needed?</span></span>
<span id="cb10-5">token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.generate_db_auth_token(DBHostname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo-cluster-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com'</span>, Port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5432</span>,DBUsername<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span>, Region<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us-east-2"</span>)</span>
<span id="cb10-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(token)</span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span></span>
<span id="cb10-8">bucket <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s3.Bucket(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'amzn-s3-demo-bucket'</span>)</span>
<span id="cb10-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> obj <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> bucket.objects.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>():</span>
<span id="cb10-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(obj.key)</span></code></pre></div></div>
</div>
<div id="tabset-4-2" class="tab-pane" aria-labelledby="tabset-4-2-tab">
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install pyodbc boto3</span></code></pre></div></div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyodbc</span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> boto3</span>
<span id="cb12-3">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boto3.client(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rds'</span>, region_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us-east-2"</span>)</span>
<span id="cb12-4">token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.generate_db_auth_token(DBHostname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo-cluster-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com'</span>, Port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5432</span>,DBUsername<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span>, Region<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us-east-2"</span>)</span>
<span id="cb12-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(token)</span>
<span id="cb12-6">con<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pyodbc.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(driver<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{PostgreSQL}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb12-7">                   database<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo_db'</span>,</span>
<span id="cb12-8">                   uid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'username'</span>,</span>
<span id="cb12-9">                   pwd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>token,</span>
<span id="cb12-10">                   server<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo-cluster-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com'</span>,</span>
<span id="cb12-11">                   port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5432</span>,</span>
<span id="cb12-12">                   )</span>
<span id="cb12-13">con</span></code></pre></div></div>
</div>
<div id="tabset-4-3" class="tab-pane" aria-labelledby="tabset-4-3-tab">
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install pyodbc boto3</span></code></pre></div></div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyodbc</span>
<span id="cb14-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> boto3</span>
<span id="cb14-3">DB_NAME <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo_db'</span></span>
<span id="cb14-4">CLUSTER_IDENTIFIER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo-cluster'</span></span>
<span id="cb14-5">DB_USER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'username'</span></span>
<span id="cb14-6">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boto3.client(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'redshift'</span>, region_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us-east-2"</span>)</span>
<span id="cb14-7">cluster_creds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.get_cluster_credentials(DbUser<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DB_USER, DbName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DB_NAME, ClusterIdentifier<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CLUSTER_IDENTIFIER, AutoCreate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb14-8">temp_user <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cluster_creds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DbUser'</span>]</span>
<span id="cb14-9">temp_password <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cluster_creds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DbPassword'</span>]</span>
<span id="cb14-10">con<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pyodbc.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(driver<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{Redshift}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb14-11">                   database<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DB_NAME,</span>
<span id="cb14-12">                   uid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>temp_user,</span>
<span id="cb14-13">                   pwd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>temp_password,</span>
<span id="cb14-14">                   server<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo-cluster.cyvu3e2plbhb.us-east-2.redshift.amazonaws.com'</span>,</span>
<span id="cb14-15">                   port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5439</span>,</span>
<span id="cb14-16">                   )</span>
<span id="cb14-17">con</span></code></pre></div></div>
</div>
<div id="tabset-4-4" class="tab-pane" aria-labelledby="tabset-4-4-tab">
<p>For Python developers the <a href="https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/athena.html">boto3</a> package can be used. More commonly, users connect directly to the data stored in S3.</p>
</div>
</div>
</div>
</div>
</div>
</div>
<p>For more in depth information and examples, see:</p>
<ul>
<li>The Workbench User Guide section on <a href="https://docs.posit.co/ide/server-pro/user/posit-workbench/managed-credentials/aws.html">Workbench managed AWS credentials</a></li>
<li>The Connect User Guide <a href="https://docs.posit.co/connect/user/oauth-integrations/">OAuth Integrations</a> section for more detail on these concepts</li>
<li>The <a href="https://docs.posit.co/connect/cookbook/">Connect Cookbook</a> for complete examples of using OAuth credentials for deployment</li>
<li>The Connect Admin Guide section on <a href="https://docs.posit.co/connect/admin/integrations/oauth-integrations/">Oauth Integrations</a></li>
</ul>
</section>
</section>
<section id="workbench-developer-creds" class="level4">
<h4 class="anchored" data-anchor-id="workbench-developer-creds">Developer Managed Credentials</h4>
<p>If Workbench isn’t managing credentials on the behalf of users then users need the additional step of populating their credentials.</p>
<p>The AWS CLI can be used to retrieve a functional token with <code>aws rds generate-db-auth-token --hostname cluster-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com --port 5432 --region us-east-2 --username username</code>. This will grant a temporary token that by default lasts for 15 minutes. The developer will need to manually refresh the token as needed while working, unlike the case where Workbench will manage the token on their behalf.</p>
<p>After loading the token and performing appropriate authentication steps then the above steps can be taken to request resources from AWS.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset" data-group="language">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-6-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-6-1" aria-controls="tabset-6-1" aria-selected="true" href="">R</a></li><li class="nav-item"><a class="nav-link" id="tabset-6-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-6-2" aria-controls="tabset-6-2" aria-selected="false" href="">Python</a></li></ul>
<div class="tab-content" data-group="language">
<div id="tabset-6-1" class="tab-pane active" aria-labelledby="tabset-6-1-tab">
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(paws)</span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(odbc)</span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DBI)</span>
<span id="cb15-4"></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build a token </span></span>
<span id="cb15-6">token <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build_auth_token</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">endpoint =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo-cluster-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">region =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us-east-2"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">user =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span>) </span>
<span id="cb15-7"></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the token with the ODBC connection </span></span>
<span id="cb15-9">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(odbc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">odbc</span>(),</span>
<span id="cb15-10">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Driver   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PostgreSQL"</span>,</span>
<span id="cb15-11">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Server   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo-cluster-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com"</span>,</span>
<span id="cb15-12">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Database =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo_db"</span>,</span>
<span id="cb15-13">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">UID      =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span>,</span>
<span id="cb15-14">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">PWD      =</span> token,</span>
<span id="cb15-15">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Port     =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5432</span>,</span>
<span id="cb15-16">                      )</span>
<span id="cb15-17"></span>
<span id="cb15-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Gather temp credentials </span></span>
<span id="cb15-19">temp_credentials <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> redshift<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_cluster_credentials</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DbUser =</span> DB_USER, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DbName =</span> DB_NAME, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ClusterIdentifier =</span> CLUSTER_IDENTIFIER, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">AutoCreate =</span> F)</span>
<span id="cb15-20"></span>
<span id="cb15-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the temp credentials with the ODBC connection</span></span>
<span id="cb15-22">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(odbc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">odbc</span>(),</span>
<span id="cb15-23">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Driver   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Redshift"</span>,</span>
<span id="cb15-24">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Server   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo-cluster.cyvu3e2plbhb.us-east-2.redshift.amazonaws.com"</span>,</span>
<span id="cb15-25">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Database =</span> DB_NAME,</span>
<span id="cb15-26">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">UID      =</span> temp_credentials<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>DbUser,</span>
<span id="cb15-27">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">PWD      =</span> temp_credentials<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>DbPassword,</span>
<span id="cb15-28">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Port     =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5439</span></span>
<span id="cb15-29">                      )</span></code></pre></div></div>
</div>
<div id="tabset-6-2" class="tab-pane" aria-labelledby="tabset-6-2-tab">
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install pyodbc boto3</span></code></pre></div></div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyodbc</span>
<span id="cb17-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> boto3</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build a token </span></span>
<span id="cb17-5">token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.generate_db_auth_token(DBHostname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo-cluster-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com'</span>, Port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5432</span>,DBUsername<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span>, Region<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us-east-2"</span>)</span>
<span id="cb17-6"></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the token with the ODBC connection </span></span>
<span id="cb17-8">con<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pyodbc.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(driver<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{PostgreSQL}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb17-9">                   database<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo_db'</span>,</span>
<span id="cb17-10">                   uid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'username'</span>,</span>
<span id="cb17-11">                   pwd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>token,</span>
<span id="cb17-12">                   server<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo-cluster-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com'</span>,</span>
<span id="cb17-13">                   port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5432</span>,</span>
<span id="cb17-14">                   )</span>
<span id="cb17-15"></span>
<span id="cb17-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Gather temp credentials </span></span>
<span id="cb17-17">DB_NAME <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo_db'</span></span>
<span id="cb17-18">CLUSTER_IDENTIFIER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo-cluster'</span></span>
<span id="cb17-19">DB_USER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'username'</span></span>
<span id="cb17-20">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boto3.client(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'redshift'</span>, region_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us-east-2"</span>)</span>
<span id="cb17-21">cluster_creds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.get_cluster_credentials(DbUser<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DB_USER, DbName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DB_NAME, ClusterIdentifier<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CLUSTER_IDENTIFIER, AutoCreate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb17-22">temp_user <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cluster_creds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DbUser'</span>]</span>
<span id="cb17-23">temp_password <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cluster_creds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DbPassword'</span>]</span>
<span id="cb17-24"></span>
<span id="cb17-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the temp credentials with the ODBC connection</span></span>
<span id="cb17-26">con<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pyodbc.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(driver<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{Redshift}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb17-27">                   database<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DB_NAME,</span>
<span id="cb17-28">                   uid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>temp_user,</span>
<span id="cb17-29">                   pwd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>temp_password,</span>
<span id="cb17-30">                   server<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo-cluster.cyvu3e2plbhb.us-east-2.redshift.amazonaws.com'</span>,</span>
<span id="cb17-31">                   port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5439</span>,</span>
<span id="cb17-32">                   )</span></code></pre></div></div>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="one-to-many-credential-examples" class="level2">
<h2 class="anchored" data-anchor-id="one-to-many-credential-examples">One-to-many Credential Examples</h2>
<section id="other-environments-ie-connect-etc" class="level3">
<h3 class="anchored" data-anchor-id="other-environments-ie-connect-etc">Other Environments (IE Connect, etc)</h3>
<p>In this section we will describe authentication patterns for all other environments for example production environments, deployed environments, etc. In these cases typically the code is executed by a service account making only non-interactive authentication methods possible.</p>
</section>
<section id="example-access-patterns-1" class="level3">
<h3 class="anchored" data-anchor-id="example-access-patterns-1">Example Access Patterns</h3>
<section id="trusted-creds-iam" class="level4">
<h4 class="anchored" data-anchor-id="trusted-creds-iam">Grant trusted access to resource from VM using an IAM instance profile and policy</h4>
<p>Trusted access between the server running the content and the resource can be granted using an IAM instance profile and policy. In this case all content running on the server has access to the resource.</p>
<section id="aws-configuration-1" class="level5">
<h5 class="anchored" data-anchor-id="aws-configuration-1">AWS Configuration</h5>
<p>Instead of assigning the roles to the IAM user it can be assigned to the AWS EC2 instance, slurm environment, or k8s cluster to allow access. This will broadlly allow access to that resource specifically for only that environment.</p>
<p>In this case the admin will need to:</p>
<ul>
<li>Create an AWS role that has the correct trusted entity type (for example, EC2)</li>
<li>Create a custom policy that provides access to the needed resources</li>
<li>Attach the IAM role to the environment (for example, the EC2 server)</li>
<li>Verify network connectivity</li>
</ul>
<p>See the AWS <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html">use IAM roles to grant permissions to applications running on EC2 instances</a> and the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html">EC2 IAM roles</a> pages for more details.</p>
</section>
</section>
<section id="keypair-creds" class="level4">
<h4 class="anchored" data-anchor-id="keypair-creds">Developer Managed Credentials</h4>
<p>If granting access through a trusted relationship between the VM and the resource isn’t feasible, then a non-interactive authentication method can be used like a developer managed keypair using an AWS secret key and access key. However this approach comes with security risks if the keypair isn’t closely guarded. In this case <a href="https://solutions.posit.co/connections/db/best-practices/managing-credentials/">securing credentials</a> is critical.</p>
<p>The documentation for <a href="https://www.paws-r-sdk.com/">paws</a> and <a href="https://pypi.org/project/boto3/">boto3</a> have extensive examples using keypair authentication.</p>


</section>
</section>
</section>

 ]]></description>
  <category>code</category>
  <category>data</category>
  <guid>https://questionable.quarto.pub/blog/work/aws-data-sources.html</guid>
  <pubDate>Tue, 21 Jan 2025 07:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/aws-new-connection.png" medium="image" type="image/png" height="78" width="144"/>
</item>
<item>
  <title>Dealing with ssh keys with ansible and pulumi</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/ansible-and-pulumi-ssh-keys.html</link>
  <description><![CDATA[ 






<p>Very specific learning for the day but if you are trying to run pulumi-with-ansible IAC and in a world of ssh key pain this bypasses the ssh-agent:</p>
<p>Pulumi.yaml</p>
<pre><code>  keypath: "~/.ssh/mykey.pem"</code></pre>
<p><strong>main</strong>.py</p>
<pre><code>pulumi.export('keypath', config.require("keypath"))</code></pre>
<p>playbook.yml</p>
<pre><code>    ansible_ssh_private_key_file: "{{ keypath }}"</code></pre>
<p>Or just add things properly to your ssh-agent (even better, start using the config):</p>
<pre><code># Set permissions 
chmod -R 400 ~/.ssh/mykey.pem # 600 is also fine

# Add keys to ssh-agent 
ssh-agent -s
eval `ssh-agent -s`
ssh-add ~/.ssh/mykeyaws.pem
ssh-add ~/.ssh/mykeyazure.pem</code></pre>



 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/ansible-and-pulumi-ssh-keys.html</guid>
  <pubDate>Wed, 02 Oct 2024 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Handling secrets and pinning files to Posit Connect</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/secrets-and-pinning-files.html</link>
  <description><![CDATA[ 






<p>Imagine a world where you can sleep peacefully at night knowing that your secrets (that you need for connecting to data sources) are being handled responsibly and will never leak.</p>
<section id="built-in-with-your-version-control" class="level2">
<h2 class="anchored" data-anchor-id="built-in-with-your-version-control">Built in with your version control</h2>
<p>Github has secret scanning for enterprise accounts or public repositories: <a href="https://docs.github.com/en/code-security/secret-scanning/introduction/about-secret-scanning" class="uri">https://docs.github.com/en/code-security/secret-scanning/introduction/about-secret-scanning</a></p>
</section>
<section id="environment-variables" class="level2">
<h2 class="anchored" data-anchor-id="environment-variables">Environment variables</h2>
<p>When working with pulling data from secure databases or other sources a developer might find themselves in a situation of needing to provide very sensitive information, such as a password or a token, in order to access the data that is needed or to successfully deploy a project. Handling those secrets in way that doesn’t expose them in the code directly is critical and where using <a href="https://db.rstudio.com/best-practices/deployment/">environmental variable’s for securing sensitive variables</a> is strongly recommended.</p>
<p>Additionally there may be parameters that are often needed that can be accessed as a variable more easily rather than having to type in every time.</p>
<p>For both of these cases knowing how environment variables can be leveraged can be very rewarding and it is surprising how little effort it can to take to set up.</p>
</section>
<section id="python-os-package" class="level2">
<h2 class="anchored" data-anchor-id="python-os-package">Python: <code>os</code> package</h2>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Setting a new environment variable</span></span>
<span id="cb1-4">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"API_KEY"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"YOUR_API_KEY"</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieving the environment variable</span></span>
<span id="cb1-7">var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable_name"</span>]</span></code></pre></div></div>
</section>
<section id="r-usethis-package" class="level2">
<h2 class="anchored" data-anchor-id="r-usethis-package">R: <code>usethis</code> package</h2>
<p><code>usethis</code> has a function for creating and editing the .Renviron file:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(usethis)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Edit the global .Renviron file</span></span>
<span id="cb2-4">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edit_r_environ</span>()</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Edit the project specific .Renviron file</span></span>
<span id="cb2-7">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edit_r_environ</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scope =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"project"</span>)</span></code></pre></div></div>
<p>Add the variables to that file in the format variable_name = “variable_value” and save it. Restart the session so the new environment variables will be loaded with ctrl shift f10 or through the RStudio IDE with session -&gt; restart R.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Saved variables can be accessed with:</span></span>
<span id="cb3-2">variable_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable_name"</span>)</span></code></pre></div></div>
<p>While it’s recommended to add env vars to the environ file and not use in your code (otherwise it defeats the point), you can set an env var on the fly with:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.setenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>)</span></code></pre></div></div>
</section>
<section id="r-working-with-the-.renviron-file" class="level2">
<h2 class="anchored" data-anchor-id="r-working-with-the-.renviron-file">R: Working with the .Renviron file</h2>
<p>When R starts it loads a bunch of variables, settings, and configs for the user. This is really powerful and some of the magic for how it can work so apparently seamlessly.</p>
<p>However for power users we can leverage these behind the scenes config files so that we can include such things as variables in our project without including it in our code. The .Renviron file is the one most commonly interacted with for adding sensitive variables to a project in order to protect them from being exposed in the code.</p>
<p>With increased use of these behind the scenes config files and the growing direction of arranging code into projects there was the development of giving, on startup, having multiple options for each config file that can be loaded depending on what the user specifies. Broadly speaking there are two levels of config files: - User - Project</p>
<p>On startup, since R is trying to make things as seamless as possible for the user, it will use some logic to figure out which config to use. It will assume that if a project level config exists it should load that one (and not any others). If that project level config doesn’t exist, then it will default to the user level config. For more details on the different config files and the nuances see <a href="https://support.rstudio.com/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf">Managing R with .Rprofile, .Renviron, Rprofile.site, Renviron.site, rsession.conf, and repos.conf</a>.</p>
<p>Just to re-iterate the key takeaway: When in doubt note that the <strong>project level file is given preference over user level config files</strong>. Only if the project level config file doesn’t exist will the user level file be sourced/pulled in.</p>
<p>There is a really excellent <a href="https://rviews.rstudio.com/2017/04/19/r-for-enterprise-understanding-r-s-startup/">overview of R’s startup process here</a> but in short it can be thought of this way:</p>
<section id="example-with-a-user-level-.renviron-config-file" class="level4">
<h4 class="anchored" data-anchor-id="example-with-a-user-level-.renviron-config-file">Example with a user level .Renviron config file</h4>
<p>usethis has a function for creating and editing the .Renviron file</p>
<pre><code>library(usethis)
usethis::edit_r_environ()</code></pre>
<p>Add the variables to that file in the format <code>variable_name = "variable_value"</code> and save it. Restart the session so the new environment variables will be loaded with ctrl shift f10 or through the RStudio IDE</p>
<p>Saved variables can be accessed with:</p>
<pre><code>variable_name &lt;- Sys.getenv("variable_name")</code></pre>
<p>When working in a more complex environment structure where separate project, site, and user environments are being support <a href="https://support.rstudio.com/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf">this support article has useful information</a> with a <a href="https://rviews.rstudio.com/2017/04/19/r-for-enterprise-understanding-r-s-startup/">deeper dive into R’s startup here</a>.</p>
</section>
<section id="example-with-a-project-level-.renviron-config-file" class="level4">
<h4 class="anchored" data-anchor-id="example-with-a-project-level-.renviron-config-file">Example with a project level .Renviron config file</h4>
<p>Storing secrets securely can be done using the <a href="https://usethis.r-lib.org/reference/edit.html">edit_r_environ function from the usethis package</a>. For more overview see <a href="https://support.rstudio.com/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf">this overview</a>.</p>
<p>Example:</p>
<pre><code>library(usethis)
usethis::edit_r_environ(scope = "project")</code></pre>
<p>Accessing those stored parameters later can be done using <code>Sys.getenv("DB_NAME")</code>.</p>
<p>Be sure to add the project level .Renviron file to your .gitignore so you aren’t exposing secrets when code is being saved to your git repository. Similarly this can be done with the <code>edit_git_ignore(scope = c("user", "project"))</code> function. For more best practices see <a href="https://db.rstudio.com/best-practices/managing-credentials">securing credentials</a>.</p>
<p>After updating these files the project should be closed and re-opened for any additions to be pulled in. One way to do this is through session -&gt; restart R (ctrl-shift-f10).</p>
</section>
<section id="gitignore" class="level4">
<h4 class="anchored" data-anchor-id="gitignore">Gitignore</h4>
<p>While typically explicitly listing the file name is the desired addition, wildcards can be added to exclude a type of file. For example: <code>*.html</code>.</p>
<p>Example excluding a number of pieces that would be undesirable to check into version control:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>.gitignore</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb8" data-filename=".gitignore" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># History files</span></span>
<span id="cb8-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.Rhistory</span></span>
<span id="cb8-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.Rapp.history</span></span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Session Data files</span></span>
<span id="cb8-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.RData</span></span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example code in package build process</span></span>
<span id="cb8-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">*-Ex.R</span></span>
<span id="cb8-10"></span>
<span id="cb8-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output files from R CMD build</span></span>
<span id="cb8-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/*.tar.gz</span></span>
<span id="cb8-13"></span>
<span id="cb8-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output files from R CMD check</span></span>
<span id="cb8-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/*.Rcheck/</span></span>
<span id="cb8-16"></span>
<span id="cb8-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># RStudio files</span></span>
<span id="cb8-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.Rproj.user/</span></span>
<span id="cb8-19"></span>
<span id="cb8-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># produced vignettes</span></span>
<span id="cb8-21"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">vignettes/*.html</span></span>
<span id="cb8-22"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">vignettes/*.pdf</span></span>
<span id="cb8-23"></span>
<span id="cb8-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OAuth2 token, see https://github.com/hadley/httr/releases/tag/v0.3</span></span>
<span id="cb8-25"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.httr-oauth</span></span>
<span id="cb8-26"></span>
<span id="cb8-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># knitr and R markdown default cache directories</span></span>
<span id="cb8-28"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/*_cache/</span></span>
<span id="cb8-29"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/cache/</span></span>
<span id="cb8-30"></span>
<span id="cb8-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Temporary files created by R markdown</span></span>
<span id="cb8-32"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">*.utf8.md</span></span>
<span id="cb8-33"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">*.knit.md</span></span>
<span id="cb8-34"></span>
<span id="cb8-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shiny token, see https://shiny.rstudio.com/articles/shinyapps.html</span></span>
<span id="cb8-36"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rsconnect/</span></span>
<span id="cb8-37"></span>
<span id="cb8-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Deployment details from rsconnect-python</span></span>
<span id="cb8-39"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rsconnect-python/</span></span>
<span id="cb8-40"></span>
<span id="cb8-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Temporary files</span></span>
<span id="cb8-42"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.DS_Store</span></span>
<span id="cb8-43"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">__pycache__</span></span>
<span id="cb8-44"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.ipynb_checkpoints</span></span>
<span id="cb8-45"></span>
<span id="cb8-46"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rmarkdown-notebook/flights.csv</span></span>
<span id="cb8-47"></span>
<span id="cb8-48"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.venv</span></span>
<span id="cb8-49"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">venv</span></span>
<span id="cb8-50"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.env</span></span>
<span id="cb8-51"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.Rprofile</span></span>
<span id="cb8-52"></span>
<span id="cb8-53"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/.luarc.json</span></span>
<span id="cb8-54"></span>
<span id="cb8-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OS and python artifacts</span></span>
<span id="cb8-56"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.DS_Store</span></span>
<span id="cb8-57"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">__pycache__/</span></span>
<span id="cb8-58"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">*.py[cod]</span></span>
<span id="cb8-59"></span>
<span id="cb8-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># docs artifacts</span></span>
<span id="cb8-61"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/docs/_site</span></span>
<span id="cb8-62"></span>
<span id="cb8-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Package Manager license</span></span>
<span id="cb8-64"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/ppm.lic</span></span></code></pre></div></div>
</div>
</section>
<section id="example-with-project-level-github-secrets-for-environment-variables" class="level4">
<h4 class="anchored" data-anchor-id="example-with-project-level-github-secrets-for-environment-variables">Example with project level github secrets for environment variables</h4>
<p>Another approach, particularly useful when automating testing and deployments using github actions, is to include the environment variables as secrets. Once this has been added through the git UI for the project they can then be referenced in the relevant deployment .yaml file with something like <code>CONNECT_ENV_SET_ZD_USER: ${{ secrets.ZD_USER }}</code>. In the R scripts they will be referenced as usual with something like <code>Sys.getenv("DB_NAME")</code>.</p>
</section>
<section id="references-for-adding-environment-variables-through-the-connect-ui" class="level4">
<h4 class="anchored" data-anchor-id="references-for-adding-environment-variables-through-the-connect-ui">References for adding environment variables through the Connect UI</h4>
<p>Starting with version 1.6, RStudio Connect allows <a href="https://docs.rstudio.com/connect/admin/security-and-auditing/#application-environment-variables">Environment Variables</a>. The variables are encrypted on-disk, and in-memory.</p>
<p>This can be done at the project level with <a href="https://db.rstudio.com/best-practices/deployment/">securing deployment</a> through the <a href="https://support.rstudio.com/hc/en-us/articles/228272368-Managing-your-content-in-RStudio-Connect">Connect UI</a>.</p>
</section>
</section>
<section id="handling-secret-files" class="level2">
<h2 class="anchored" data-anchor-id="handling-secret-files">Handling secret files</h2>
<p>Options:</p>
<ul>
<li>base64 encode the json string, set an environment variable, read the env var, and base64 decode it - If it fits in an env var, you could always cache it from the env var to your temp dir right before you use</li>
<li>Save it somewhere on Connect, let developers know the path</li>
<li>Use a supervisor script to save into the sandbox environment</li>
<li>Possibly save it as a pin?</li>
</ul>
<section id="useful-linux-commands-and-generating-a-dummy-key-file" class="level3">
<h3 class="anchored" data-anchor-id="useful-linux-commands-and-generating-a-dummy-key-file">Useful linux commands and generating a dummy key file</h3>
<pre><code># cd ~/.ssh
openssl genrsa -out test_key 4096
openssl rsa -in test_key -pubout -out test_key.pub
openssl pkcs8 -topk8 -inform pem -in test_key -outform PEM -v2 aes-256-cbc -out test_key.p8</code></pre>
<ul>
<li>The second command generate a RDS private key (unencrypted). https://www.openssl.org/docs/man1.1.1/man1/openssl-genrsa.html</li>
<li>The third command generate a public key for the private key above.</li>
<li>The fourth command generate an encrypted private key using a cipher aes-256-cbc. Please refer the following URL for more about AES 256 CBC.https://datatracker.ietf.org/doc/html/rfc3602</li>
</ul>
<pre><code># Set permissions 
chmod -R 400 ~/.ssh/mykey.pem 

# Add key to ssh-agent 
ssh-agent -s
eval `ssh-agent -s`
ssh-add ~/.ssh/mykey.pem</code></pre>
<p>If you already have a ssh key and want to get the key.pub public key info:</p>
<pre><code>ssh-keygen -y -f ~/.ssh/mykey.pem
ssh-keygen -y -f ~/.ssh/mykey.pem &gt; key.pub</code></pre>
</section>
<section id="pin-the-key-to-connect" class="level3">
<h3 class="anchored" data-anchor-id="pin-the-key-to-connect">Pin the key to Connect</h3>
<section id="setup" class="level4">
<h4 class="anchored" data-anchor-id="setup">Setup</h4>
<p>Env variables that need to be set are:</p>
<pre><code>CONNECT_SERVER=&lt;server, eg https://colorado.posit.co&gt;
CONNECT_API_KEY=&lt;API key from Connect server&gt;</code></pre>
</section>
<section id="code-for-pinning-a-file" class="level4">
<h4 class="anchored" data-anchor-id="code-for-pinning-a-file">Code for pinning a file</h4>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb13-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb13-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(pins)</span>
<span id="cb13-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rsconnect)</span>
<span id="cb13-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(usethis)</span>
<span id="cb13-8"></span>
<span id="cb13-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Check our environment variables</span></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># usethis::edit_r_environ()</span></span>
<span id="cb13-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Needs: </span></span>
<span id="cb13-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CONNECT_SERVER=&lt;server&gt;</span></span>
<span id="cb13-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CONNECT_API_KEY=&lt;API key from Connect server&gt;</span></span>
<span id="cb13-14"></span>
<span id="cb13-15">board <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">board_connect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">auth =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"envvar"</span>)</span>
<span id="cb13-16"></span>
<span id="cb13-17">board <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_upload</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paths=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_key"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_key"</span>)</span>
<span id="cb13-18">board <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_upload</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paths=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_key.p8"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_key-p8"</span>)</span>
<span id="cb13-19">board <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_upload</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paths=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_key.pub"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_key-pub"</span>)</span>
<span id="cb13-20"></span>
<span id="cb13-21">cache_path<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>board <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_download</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_key"</span>)</span>
<span id="cb13-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(cache_path)</span></code></pre></div></div>
</section>
<section id="python" class="level4">
<h4 class="anchored" data-anchor-id="python">Python</h4>
<p>Python pins package has parity: <a href="https://rstudio.github.io/pins-python/reference/pin_upload.html#pins.boards.BaseBoard.pin_upload" class="uri">https://rstudio.github.io/pins-python/reference/pin_upload.html#pins.boards.BaseBoard.pin_upload</a></p>
</section>
<section id="encode-key-file-as-base64-json-string" class="level4">
<h4 class="anchored" data-anchor-id="encode-key-file-as-base64-json-string">Encode key file as base64 json string</h4>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">librar</span>(readr)</span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(openssl)</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Locally, encode the key and save as environment variable</span></span>
<span id="cb14-5">key <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> openssl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">base64_encode</span>(readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_key.pub"</span>))</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save as env var</span></span>
<span id="cb14-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.setenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TEST_SSH_KEY"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"123"</span>)</span>
<span id="cb14-9">test_key_set <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TEST_SSH_KEY"</span>)</span>
<span id="cb14-10"></span>
<span id="cb14-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a tempfile in the sandboxed current location</span></span>
<span id="cb14-12">cached_key <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>()</span>
<span id="cb14-13"></span>
<span id="cb14-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cache the SSH file from the environment variable</span></span>
<span id="cb14-15">readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_file</span>(openssl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">base64_decode</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TEST_SSH_KEY"</span>)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> cached_key)</span></code></pre></div></div>
<p>it may be useful to nest in an if statement so that this only happens on Connect, but on Workbench it will still use the managed credentials:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use SSH key if on Connect, otherwise use managed credentials</span></span>
<span id="cb15-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RSTUDIO_PRODUCT"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CONNECT"</span>){</span>
<span id="cb15-3">}</span></code></pre></div></div>


</section>
</section>
</section>

 ]]></description>
  <category>code</category>
  <category>data</category>
  <category>security</category>
  <guid>https://questionable.quarto.pub/blog/work/secrets-and-pinning-files.html</guid>
  <pubDate>Tue, 01 Oct 2024 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>R projects set up and maintenance</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/r-projects-setup.html</link>
  <description><![CDATA[ 






<p>Have you ever tried to use someone else’s repo and run into issues with package installation and breaking package versions? Or tried to work on a really old repository and been foiled while trying to set it up?</p>
<p>Projects have a standards problem - we need to realize that all the work we are doing exist in the framework of a project. By defining the elements of a project we can identify the parts that need to be made transparent and the tools (renv/venv) for making that happen.</p>
<p>What is a project?</p>
<ul>
<li>Code, data files, config files, images/assets</li>
<li>Defined / reproducible environment</li>
<li>Defined language version</li>
<li>Defined package versions and requirements</li>
</ul>
<p>What it’s not:</p>
<ul>
<li>Your editor</li>
<li>The actual packages / repositories</li>
<li>System dependencies</li>
</ul>
<section id="reading" class="level1">
<h1>Reading</h1>
<p>Environment management:</p>
<ul>
<li>Get started with renv in the RStudio IDE: <a href="https://docs.posit.co/ide/user/ide/guide/environments/r/renv.html">https://docs.posit.co/ide/user/ide/guide/environments/r/renv.html</a></li>
<li>You should be using renv: <a href="https://www.youtube.com/watch?v=GwVx_pf2uz4">https://www.youtube.com/watch?v=GwVx_pf2uz4</a></li>
<li>Using Public Package Manager : <a href="https://support.rstudio.com/hc/en-us/articles/360046703913-FAQ-for-RStudio-Public-Package-Manager">https://support.rstudio.com/hc/en-us/articles/360046703913-FAQ-for-RStudio-Public-Package-Manager</a></li>
</ul>
<section id="reproducible-package-environments-for-r---at-a-glance" class="level2">
<h2 class="anchored" data-anchor-id="reproducible-package-environments-for-r---at-a-glance">Reproducible package environments for R - At a glance</h2>
<p>Step 1: Use pre-compiled packages</p>
<ul>
<li>Go to Public Package Manager</li>
<li>Click on Get Started -&gt; Setup -&gt; Distribution and select your OS -&gt; Select Latest or Freeze and follow the instructions below the calendar.</li>
<li>For example:</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">REPO_NAME =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://packagemanager.rstudio.com/all/latest"</span>))</span></code></pre></div></div>
<p>Step 2: Use environment tracking</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set up a new version controlled R project and install renv:</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"renv"</span>)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(renv)</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize your project with renv and take a snapshot:</span></span>
<span id="cb2-6">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">init</span>()</span>
<span id="cb2-7">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">snapshot</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update all packages, or revert back to an earlier snapshot:</span></span>
<span id="cb2-10">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span>()</span>
<span id="cb2-11">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">revert</span>()</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># History is saved into version control:</span></span>
<span id="cb2-14">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">history</span>()</span></code></pre></div></div>
<p>Step 3: Easy collaboration</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Have your colleague configure their repository to match yours: </span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">REPO_NAME =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://packagemanager.rstudio.com/all/latest"</span>)) </span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Send a colleague the link to your project on git, they'll restore your environment with:</span></span>
<span id="cb3-5">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restore</span>()</span></code></pre></div></div>
</section>
<section id="r-projects-setup" class="level2">
<h2 class="anchored" data-anchor-id="r-projects-setup">R projects setup</h2>
<p>Setup the <code>renv</code> environment:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">activate</span>()</span>
<span id="cb4-2">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restore</span>()</span></code></pre></div></div>
<p>To run the app either open <code>app/app.R</code> and click the “Run App” button at the top of the IDE code pane or use:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runApp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"app"</span>)</span></code></pre></div></div>
</section>
<section id="deployment" class="level2">
<h2 class="anchored" data-anchor-id="deployment">Deployment</h2>
<section id="push-button" class="level3">
<h3 class="anchored" data-anchor-id="push-button">Push Button</h3>
<p>Open <code>app/app.R</code> and use the blue publish icon in the upper right corner of the IDE code pane.</p>
</section>
<section id="rsconnect-package" class="level3">
<h3 class="anchored" data-anchor-id="rsconnect-package">rsconnect package</h3>
<p>You can also deploy using the rsconnect package:</p>
<pre><code>rsconnect::deployApp(
  appDir = "app",
  appTitle = "Shiny Penguins"
)</code></pre>
</section>
<section id="git-backed" class="level3">
<h3 class="anchored" data-anchor-id="git-backed">Git-backed</h3>
<p>Update the code, and then run:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">rsconnect<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeManifest</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"app"</span>)</span></code></pre></div></div>
<p>Commit the new <code>manifest.json</code> file to the git repo along with the code.</p>
</section>
</section>
<section id="project-updates" class="level2">
<h2 class="anchored" data-anchor-id="project-updates">Project updates</h2>
<p>Use <a href="https://rstudio.github.io/renv/articles/renv.html">renv</a> to record the r package versions used</p>
<p>Create a <a href="https://docs.posit.co/connect/user/git-backed/#creating-a-manifest-file-from-r"><code>manifest.json</code> file</a> to support git-backed publishing</p>
</section>
<section id="all-about-renv" class="level2">
<h2 class="anchored" data-anchor-id="all-about-renv">All about renv</h2>
<p><strong>Why use renv?</strong></p>
<p>There is an excellent video by David Aja discussing why he started using renv at the 2022 RStudio Conference <a href="https://www.rstudio.com/conference/2022/talks/you-should-use-renv/">here</a>.</p>
<p>Ever had your code mysteriously stop working or start producing different results after upgrading packages, and had to spend hours debugging to find which package was the culprit? Ever tried to collaborate on code just to get stuck on trying to decipher various package dependencies?</p>
<p><a href="https://rstudio.github.io/renv/articles/renv.html">renv</a> helps you track and control package changes - making it easy to revert back if you need to. It works with your current methods of installing packages (<code>install.packages()</code>), and was designed to work with most data science workflows.</p>
<p>Who shouldn’t use renv?</p>
<ul>
<li>Package developers</li>
<li>?</li>
</ul>
<p># Terms</p>
<ul>
<li>R Project - a special kind of directory of files and supporting functionality.</li>
<li>Package - a collection of functions beyond base R that developers can install and use.</li>
<li>Library - a directory containing installed packages.</li>
</ul>
</section>
</section>
<section id="workflow" class="level1">
<h1>Workflow</h1>
<p>New project -&gt; updates -&gt; reverting -&gt; advanced</p>
</section>
<section id="new-project" class="level1">
<h1>New project</h1>
<p>Initialize your project with:</p>
<pre><code>library(renv)
renv::init()</code></pre>
<p>Look at the renv.lock file and see the information that has been captured about the packages supporting your project.</p>
</section>
<section id="making-updates" class="level1">
<h1>Making updates</h1>
<p>Try installing a new package and then look at the renv.lock file. What did you expect to happen? What do you see?</p>
<p>Now try running <code>renv::snapshot()</code>. What do you see now when you look at the renv.lock file?</p>
<p>The renv lock file is updated by you when you run the command to snapshot. This means you can update packages, or install new packages, without changing your lock file.</p>
</section>
<section id="how-to-revert" class="level1">
<h1>How to revert</h1>
<p>Practice updating the packages your project relies on, each time saving to git. You can see the history of your changes with:</p>
<p><code>renv::history()</code></p>
<p>If you want to revert back to an earlier snapshot you can do that with:</p>
<pre><code>## Revert to the most recent snapshot 
renv::revert()

## Alternatively we can revert to a specific snapshot by specifying the commit: 
db &lt;- renv::history()

# choose an older commit
commit &lt;- db$commit[5]

# revert to that version of the lockfile
renv::revert(commit = commit)</code></pre>
<p>Note: Currently, only Git repositories are supported by renv::history() and renv::revert().</p>
</section>
<section id="advanced-renv" class="level1">
<h1>Advanced renv</h1>
<p>There are a couple other commands that can be used depending on your workflow that are useful to know about.</p>
<p>Say that your organization has a managed package host, for example Package Manager, and is using the <a href="strategy">Shared Baseline</a>. Meaning that all developers in the organization are pointed to a snapshot of available packages frozen to a particular date when the managing team had intentionally tested and made them available. On some cadence, let’s say quarterly, the managing team goes through, performs testing again, and provides a new updated snapshot that is available for developers to switch to. There are a lot of advantages in switching with new features, resolved bugs, etc.</p>
<p>In order for developers to know that a new release has happened (that the local package dates are out of date in reference to the repo being pointed at) they can run:</p>
<pre><code>view(old.packages())</code></pre>
<p>The same process would be followed with then updating the packages, testing as needed, and then creating a new snapshot so the renv lock file is updated to the latest. This provides the added security that in case it does not pass testing the renv lock file will still point at the supported package versions and not the ones that caused the breakage.</p>
<p>One of the more recent releases of the renv package has included <a href="https://rstudio.github.io/renv/articles/profiles.html">having separate profiles for the project</a>. Meaning that a developer could have a production profile, a validation profile, and testing profile that can be easily switched between while working through their workflow towards deployment into production.</p>
<p>The renv.lock file can be manually changed to update the packages that are included with:</p>
<p><code>renv::modify()</code></p>
<p>Remove packages that are no longer needed with:</p>
<p><code>renv::clean()</code></p>
<p>Update everything to the latest for each package (according to the repository you are pointed at) with:</p>
<p><code>renv::update()</code></p>
</section>
<section id="troubleshooting" class="level1">
<h1>Troubleshooting</h1>
<p>Running a diagnostic:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diagnostics</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">project =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span></code></pre></div></div>
<p>Add more detail to logging:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">renv.download.trace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div></div>
<p>If you are having particular issue with a package and it keeps being pulled in from the cache then doing a complete purge and reinstall can be useful:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">purge</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stringr"</span>)</span>
<span id="cb13-2">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">purge</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stringi"</span>)</span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stringr"</span>)</span></code></pre></div></div>
<p><code>renv::purge</code> removes packages completely from the package cache (which may be shared across projects) rather than just removing the package from the project which is what <code>renv::remove</code> does. This can be useful if a package which had previously been installed in the cache has become corrupted or unusable, and needs to be re-installed.</p>
<p>It may also be useful to verify both the OS you are currently useing as well as checking that the repository you are pointing towards is using the correct OS if it is pulling in the binaries.</p>
<p>For debian/ubuntu distributions:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">lsb_release</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-a</span></span></code></pre></div></div>
<p>For other distributions (more broadly cross-linux compatible command):</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> /etc/os-release</span></code></pre></div></div>
<p>Check the repository being pointed to and update it to use the URL from your package manager instance:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'repos'</span>)</span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">REPO_NAME =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://packagemanager.posit.co/cran/__linux__/jammy/latest"</span>))</span></code></pre></div></div>
<p>Some additional options and settings:</p>
<ul>
<li><p><code>Renv</code> comes with an over-ride option for the repository that could be recommended for users to run prior to re-initializing projects: <a href="https://rstudio.github.io/renv/reference/config.html?q=OS#renv-config-repos-override" class="uri">https://rstudio.github.io/renv/reference/config.html?q=OS#renv-config-repos-override</a></p>
<ul>
<li>It was discussed in <a href="https://stackoverflow.com/questions/65326540/how-to-change-r-repository-cran-from-renv-lock-to-get-packages-from-an-internal">this stackoverflow post</a> with this example (run from console): <code>Sys.setenv("RENV_CONFIG_REPOS_OVERRIDE" = "your_private_package_repository_url")</code></li>
</ul></li>
<li><p>As of renv 0.13.0 where it can now construct a prefix based on fields within the system’s /etc/os-release file: <a href="https://rstudio.github.io/renv/reference/paths.html#sharing-state-across-operating-systems" class="uri">https://rstudio.github.io/renv/reference/paths.html#sharing-state-across-operating-systems</a></p></li>
</ul>
</section>
<section id="library-paths" class="level1">
<h1>Library paths</h1>
<p>Find where your library is:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.libPaths</span>()</span>
<span id="cb17-2">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/sagemaker-user/R/x86_64-pc-linux-gnu-library/4.2"</span></span>
<span id="cb17-3">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/opt/R/4.2.1/lib/R/library"</span> </span></code></pre></div></div>
<p>For example when working in a system that has a mounted share drive then would want to check that libraries are being written to that share so you get persistence. Typically this means writing to inside the home directory. Check mounted drives with: <code>df -h</code></p>
<p>The next thing to check is permissions, for example with this command that shows full directory tree permissions</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namei</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span> /home/sagemaker-user/test/r-examples</span></code></pre></div></div>
</section>
<section id="migrations" class="level1">
<h1>Migrations</h1>
<p>Consider using the script in this gist to migrate R and Python libraries: <a href="https://gist.github.com/edavidaja/5996ffeb042df2642c77c065c07f023d" class="uri">https://gist.github.com/edavidaja/5996ffeb042df2642c77c065c07f023d</a></p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete the existing libraries</span></span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlink</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"renv/library"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recursive=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set repo address</span></span>
<span id="cb19-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">REPO_NAME =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://colorado.posit.co/rspm/all/__linux__/jammy/latest"</span>))</span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (optional) add repo address to r profile</span></span>
<span id="cb19-8">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edit_r_profile</span>()</span>
<span id="cb19-9"></span>
<span id="cb19-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Restart R session</span></span>
<span id="cb19-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.rs.restartR</span>()</span>
<span id="cb19-12"></span>
<span id="cb19-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Re-install libraries</span></span>
<span id="cb19-14">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restore</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rebuild =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div></div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the existing venv</span></span>
<span id="cb20-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> .venv/bin/activate</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make note of all installed packages</span></span>
<span id="cb20-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip freeze <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> requirements-freeze.txt</span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Deactivate the venv and delete</span></span>
<span id="cb20-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">deactivate</span></span>
<span id="cb20-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-rf</span> .venv/</span>
<span id="cb20-10"></span>
<span id="cb20-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new virtual environment</span></span>
<span id="cb20-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv .venv</span>
<span id="cb20-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> .venv/bin/activate </span>
<span id="cb20-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span> pip wheel setuptools</span>
<span id="cb20-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> requirements-freeze.txt</span></code></pre></div></div>
</section>
<section id="repositories" class="level1">
<h1>Repositories</h1>
<p>Check your current repo with: <code>options('repos')</code></p>
<p>For example, you might see: <code>https://packagemanager.rstudio.com/all/latest</code> or <code>https://cran.rstudio.com/</code>.</p>
<p>Change your repo with: <code>options(repos = c(REPO_NAME = "https://colorado.rstudio.com/rspm/cran/__linux__/focal/2022-06-29"))</code> or <code>options(repos = c(REPO_NAME = "https://packagemanager.rstudio.com/all/latest"))</code></p>
<section id="troubleshooting-1" class="level2">
<h2 class="anchored" data-anchor-id="troubleshooting-1">Troubleshooting</h2>
<p>Bioconductor and Mass and R version: <a href="https://forum.posit.co/t/mass-not-available-for-r-4-3-3/188156/2" class="uri">https://forum.posit.co/t/mass-not-available-for-r-4-3-3/188156/2</a></p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>R</category>
  <guid>https://questionable.quarto.pub/blog/work/r-projects-setup.html</guid>
  <pubDate>Fri, 13 Sep 2024 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Python projects set up and maintenance</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/python-projects-setup.html</link>
  <description><![CDATA[ 






<p>Have you ever tried to use someone else’s repo and run into issues with package installation and breaking package versions? Or tried to work on a really old repository and been foiled while trying to set it up?</p>
<p>Projects have a standards problem - we need to realize that all the work we are doing exist in the framework of a project. By defining the elements of a project we can identify the parts that need to be made transparent and the tools (renv/venv) for making that happen.</p>
<p>What is a project?</p>
<ul>
<li>Code, data files, config files, images/assets</li>
<li>Defined / reproducible environment</li>
<li>Defined language version</li>
<li>Defined package versions and requirements</li>
</ul>
<p>What it’s not:</p>
<ul>
<li>Your editor</li>
<li>The actual packages / repositories</li>
<li>System dependencies</li>
</ul>
<section id="reproducible-package-environments-for-python---at-a-glance" class="level2">
<h2 class="anchored" data-anchor-id="reproducible-package-environments-for-python---at-a-glance">Reproducible package environments for Python - At a glance</h2>
<p>Step 1: Use scanned Python packages</p>
<p><code>Pip</code> can be already set up for you by your admins (with <code>sudo pip config set --global global.index-url https://pkg.current.posit.team/blocked-python/latest/simple</code>) whenever you use Workbench to use packages from package manager, no configuration needed. Check with:</p>
<pre><code>pip config list

# pip from stackoverflow article: https://stackoverflow.com/questions/51874974/how-can-i-get-pip-to-list-the-repositories-its-using
pip download --no-cache-dir "foo&lt;0" 2&gt;&amp;1 | grep Looking

# uv: https://docs.astral.sh/uv/guides/integration/alternative-indexes/
cat pyproject.toml</code></pre>
<p>As a user, configure pip to use your repository of choice with:</p>
<pre><code>pip config set global.index-url https://pkg.current.posit.team/blocked-python/latest/simple
pip config set --global global.trusted-host pkg.current.posit.team</code></pre>
<p>Alternatively, for a specific project add these to the top of the <code>requirements.txt</code> file</p>
<pre><code>--index-url https://pkg.current.posit.team/blocked-python/latest/simple
--trusted-host pkg.current.posit.team</code></pre>
<p>Step 2: Use environment tracking</p>
<pre><code># Activate your virtual environment: 
python -m venv .venv
. .venv/bin/activate</code></pre>
<pre><code># Take a snapshot of the environment: 
pip freeze &gt; requirements.txt</code></pre>
<p>Step 3: Easy collaboration</p>
<pre><code># Send a colleague the link to your project on git, they'll restore your environment with:
pip install -r requirements.txt</code></pre>
</section>
<section id="python-projects-setup" class="level2">
<h2 class="anchored" data-anchor-id="python-projects-setup">Python projects setup</h2>
<p>Setup the <code>venv</code> environment:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv .venv</span>
<span id="cb7-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">.</span> .venv/bin/activate</span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .venv\Scripts\activate # Windows</span></span></code></pre></div></div>
<p>Upgrade pip and then install needed packages:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span> pip</span>
<span id="cb8-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span> pip wheel setuptools rsconnect-python</span>
<span id="cb8-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> requirements.txt</span></code></pre></div></div>
<p>Run the application:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">shiny</span> run <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--reload</span> app.py</span></code></pre></div></div>
<p>Leave a virtual environment with:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">deactivate</span></span></code></pre></div></div>
</section>
<section id="jupyter-kernels-quarto-and-vs-code" class="level2">
<h2 class="anchored" data-anchor-id="jupyter-kernels-quarto-and-vs-code">Jupyter kernels, Quarto, and VS Code</h2>
<pre><code># Create a venv and install packages
python -m venv .venv
. .venv/bin/activate
source .venv/bin/activate
pip install -r requirements.txt
pip install --upgrade pip

# Register as kernel
pip install ipykernel jupyter
python3 -m ipykernel install --name "new_venv" --user

# Check for missing dependencies
python -m pip check

# Automatically uprade all packages from requirements.txt 
pip install pip-upgrader
pip-upgrade requirements.txt
pip install -r requirements.txt

# Freeze your requirements
pip freeze &gt; requirements.txt

Requires jupyter extension</code></pre>
<p>For quarto and vs code:</p>
<blockquote class="blockquote">
<p>If you create a virtual environment with venv in the env/ directory as described above, Visual Studio Code should automatically discover that environment when you load a workspace from the environment’s parent directory. Source: https://quarto.org/docs/projects/virtual-environments.html#vs-code</p>
</blockquote>
<pre><code>python3 -m venv env
source env/bin/activate
python3 -m pip freeze &gt; requirements.txt
python3 -m pip install -r requirements.txt</code></pre>
</section>
<section id="deploy" class="level2">
<h2 class="anchored" data-anchor-id="deploy">Deploy</h2>
<section id="rsconnect-python-cli" class="level3">
<h3 class="anchored" data-anchor-id="rsconnect-python-cli">rsconnect-python CLI</h3>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rsconnect</span> deploy shiny .</span></code></pre></div></div>
</section>
<section id="git-backed" class="level3">
<h3 class="anchored" data-anchor-id="git-backed">Git-backed</h3>
<p>Update the code, and then run:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rsconnect</span> write-manifest shiny <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--overwrite</span> .</span></code></pre></div></div>
<p>Commit the new <code>manifest.json</code> file to the git repo along with the code.</p>
</section>
</section>
<section id="project-updates" class="level2">
<h2 class="anchored" data-anchor-id="project-updates">Project updates</h2>
<p>Create the requirements file:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip freeze <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> requirements.txt</span></code></pre></div></div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rsconnect</span> write-manifest shiny .</span></code></pre></div></div>
<p>If you are running into deploy issues where there are breaking packages you can edit the requirements file explicitly:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># requirements.txt generated by rsconnect-python on 2022-09-21 14:59:58.865441</span></span>
<span id="cb17-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">streamlit</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>=1.11.0</span></code></pre></div></div>
<p>To use a Package Manager repository with a specific project defined by a <code>requirements.txt</code> file, add <code>-i [repositoryURL]</code> to the top of your file, for example:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-i</span> https://packagemanager.posit.co/pypi/latest/simple</span>
<span id="cb18-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pandas</span></span>
<span id="cb18-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">scipy</span></span></code></pre></div></div>
<p>How to configure a pypi repository globally (using pip.conf): <a href="https://docs.posit.co/resources/install-python/#optional-configure-a-pypi-repository" class="uri">https://docs.posit.co/resources/install-python/#optional-configure-a-pypi-repository</a></p>
</section>
<section id="troubleshooting" class="level2">
<h2 class="anchored" data-anchor-id="troubleshooting">Troubleshooting</h2>
<section id="issues-with-python-not-being-on-path" class="level3">
<h3 class="anchored" data-anchor-id="issues-with-python-not-being-on-path">Issues with Python not being on path</h3>
<p>Set it manually to an installed Python version with:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">alias</span> python=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/opt/python/3.9.17/bin/python"</span></span></code></pre></div></div>
<p>Set it in your .bashrc on mac or linux so that it is set for your profile every time you log in (typically this is located in the root directory of your home folder):</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add this to your .bashrc</span></span>
<span id="cb20-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">PATH</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/opt/python/3.11.9/bin:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$PATH</span></span></code></pre></div></div>
<p>Check for the available python versions (if typically installed):</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-ld</span> /opt/python/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div></div>
</section>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<p><a href="https://docs.posit.co/connect/user/shiny-python/">Posit Connect User Guide: Shiny for Python</a></p>


</section>

 ]]></description>
  <category>code</category>
  <category>python</category>
  <guid>https://questionable.quarto.pub/blog/work/python-projects-setup.html</guid>
  <pubDate>Fri, 13 Sep 2024 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Job templating in Kubernetes</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/job-templating-k8s.html</link>
  <description><![CDATA[ 






<p>This short writeup addresses a need to add an additional label to Workbench sessions started in a kubernetes environment. Specifically this was for an environemnt where an external Workbench server was launching sessions into a Kubernetes cluster. The recommended way to do this is to use job templating.</p>
<section id="job-templating-for-custom-labels-for-posit-workbench-with-k8s" class="level2">
<h2 class="anchored" data-anchor-id="job-templating-for-custom-labels-for-posit-workbench-with-k8s">Job templating for custom labels for Posit Workbench with k8s</h2>
<p>These are the granular steps for taking advantage of <a href="https://docs.posit.co/ide/server-pro/job_launcher/kubernetes_plugin.html#kube-templating">kubernetes object templating</a> that would work with an external Workbench instance launching into k8s:</p>
<ol type="1">
<li>Add to <code>launcher.kubernetes.conf</code>, <code>use-templating = 1</code></li>
<li>Use the launcher CLI to create the <code>job.tpl</code> and <code>service.tpl</code> files (see below for an example)</li>
<li>Confirm that the version called out in <code>job.tpl</code> and <code>service.tpl</code> (using <code>head job.tpl</code> and <code>head service.tpl</code> for example) are compatible with your workbench version (version 2.3.1 is latest)</li>
<li>Create <code>rstudio-library-templates-data.tpl</code> - for now this is a helm-only construct so it will need to be copied from the helm output (<a href="https://github.com/rstudio/helm/tree/main/charts/rstudio-workbench">helm repo</a>) (see example below for doing this with the <code>helm template</code> command)</li>
<li>Copy <code>job.tpl</code>, <code>service.tpl</code>, and <code>rstudio-library-templates-data.tpl</code> into the launcher scratch directory on the host machine (in this case your Workbench server outside of k8s) (see below for default for where this is located) and make sure that rstudio-server has read/write access</li>
</ol>
<p>For adding the new labels/values, here are good options:</p>
<ul>
<li>Modify <code>rstudio-library-templates-data.tpl</code> directly (either in the header bit, or lower under values/labels)</li>
<li>Modify the values in the helm values file (<a href="https://github.com/rstudio/helm/blob/5fb2ad5cecf84680c8e64e4d8123df9d4e0c1cc7/charts/rstudio-workbench/values.yaml#L82-L109">example</a>)</li>
<li>Recommended: Add the values at time of making the template, IE with <code>--set launcher.templateValues.job.labels.test=value \</code> (see below)</li>
</ul>
<p>From talking with a colleague they shared this example using helm to create the template with the added label values:</p>
<pre><code>helm template my-release rstudio/rstudio-workbench \
 --set launcher.useTemplates=true \
 --set launcherPem=test \
 --set session.defaultConfigMount=false \
 --set launcher.templateValues.job.labels.test=value \
 --set launcher.templateValues.job.labels.other=something-else \
 | less</code></pre>
<p>In that helm example:</p>
<ul>
<li><code>session.defaultConfigMount=false</code> prevents defining volumes and volumeMounts that are only relevant for the helm chart</li>
<li><code>launcherPem=test</code> speeds up templating</li>
<li><code>launcher.useTemplates=true</code> turns on templating (instead of job json overrides)</li>
</ul>
<p><strong>What if things go wrong?</strong></p>
<p>The rstudio-kubernetes-launcher CLI can <a href="https://docs.posit.co/ide/server-pro/job_launcher/kubernetes_plugin.html#validating-templates">verify templates</a> now!</p>
<p><strong>Playing with the rstudio-kubernetes-launcher CLI:</strong></p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/usr/lib/rstudio-server/bin/rstudio-kubernetes-launcher</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--help</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/usr/lib/rstudio-server/bin/rstudio-kubernetes-launcher</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--generate-templates</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--scratch-path</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/tmp/hello</span></code></pre></div></div>
<p><strong>Default scratch path:</strong></p>
<pre><code> # mount into the default scratch-path
 - name: session-templates
  mountPath: "/var/lib/rstudio-launcher/Kubernetes/rstudio-library-templates-data.tpl"
  subPath: "rstudio-library-templates-data.tpl"
 - name: session-templates
  mountPath: "/var/lib/rstudio-launcher/Kubernetes/job.tpl"
  subPath: "job.tpl"
 - name: session-templates
  mountPath: "/var/lib/rstudio-launcher/Kubernetes/service.tpl"
  subPath: "service.tpl"</code></pre>
</section>
<section id="another-approach-using-json-over-rides-on-posit-workbench-with-k8s" class="level2">
<h2 class="anchored" data-anchor-id="another-approach-using-json-over-rides-on-posit-workbench-with-k8s">Another approach using json over-rides on Posit Workbench with k8s</h2>
<p>Potentially json over-rides could work but my understanding is that this would overwrite ALL labels.</p>
<p>use this to add a label:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/rstudio/launcher.kubernetes.profiles.conf</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" data-filename="/etc/rstudio/launcher.kubernetes.profiles.conf" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">job-json-overrides=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/spec/template/spec/labels"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/etc/rstudio/labels"</span></span></code></pre></div></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/rstudio/labels</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" data-filename="/etc/rstudio/labels" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb5-2">  {</span>
<span id="cb5-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"applicationid"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"workbench"</span>,</span>
<span id="cb5-4">    <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">"label":</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">["value"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-5">  <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div></div>
</div>


</section>

 ]]></description>
  <category>code</category>
  <category>HPC</category>
  <guid>https://questionable.quarto.pub/blog/work/job-templating-k8s.html</guid>
  <pubDate>Wed, 21 Aug 2024 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Google data storage and R</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/google-resources.html</link>
  <description><![CDATA[ 






<section id="overview" class="level1">
<h1>Overview</h1>
<p>Access to resources in google (bigquery, drive, etc) will depend on where the user is connecting from:</p>
<ul>
<li>Local desktop: any method is fine</li>
<li>Workbench / server web app based: “OOB” workflows or non-interactive</li>
<li>Connect / server web app non-interactive: Non-interactive only</li>
</ul>
</section>
<section id="interactive-workflow" class="level1">
<h1>Interactive workflow</h1>
<p>In order to get this working on Workbench, we need to use the OOB method so we don’t have to mess with bouncing between URL’s.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(googlesheets4)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(gargle)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(googledrive)</span></code></pre></div></div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load/refresh existing credentials, if available</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># otherwise, go to browser for authentication and authorization (only works if not behind a proxy)</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drive_auth</span>()</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gargle_oauth_client_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"web"</span>)       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pseudo-OOB, use this when on Workbench, Connect, etc. </span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># options(gargle_oauth_client_type = "installed") # conventional OOB - this doesn't work for me, looks like it was deprecated in 2023</span></span></code></pre></div></div>
</section>
<section id="hacky-workflow-aka-oauth-user-token-re-discovered" class="level1">
<h1>Hacky workflow AKA Oauth user token re-discovered</h1>
<p>The idea is to make it render once, then use the token in the cache for future authentications. This will likely need to be periodically updated (think, annually) whenever the token expires.</p>
<p>This is the least recommended because of security challenges and having to manage an ecosystem of tokens, but it’s hard to deny the appeal because it means a service account isn’t needed!</p>
<p>We’ll need to change the location of the cached token to within the project so that when we deploy to Connect it will be included. Security here is tricky since the token is an exposed file, so care should be taken.</p>
<p>Reference: <a href="https://gargle.r-lib.org/articles/non-interactive-auth.html#sidebar-1-deployment" class="uri">https://gargle.r-lib.org/articles/non-interactive-auth.html#sidebar-1-deployment</a></p>
<p>Step 1: Do this once interactively to get a token</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a token interactively, but we can reuse it later</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pseudo-OOB - this will bounce us out to a webpage, but we don't have to bounce back, we'll copy a code instead that we'll use like a password</span></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gargle_oauth_client_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"web"</span>) </span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># designate project-specific cache</span></span>
<span id="cb3-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gargle_oauth_cache =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".secrets"</span>)</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do anything that triggers auth, in this case I want to tie it to my email identity</span></span>
<span id="cb3-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gargle_oauth_email =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lisamaeanders@gmail.com"</span>)</span>
<span id="cb3-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drive_auth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">email =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lisamaeanders@gmail.com"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cache =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".secrets"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">use_oob =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use a 'read only' scope, so it's impossible to edit or delete files</span></span>
<span id="cb3-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drive_auth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scopes =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drive.readonly"</span>)</span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This sets an option that allows gargle to use cached tokens whenever there’s a unique match:</span></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#options(gargle_oauth_email = TRUE)</span></span></code></pre></div></div>
<p>Step 2: Downstream use we will reuse the token we got interactively earlier</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Revise code so it uses the pre-authorized token </span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drive_auth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cache =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".secrets"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">email =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lisamaeanders@gmail.com"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">use_oob =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now use googledrive</span></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drive_find</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div></div>
</section>
<section id="when-deployed-in-gcp-use-existing-cloud-credentials-and-go-keyless" class="level1">
<h1>When deployed in GCP use existing cloud credentials and go “keyless”</h1>
<p>When deployed already in GCP then there is an underlying service account already assigned to your infrastructure. The gotcha is that it is unlikely that the pre-existing service account has the “scope” IE the access to what you need.</p>
<p>Additional scopes need to be added to that service account identity, for example:</p>
<ul>
<li>That authentication might be successful for BigQuery, because the service account has the scope ‘cloud-platform’</li>
<li>That authentication won’t be successful for drive, because it doesn’t have the ‘drive’ scope</li>
</ul>
<p>Additional scope is added at the GCP compute instance level either when the instance is created or the instance can be stopped and the scope added.</p>
<p>Check for GCE credentials with (super curious what this returns for you, probably worth saving the output so it can be restored in the future if needed):</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">credentials_gce</span>()</span></code></pre></div></div>
<p>This also means that if you are GCE and getting errors that may be because it is using that service account for access, which doesn’t have the correct scoping. You may need to remove the credentials for that account so it can try to create fresh credentials:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># removes `credentials_gce()` from gargle's registry</span></span>
<span id="cb6-2">gargle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cred_funs_add</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">credentials_gce =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span></code></pre></div></div>
<p>Reference: <a href="https://gargle.r-lib.org/articles/non-interactive-auth.html#embrace-credentials-available-in-certain-cloud-settings" class="uri">https://gargle.r-lib.org/articles/non-interactive-auth.html#embrace-credentials-available-in-certain-cloud-settings</a></p>
</section>
<section id="non-interactive-workflow" class="level1">
<h1>Non-interactive workflow</h1>
<p>Reference: <a href="https://gargle.r-lib.org/articles/non-interactive-auth.html" class="uri">https://gargle.r-lib.org/articles/non-interactive-auth.html</a></p>
<section id="service-account-token" class="level2">
<h2 class="anchored" data-anchor-id="service-account-token">Service account token</h2>
<p>Follow <a href="https://gargle.r-lib.org/articles/get-api-credentials.html#service-account-token">these</a> steps:</p>
<ul>
<li>Create a service account</li>
<li>From the <a href="https://console.cloud.google.com">GCP Console</a>, in the target GCP Project, go to IAM &amp; Admin &gt; Service accounts</li>
<li>Assign permissions: googledrive docs does not have any explicit roles, service account used to test bigrquery has roles BigQuery Admin and Storage Admin</li>
<li>After creating the service account, click on the three dots and “actions”, manage keys, add key as json, download credentials as json file</li>
<li>This key is a secret! Consider how it should be protected</li>
<li>Provide path of json file to authentication</li>
<li>Grant the service account permissions to resources as needed (it doesn’t inherit permissions) (For example, I had to visit https://console.developers.google.com/apis/api/drive.googleapis.com/overview?project=redacted to enable access for google drive and gogle sheets, which it gave me the link to in an error message for my specific project)</li>
</ul>
<p>Reference: <a href="https://gargle.r-lib.org/articles/non-interactive-auth.html#provide-a-service-account-token-directly" class="uri">https://gargle.r-lib.org/articles/non-interactive-auth.html#provide-a-service-account-token-directly</a> and <a href="https://gargle.r-lib.org/articles/get-api-credentials.html#service-account-token" class="uri">https://gargle.r-lib.org/articles/get-api-credentials.html#service-account-token</a></p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use a service account token, like drive_auth(path = "/path/to/your/service-account-token.json")</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># drive_auth(path = Sys.getenv("google_drive_service_account"), scopes = "drive.readonly")</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># drive_auth(path = Sys.getenv("google_drive_service_account"), scopes = "drive.readonly")</span></span>
<span id="cb7-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">credentials_service_account</span>(</span>
<span id="cb7-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#scopes = "https://www.googleapis.com/auth/userinfo.email",</span></span>
<span id="cb7-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"google_drive_service_account"</span>)</span>
<span id="cb7-7">)</span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now use googledrive</span></span>
<span id="cb7-9">googledrive<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drive_find</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div></div>
</section>
</section>
<section id="troubleshooting" class="level1">
<h1>Troubleshooting</h1>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># see user associated with current token</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drive_user</span>()</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List credentials </span></span>
<span id="cb8-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cred_funs_list</span>()</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># force the OAuth web dance</span></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#drive_auth(email = NA)</span></span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># provides an OAuth2 “situation report”, only relevant for oauth2 user tokens (not service accounts, etc)</span></span>
<span id="cb8-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gargle_oauth_sitrep</span>() </span>
<span id="cb8-12"></span>
<span id="cb8-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check if a oauth cache is being used</span></span>
<span id="cb8-14">gargle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gargle_oauth_cache</span>()</span>
<span id="cb8-15"></span>
<span id="cb8-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Default is to cache OAuth access credentials in the folder ~/.cache/gargle between R sessions</span></span>
<span id="cb8-17"></span>
<span id="cb8-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># retrieve the currently configured OAuth client and API key, respectively.</span></span>
<span id="cb8-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># without configuring auth these are null</span></span>
<span id="cb8-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drive_oauth_client</span>() </span>
<span id="cb8-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drive_api_key</span>() </span>
<span id="cb8-22"></span>
<span id="cb8-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># see your token file in the cache</span></span>
<span id="cb8-24"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".secrets/"</span>)</span>
<span id="cb8-25"></span>
<span id="cb8-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For troubleshooting purposes, you can set a gargle option to see verbose output about the execution of gargle::token_fetch():</span></span>
<span id="cb8-27"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gargle_verbosity =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"debug"</span>)</span>
<span id="cb8-28"></span>
<span id="cb8-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Gargle uses port 1410 for auth, check if it is blocked with (on nix systems): sudo lsof -i :1410</span></span></code></pre></div></div>
</section>
<section id="security" class="level1">
<h1>Security</h1>
<p>Want to learn more about managing tokens? Read <a href="https://gargle.r-lib.org/articles/managing-tokens-securely.html">this</a></p>
</section>
<section id="resources" class="level1">
<h1>Resources</h1>
<ul>
<li>Exploring non-interactive auth workflows would also be really useful (and set us up for successful deployments to Connect down the road): <a href="https://gargle.r-lib.org/articles/non-interactive-auth.html" class="uri">https://gargle.r-lib.org/articles/non-interactive-auth.html</a></li>
<li>Might also be useful to refer to the google docs on auth: <a href="https://cloud.google.com/bigquery/docs/authentication" class="uri">https://cloud.google.com/bigquery/docs/authentication</a></li>
<li>This section is also really useful: <a href="https://bigrquery.r-dbi.org/#authentication-and-authorization" class="uri">https://bigrquery.r-dbi.org/#authentication-and-authorization</a></li>
<li>Likely OOB auth is needed, with options(gargle_oob_default = TRUE)</li>
<li>“If you are interacting with R within a browser (applies to RStudio Server, Posit Workbench, Posit Cloud, and Google Collaboratory), you need OOB auth or the pseudo-OOB variant. If this does not happen automatically, you can request it explicitly with use_oob = TRUE or, more persistently, by setting an option via options(gargle_oob_default = TRUE).”</li>
<li>Reference: <a href="https://googledrive.tidyverse.org/reference/drive_auth.html" class="uri">https://googledrive.tidyverse.org/reference/drive_auth.html</a></li>
<li>Also really useful: <a href="https://gargle.r-lib.org/articles/non-interactive-auth.html" class="uri">https://gargle.r-lib.org/articles/non-interactive-auth.html</a></li>
<li>And another one that is really useful: <a href="https://bigrquery.r-dbi.org/#authentication-and-authorization" class="uri">https://bigrquery.r-dbi.org/#authentication-and-authorization</a></li>
<li>There’s an example on this page using a json file downloaded from the google developers console: <a href="https://googledrive.tidyverse.org/reference/drive_auth_configure.html#ref-examples" class="uri">https://googledrive.tidyverse.org/reference/drive_auth_configure.html#ref-examples</a></li>
<li>From the google cloud console these are the options we have for generating credentials: API key, Oauth client ID, service account. (<a href="https://console.cloud.google.com/" class="uri">https://console.cloud.google.com/</a> -&gt; API’s and Services -&gt; Create credentials)</li>
<li>Basically you (1) create a service account then (2) create a key (see <a href="https://developers.google.com/identity/protocols/oauth2/service-account" class="uri">https://developers.google.com/identity/protocols/oauth2/service-account</a>)</li>
<li>Auth from web: <a href="https://gargle.r-lib.org/articles/auth-from-web.html" class="uri">https://gargle.r-lib.org/articles/auth-from-web.html</a></li>
</ul>


</section>

 ]]></description>
  <category>code</category>
  <category>data</category>
  <guid>https://questionable.quarto.pub/blog/work/google-resources.html</guid>
  <pubDate>Fri, 21 Jun 2024 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
</channel>
</rss>
