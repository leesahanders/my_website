<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Lisa Anders - questionable.quarto</title>
<link>https://questionable.quarto.pub/blog/site_map.html</link>
<atom:link href="https://questionable.quarto.pub/blog/site_map.xml" rel="self" type="application/rss+xml"/>
<description>Making the most out of data</description>
<generator>quarto-1.4.550</generator>
<lastBuildDate>Tue, 29 Apr 2025 06:00:00 GMT</lastBuildDate>
<item>
  <title>Mounting drives on a server for Posit Team</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/mounting-drives-server.html</link>
  <description><![CDATA[ 





<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>Workbench and Connect will work with the underlying linux system to make resources available to users. This includes things like mounted drives.</p>
<p>Neither Workbench nor Connect natively mount drives, this isn’t done through a config. Drive mounts are done through linux operations.</p>
<section id="nfs" class="level3">
<h3 class="anchored" data-anchor-id="nfs">NFS</h3>
<p>Typically we see this looking like</p>
<ol type="1">
<li>Create a local directory</li>
<li><code>mount -t nfs -o optionshere sharehost:sharepath</code></li>
</ol>
<p>The important bit would be to set permissions with chown, chmod, and maybe facl for either the rstudio-connect user, or the alternate user they choose, for example something like:</p>
<pre><code>sudo chown user:group /folder
chmod 764 /folder</code></pre>
<p>It can also involve <a href="https://www.baeldung.com/linux/network-drive-etc-fstab">fstab</a> or <a href="https://help.ubuntu.com/community/Autofs">AutoFS</a>.</p>
<p>Some specific situations may have some complexity: specific formats, cloud situations, or verifying NFS export options, but in general the mounting process is much simpler than installing the posit products and configuring them and is the same as what would be done on any linux server.</p>
<p>If running in kubernetes then the mount needs to be added to each job pod and it gets more complicated.</p>
</section>
</section>
<section id="smbcifs" class="level2">
<h2 class="anchored" data-anchor-id="smbcifs">SMB/CIFS</h2>
<p>For SMB/CIFS this could look like mounting via PAM, discussed here: <a href="https://support.posit.co/hc/en-us/articles/360044190234-How-to-mount-a-Windows-SMB-CIFS-share-via-PAM" class="uri">https://support.posit.co/hc/en-us/articles/360044190234-How-to-mount-a-Windows-SMB-CIFS-share-via-PAM</a></p>
<p>Alternatively, the SMB/CIFS could be <a href="https://www.techrepublic.com/article/how-to-permanently-mount-a-windows-share-on-linux/">mounted directly</a> with <code>cifs-utils</code> using a service account if traceability or access controls aren’t needed with <code>sudo mount -t cifs -o username=&lt;user&gt;,password=&lt;password&gt; //&lt;server&gt;/&lt;share&gt; /mnt/&lt;mountpoint&gt;</code>.</p>
<p><a href="https://infohub.delltechnologies.com/en-us/l/dell-unity-nas-capabilities/multiprotocol-17/">Multiprotocol NAS</a> is another option for a more enterprise solution.</p>
</section>
<section id="copying-a-project-from-one-users-home-directory-to-another" class="level2">
<h2 class="anchored" data-anchor-id="copying-a-project-from-one-users-home-directory-to-another">Copying a project from one users home directory to another</h2>
<p>Reference: <a href="https://support.posit.co/hc/en-us/articles/12959116352663-Transferring-project-ownership-in-Posit-Workbench" class="uri">https://support.posit.co/hc/en-us/articles/12959116352663-Transferring-project-ownership-in-Posit-Workbench</a></p>
<p>This will recursively copy the project from user1’s home directory to user2’s home directory</p>
<p>`sudo cp -R /home/user1/project /home/user2/``</p>
<p>And this will change the owner recursively to user2</p>
<p><code>sudo chown -R user2:user2 /home/user2/project</code></p>
</section>
<section id="permissions" class="level2">
<h2 class="anchored" data-anchor-id="permissions">Permissions</h2>
<p>When mounting on the server it will need the appropriate permissions so that users are able to access the contents of the drive.</p>
<p>For example for content running on Posit Connect the rstudio-connect user will need access to the drive, for example via <code>chmod 644</code>. Alternatively the drive could be mapped so that an alternate linux user has access and a user with admin access through the Connect UI can set the runAs user to the selected linux user. This will provide more security around protecting the files that are mounted.</p>
</section>
<section id="logging-user-actions" class="level2">
<h2 class="anchored" data-anchor-id="logging-user-actions">Logging user actions</h2>
<p>For customers wanting to log user actions on NFS shares that is done through linux admin utilities, like <code>auditd</code>.</p>
<p>Alternatively kerberized NFS shares can be used for centralized logging/auditing but is significantly more admin overhead.</p>
</section>
<section id="failures" class="level2">
<h2 class="anchored" data-anchor-id="failures">Failures</h2>
<section id="checking-mounted-drives-and-noexec-option" class="level3">
<h3 class="anchored" data-anchor-id="checking-mounted-drives-and-noexec-option">Checking mounted drives and noexec option</h3>
<p>Check if <code>/home</code> on the server, or is it a network mount (NFS or CIFS). In NFS, for example, there can be the use of access control lists which can impact permissions. Similarly, when working in a system that has a mounted share drive then would want to check that libraries are being written to that share so you get persistence. Typically this means writing to inside the home directory. Check mounted drives with: <code>df -h</code></p>
<p>Check <code>/etc/fstab</code> to see if the home directories are mounted with <code>noexec</code></p>
<p>For example, this shows that the home directories were mounted with <code>noexec</code>: <code>/dev/mapper/rhel-home  /home  xfs    defaults,noexec,nosuid,nodev   0 0</code></p>
<p>This resulted in this error message:</p>
<pre><code>library(stringi)Error: package or namespace load failed for 'stringi' in dyn.load(file, DLLpath = DLLpath, ...):
unable to load shared object '/home/username/x86_64-pc-linux-gnu-library/4.3/stringi/libs/stringi.so':
  /home/username/R/x86_64-pc-linux-gnu-library/4.3/stringi/libs/stringi.so: failed to map segment from shared object</code></pre>
</section>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<p>A linux based forum like <a href="https://serverfault.com/">serverfault</a> can be useful for getting more answers for linux topics like this.</p>
<ul>
<li><a href="https://www.golinuxcloud.com/linux-mount-nfs/" class="uri">https://www.golinuxcloud.com/linux-mount-nfs/</a></li>
<li><a href="https://planetscale.com/blog/io-devices-and-latency#storage-in-the-cloud" class="uri">https://planetscale.com/blog/io-devices-and-latency#storage-in-the-cloud</a></li>
<li><a href="https://solutions.posit.co/admin-training/courses/workbench/04_datasources.html#smbcifs" class="uri">https://solutions.posit.co/admin-training/courses/workbench/04_datasources.html#smbcifs</a></li>
<li>Really interesting community post with script for automounting windows shares: <a href="https://community.rstudio.com/t/active-directory-ad-permissions-and-file-share-mounting-for-rsp/5427/5" class="uri">https://community.rstudio.com/t/active-directory-ad-permissions-and-file-share-mounting-for-rsp/5427/5</a></li>
<li>Example for mounting a drive: <a href="https://superuser.com/questions/134734/how-to-mount-a-drive-from-terminal-in-ubuntu" class="uri">https://superuser.com/questions/134734/how-to-mount-a-drive-from-terminal-in-ubuntu</a></li>
</ul>


</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/mounting-drives-server.html</guid>
  <pubDate>Tue, 29 Apr 2025 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Setting the R package repository on Posit Workbench</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/r-repository-settings-workbench.html</link>
  <description><![CDATA[ 





<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>The repository for packages being used for installation by users is often important to configure. When using something like Package Manager you’ll want users to install packages from there, rather than the broader internet.</p>
</section>
<section id="at-a-glance" class="level2">
<h2 class="anchored" data-anchor-id="at-a-glance">At a glance</h2>
<p>The best pattern is to configure the repository across R sessions using R config options, not RStudio configs. A shared site library can be created (leveraging <code>Rprofile.site</code> and <code>Renviron.site</code> for example) or using <code>renv</code> with a shared <code>renv</code> package cache (maintaining reproduceability through the <code>renv.lock</code> file).</p>
<p>The <code>Renviron.site</code> would override the <code>Rprofile.site</code> setting and therefore may be more robust.</p>
<section id="renviron.site" class="level3">
<h3 class="anchored" data-anchor-id="renviron.site">Renviron.site</h3>
<p>Referencing: <a href="https://github.com/sol-eng/singularity-rstudio/blob/main/data/workbench/scripts/run.R" class="uri">https://github.com/sol-eng/singularity-rstudio/blob/main/data/workbench/scripts/run.R</a></p>
<p>Create a <code>Renviron.site</code> file and define:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/opt/R/Some-R-Version/lib/R/etc/Renviron.site</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename="/opt/R/Some-R-Version/lib/R/etc/Renviron.site" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">RENV_PATHS_PREFIX_AUTO</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TRUE</span>
<span id="cb1-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">RENV_PATHS_CACHE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/scratch/renv</span>
<span id="cb1-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">R_LIBS_SITE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>R_LIBS_SITE=<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${R_LIBS_SITE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/usr/local/lib/R/site-library:/usr/local/lib/R/library:/usr/lib64/R/library:/usr/share/R/library'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</section>
<section id="rprofile.site" class="level3">
<h3 class="anchored" data-anchor-id="rprofile.site">.Rprofile.site</h3>
<p>Set <code>.libPaths()</code> in <code>.Rprofile.site</code>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/opt/R/Some-R-Version/lib/R/etc/Rprofile.site</strong></pre>
</div>
<div class="sourceCode" id="cb2" data-filename="/opt/R/Some-R-Version/lib/R/etc/Rprofile.site" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">options</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">repos</span> = c<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CRAN</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://packagemanager.posit.co/all/latest"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interactive()</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">options</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">width</span> = 120<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.info()</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sysname"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]]</span> == <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Windows"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Sys.setenv</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RENV_DOWNLOAD_METHOD</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"curl"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"folder"</span> %in% tolower<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">list.files</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:/"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)))</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">!</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rlib"</span> %in% list.files<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:/username/"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">))</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">print</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Creating Rlib folder"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">dir.create</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:/username/Rlib"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">,mode</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0777"</span>,recursive = T<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"\033[0;32;1mSetting local user lib\033[0m\n"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.libPaths</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">c</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:/username/Rlib"</span> , .libPaths<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"\033[0;33;1mYou should consider getting the access right so we can put your local R-lib there, instead of OneDrive.\033[0m\n"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</section>
<section id="test" class="level3">
<h3 class="anchored" data-anchor-id="test">Test</h3>
<p>Test this by running and checking the outputs of:</p>
<ul>
<li><code>.libPaths()</code></li>
<li><code>options()$repos</code></li>
</ul>
</section>
</section>
<section id="long-winded" class="level2">
<h2 class="anchored" data-anchor-id="long-winded">Long-winded</h2>
<section id="startup-behavior-of-r-when-loading-package-environment-details" class="level3">
<h3 class="anchored" data-anchor-id="startup-behavior-of-r-when-loading-package-environment-details">Startup behavior of R when loading package environment details</h3>
<p>R Startup behavior (funny): <a href="https://rstats.wtf/r-startup.html" class="uri">https://rstats.wtf/r-startup.html</a></p>
<blockquote class="blockquote">
<p>Credit: This section was largely taken from an internal Posit resource of unknown authorship</p>
</blockquote>
<p>From bash it is different than from the editor.</p>
<p>See <a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/Startup.html" title="https://stat.ethz.ch/R-manual/R-devel/library/base/html/Startup.html">here</a> for the official startup docs from R.</p>
<p>R from the command line/bash will take the user’s environment. It will not read any additional bash files during start-up (which the RStudio products will do). It will still read in the R startup files (Renviron/Rprofile).</p>
<p>Prior to loading the R session from the bash shell any commands in this file will be read and execute commands if it exists: <code>/etc/profile</code></p>
<p>Next, the the first of the following files that exists and is readable will have commands executed from (only one of these files will be read and executed):</p>
<ul>
<li><p><code>~/.bash_profile</code></p></li>
<li><p><code>~/.bash_login</code></p></li>
<li><p><code>~/.profile</code></p></li>
</ul>
<p>R then always loads the following (in order):</p>
<ul>
<li><p><code>R_HOME/etc/Renviron.site</code> (set for all users)</p></li>
<li><p><code>.Renviron</code> - user-specific, typically in the user’s home directory, but can be elsewhere (for instance, in a Project folder)</p></li>
<li><p><code>R_HOME/etc/Rprofile.site</code> (set for all users)</p></li>
<li><p><code>.Rprofile</code> - user-specific, typically in the user’s home directory, but can be elsewhere (for instance, in a Project folder)</p></li>
</ul>
<p>Beyond this, what gets put in the environment depends on the product.</p>
<ul>
<li><p>RStudio Server / Workbench: before any of this executes, RStudio Server will first include the contents of /etc/rstudio/rsession-profile if it exists. It will also add anything set in rsession-ld-library-path in rserver.conf to the LD_LIBRARY_PATH environment variable.</p></li>
<li><p>Shiny Server / Connect: you can affect the environment variables for a specific application using program supervisors</p></li>
</ul>
<p>This page in the documentation is the new home for the golden source of info for startup behavior: <a href="https://docs.posit.co/ide/user/ide/guide/environments/r/managing-r.html" class="uri">https://docs.posit.co/ide/user/ide/guide/environments/r/managing-r.html</a></p>
</section>
<section id="r-sessions-across-all-workbench-ides" class="level3">
<h3 class="anchored" data-anchor-id="r-sessions-across-all-workbench-ides">R sessions across all Workbench IDE’s</h3>
<p>Relying on <code>repos.conf</code> for R repository configuration IMHO is a clear anti-pattern which especially large customers with large setups should not use. <code>repos.conf</code> is a relic from a time where there was only RSP.</p>
<p>Configure the repository settings in R directly, rather than through the RStudio settings.</p>
<p>Resources:</p>
<ul>
<li><p>A great resource for setting this up simply is: <a href="https://docs.posit.co/ide/user/ide/guide/environments/r/managing-r.html" class="uri">https://docs.posit.co/ide/user/ide/guide/environments/r/managing-r.html</a></p></li>
<li><p>For a more complex example that could be used in slurm environments refer to: <a href="https://github.com/sol-eng/singularity-rstudio/blob/main/data/workbench/scripts/run.R" class="uri">https://github.com/sol-eng/singularity-rstudio/blob/main/data/workbench/scripts/run.R</a></p></li>
</ul>
<p>The <code>Renviron.site</code> would override the <code>Rprofile.site</code> setting and therefore may be more robust.</p>
<section id="renviron.site-1" class="level4">
<h4 class="anchored" data-anchor-id="renviron.site-1">Renviron.site</h4>
<p>Create a <code>Renviron.site</code> file and define:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/opt/R/Some-R-Version/lib/R/etc/Renviron.site</strong></pre>
</div>
<div class="sourceCode" id="cb3" data-filename="/opt/R/Some-R-Version/lib/R/etc/Renviron.site" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Key1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>value1</span>
<span id="cb3-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">RENV_PATHS_PREFIX_AUTO</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TRUE</span>
<span id="cb3-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">RENV_PATHS_CACHE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/scratch/renv</span>
<span id="cb3-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">R_LIBS_SITE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>R_LIBS_SITE=<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${R_LIBS_SITE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/usr/local/lib/R/site-library:/usr/local/lib/R/library:/usr/lib64/R/library:/usr/share/R/library'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
<p>And then <code>Sys.getenv("Key1")</code> will return <code>"value1"</code> in a users R session.</p>
<p>This can be set at the user or system level. Users have the choice between user or project level (project taking preference). The <a href="https://usethis.r-lib.org/">usethis</a> package includes a helper function for editing <code>.Renviron</code> files from an R session with&nbsp;<code>usethis::edit_r_environ()</code>. For a system level install it is placed per R version, for example at <code>/opt/R/4.1.1/lib/R/etc/Renviron.site</code>.</p>
</section>
<section id="rprofile.site-1" class="level4">
<h4 class="anchored" data-anchor-id="rprofile.site-1">.Rprofile.site</h4>
<p>Set <code>.libPaths()</code> in <code>.Rprofile.site</code>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/opt/R/Some-R-Version/lib/R/etc/Rprofile.site</strong></pre>
</div>
<div class="sourceCode" id="cb4" data-filename="/opt/R/Some-R-Version/lib/R/etc/Rprofile.site" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">options</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">repos</span> = c<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CRAN</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://packagemanager.posit.co/all/latest"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interactive()</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">options</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">width</span> = 120<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
<p>Again this file can be se at the user or system level. At the user level the easiest way to edit your <code>.Rprofile</code> file is to use the <code>usethis::edit_r_profile()</code> function from within an R session. You can specify whether you want to edit the user or project level <code>.Rprofile.</code> For a system level install it is placed per R version, for example at <code>/opt/R/4.2.0/lib/R/etc/Rprofile.site</code>.</p>
</section>
<section id="configuring-a-shared-library" class="level4">
<h4 class="anchored" data-anchor-id="configuring-a-shared-library">Configuring a shared library</h4>
<p>Taken from an <a href="https://positpbc.slack.com/archives/C2P7MTJKE/p1738088423395249?thread_ts=1737982807.176319&amp;cid=C2P7MTJKE">internal discussion</a></p>
<p>Set <code>.libPaths()</code> in <code>.Rprofile.site</code>.</p>
<p>There are two main options:</p>
<ul>
<li><p>Install a set of R packages in a shared library. The users here would need to specify which packages they really need and then their IT team could install those into a <code>site-library</code> in each R version, ideally leveraging a time-based snapshot from package manager for reproducibility reason. Users in this case would be limited to a certain package version for some time. They however can update those packages regularly (e.g.&nbsp;quarterly) to lessen the pain here. As mentioned above, do <strong>NOT</strong> use any recommendation from the Posit Admin guide for this setup but follow the standard approach to configure the same in R (leveraging <code>Rprofile.site</code> and <code>Renviron.site</code> for example).</p></li>
<li><p>Educate/train the users to all use <code>renv</code> - then every user would have maximum degree of freedom to choose which packages and which version they want to use for each project. They then would maintain <code>renv.lock</code> files for each project and the admin team can then configure a shared <code>renv</code> package cache to ensure that any given package/version combination is only stored once.</p></li>
</ul>
<p>Both options in their own right also protect the data scientists from producing irreproducible code since in neither case they rely on that melting pot of R package mess that typically piles up in <code>R_LIBS_USER</code> (in particular for systems where R points to latest CRAN which IMHO is another anti-pattern)</p>
<section id="script-for-updating-packages-from-rspm-that-have-changed-to-site-library" class="level5">
<h5 class="anchored" data-anchor-id="script-for-updating-packages-from-rspm-that-have-changed-to-site-library">Script for updating packages from rspm that have changed to site library</h5>
<pre><code># update existing packages
update.packages(lib.loc=&lt;site.library&gt;, repos=&lt;PPM Repo&gt;, ask=FALSE)

# add any new packages
new.packages(lib.loc=&lt;site.library&gt;, repos=&lt;PPM Repo&gt;, ask=FALSE)</code></pre>
</section>
</section>
</section>
<section id="workbench-and-rstudio-sessions-only" class="level3">
<h3 class="anchored" data-anchor-id="workbench-and-rstudio-sessions-only">Workbench and RStudio sessions only</h3>
<p>The oft recommended path is to use the <code>repos.conf</code> or <code>rsession.conf</code> file to configure the repository URL.</p>
<p>This might look like:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/rstudio/rsession.conf</strong></pre>
</div>
<div class="sourceCode" id="cb6" data-filename="/etc/rstudio/rsession.conf" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">r-cran-repos=http://cran.at.r-project.org/</span></span></code></pre></div>
</div>
<p>Or:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/rstudio/repos.conf</strong></pre>
</div>
<div class="sourceCode" id="cb7" data-filename="/etc/rstudio/repos.conf" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">RSPM</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>https://packagemanager.posit.co/cran/__linux__/jammy/latest</span>
<span id="cb7-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">CRAN</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>https://packagemanager.posit.co/cran/__linux__/jammy/latest</span>
<span id="cb7-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Australia</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>https://cran.ms.unimelb.edu.au/</span>
<span id="cb7-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Austria</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>https://lib.ugent.be/CRAN/</span></code></pre></div>
</div>
<p>And adding to <code>rsession.conf</code>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/rstudio/rsession.conf</strong></pre>
</div>
<div class="sourceCode" id="cb8" data-filename="/etc/rstudio/rsession.conf" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use this to change the location / name of the repos.conf file</span></span>
<span id="cb8-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">r-cran-repos-file=/etc/rstudio/repos.conf</span></span></code></pre></div>
</div>
<p>Reference: <a href="https://docs.posit.co/ide/server-pro/rstudio_pro_sessions/package_installation.html" class="uri">https://docs.posit.co/ide/server-pro/rstudio_pro_sessions/package_installation.html</a></p>
</section>
<section id="ld_library_path" class="level3">
<h3 class="anchored" data-anchor-id="ld_library_path">LD_LIBRARY_PATH</h3>
<p>Reference: <a href="https://rstudioide.zendesk.com/agent/tickets/107856" class="uri">https://rstudioide.zendesk.com/agent/tickets/107856</a></p>
<p>There are a few different places the LD_LIBRARY_PATH can be modified within Workbench settings, only some of which will work for packages like <code>rJava</code>. For instance, including the ldpaths script in <code>/etc/rstudio/r-versions</code> can ensure the correct library is set on R session startup. The final step in this support article shows a method of setting this up which should work even on non-containerized Workbench sessions (the mkdir command can be excluded, since that directory should already exist on a server-installed version of Workbench):</p>
<p>We need to force the installed R version to use it’s own ldpaths startup script when it starts inside the container.</p>
<p><code>RUN mkdir -p /etc/rstudio &amp;&amp; printf "Path: /opt/R/${R_VERSION}\nScript: /opt/R/${R_VERSION}/lib/R/etc/ldpaths" &gt; /etc/rstudio/r-versions</code></p>
<p>These steps are good to follow: <a href="https://solutions.posit.co/envs-pkgs/using-rjava/index.html#additional-steps-for-workbench" class="uri">https://solutions.posit.co/envs-pkgs/using-rjava/index.html#additional-steps-for-workbench</a></p>
<p>The additional steps that need to be followed on Workbench are:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/rstudio/r-versions</strong></pre>
</div>
<div class="sourceCode" id="cb9" data-filename="/etc/rstudio/r-versions" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Path:</span> /opt/R/4.2.0</span>
<span id="cb9-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Script:</span> /opt/R/4.2.0/lib/R/etc/ldpaths</span></code></pre></div>
</div>
</section>
<section id="troubleshooting" class="level3">
<h3 class="anchored" data-anchor-id="troubleshooting">Troubleshooting</h3>
<p>To determine the environment details it can be useful to run <code>Sys.getenv()</code> from inside and outside RStudio, to see if the user’s bash files are setting environment variables inappropriately for the system.</p>
<p>If the issue is occurring within RStudio it can be helpful to capture the output of<code>system("ldd /usr/lib/rstudio-server/bin/rsession")</code> from inside and outside RStudio to see which R libraries are being loaded.</p>
<p>Test from a user session the repository details with:</p>
<ul>
<li><code>.libPaths()</code></li>
<li><code>options()$repos</code></li>
</ul>
<p>Permissions on the various configs can cause various issues with soft fails, for example a working permission is: <code>chmod 644</code>, or for the rstudio directory consider <code>chmod 0755 /etc/rstudio</code> or <code>chmod o+x /etc/rstudio</code> to add the <code>x</code> bit for just rstudio-server without opening up the other permissions if it is desired to keep it restricted (may result in odd behavior).</p>
<p>Check permissions with: <code>ls -la /etc/rstudio</code></p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/r-repository-settings-workbench.html</guid>
  <pubDate>Thu, 24 Apr 2025 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Using the remote CLI with package manager</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/rspm_remote_admin_cli.html</link>
  <description><![CDATA[ 





<section id="overview" class="level3">
<h3 class="anchored" data-anchor-id="overview">Overview</h3>
<p>Remote CLI use: <a href="https://docs.posit.co/rspm/admin/admin-cli/#cli-remote-use" class="uri">https://docs.posit.co/rspm/admin/admin-cli/#cli-remote-use</a></p>
<blockquote class="blockquote">
<p>The entire admin CLI is now available for use remotely, with the exception of the offline, online and cluster commands. API tokens can be generated with the new global:admin scope to allow full access to the CLI.</p>
</blockquote>
<p>In order to use the admin CLI remotely you need an admin to create an API token for you (<code>rspm create token</code>)</p>
<p>The admin will likely need to follow these steps:</p>
<ul>
<li>Enable the <code>Authentication.APITokenAuth</code> configuration setting and restart the Package Manager service.</li>
<li>Create a token using the <code>rspm create token</code> command. For example <code>rspm create token --scope=global:admin --expires=never</code></li>
<li>Give the token and the full address of the server (including the port if not using a default port like 80/443) to the remote user.</li>
</ul>
<p>As a user these are needed:</p>
<ul>
<li>Download the Package Manager CLI, ensuring that the CLI version matches the server version.</li>
<li>Set an environment variable named <code>PACKAGEMANAGER_TOKEN</code> with the value of the token.</li>
<li>Set an environment variable named <code>PACKAGEMANAGER_ADDRESS</code> with the address of the Package Manager server.</li>
</ul>
<p>Some other commands useful to know about:</p>
<ul>
<li><code>rspm encrypt generate</code> for creating the encryption token from the CLI before setting up the server.</li>
<li>Generate a bootstrap key programmatically: <a href="https://docs.posit.co/rspm/admin/appendix/bootstrap/" class="uri">https://docs.posit.co/rspm/admin/appendix/bootstrap/</a></li>
<li><code>rspm create token --scope=sources:write --description 'meatballhat is testing' --sources='*' --expires=1h</code> generates an API key for one hour</li>
<li><code>rspm create token --description="user A" --sources=local-src --expires=30d --scope=sources:write</code> creates a token for adding binary packages remotely</li>
<li>useful example showing setup instructions for a package manager instance: <a href="https://github.com/rstudio/evaluations/blob/main/src/scripts/config_rspm.sh" class="uri">https://github.com/rstudio/evaluations/blob/main/src/scripts/config_rspm.sh</a></li>
<li>here’s the way we included the rspm cli in the container images: <a href="https://github.com/rstudio/sol-eng-demo-server/pull/110/files" class="uri">https://github.com/rstudio/sol-eng-demo-server/pull/110/files</a></li>
<li>list of all commands: <a href="https://docs.posit.co/rspm/admin/appendix/cli/rspm/" class="uri">https://docs.posit.co/rspm/admin/appendix/cli/rspm/</a></li>
</ul>
</section>
<section id="environment-set-up" class="level3">
<h3 class="anchored" data-anchor-id="environment-set-up">Environment set-up</h3>
<p>Current environment token:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">PACKAGEMANAGER_ADDRESS</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;</span>redacted<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">PACKAGEMANAGER_TOKEN</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;</span>redacted<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
</section>
<section id="running-commands" class="level3">
<h3 class="anchored" data-anchor-id="running-commands">Running commands</h3>
<p>As a user we can test our access with something like this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the Package Manager CLI, ensuring that the CLI version matches the server version. For example RSPM_SERVER_VERSION=2024.04.2-29 or RSPM_SERVER_VERSION=2023.12.0-13, find the version through the UI or with rspm --version</span></span>
<span id="cb2-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">RSPM_SERVER_VERSION</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>2024.08.2-9</span>
<span id="cb2-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">RSPM_SERVER_VERSION</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>2024.08.4-10</span>
<span id="cb2-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">RSPM_SERVER_VERSION</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>2024.11.0-7</span>
<span id="cb2-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> rspm <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> https://cdn.posit.co/package-manager/linux/amd64/rspm-cli-linux-<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${RSPM_SERVER_VERSION}</span></span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> +x rspm</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set an environment variable named PACKAGEMANAGER_TOKEN with the value of the token.</span></span>
<span id="cb2-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>redacted<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$PACKAGEMANAGER_TOKEN</span></span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set an environment variable named PACKAGEMANAGER_ADDRESS with the address of the Package Manager server. </span></span>
<span id="cb2-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">PACKAGEMANAGER_ADDRESS</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;</span>redacted<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb2-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$PACKAGEMANAGER_ADDRESS</span></span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test it! </span></span>
<span id="cb2-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> verify</span>
<span id="cb2-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> list tokens</span>
<span id="cb2-19"></span>
<span id="cb2-20"></span>
<span id="cb2-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test it! </span></span>
<span id="cb2-22"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> list blocklist-rules</span>
<span id="cb2-23"></span>
<span id="cb2-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test it! Need a package to try to push to test these</span></span>
<span id="cb2-25"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> add <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>internal <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--path</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lisaPackageManagerDemo_0.0.1.tar.gz</span></code></pre></div>
<p>Let’s create a new repository for blocked packages that is inspired by <a href="https://github.com/rstudio/evaluations/blob/main/src/scripts/config_rspm.sh" class="uri">https://github.com/rstudio/evaluations/blob/main/src/scripts/config_rspm.sh</a></p>
<p>First we should create our .txt files with the desired subset of packages:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># curated cran</span></span>
<span id="cb3-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dplyr\nggplot2\narrow\nlubridate\njsonlite\nreadxl\nhaven\ngdata\nigraph\ncommonmark'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> package_subset_r.csv</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># curated pypi</span></span>
<span id="cb3-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plotnine\npolars\npillow\ngreat-tables'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> package_subset_py.txt</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">snapshot</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>2025-01-22</span></code></pre></div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># blocked packages -- R</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create source <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>curated-cran <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-packages-r </span>
<span id="cb4-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create blocklist-rule <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-packages-r <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--vulns</span></span>
<span id="cb4-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create blocklist-rule <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-packages-r <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--package-name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ggplot2 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--description</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Installation of 'ggplot2' is blocked"</span></span>
<span id="cb4-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> update <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-packages-r <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--file-in</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'package_subset_r.csv'</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--commit</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--snapshot</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${snapshot}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create repo <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-r <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--description</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Curated CRAN with vulnerability blocking enabled. Downloads of ggplot2 are also disallowed."</span></span>
<span id="cb4-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> subscribe <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-r <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-packages-r</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># blocked packages -- python</span></span>
<span id="cb4-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create source <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-packages-python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>curated-pypi</span>
<span id="cb4-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create blocklist-rule <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-packages-python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--vulns</span></span>
<span id="cb4-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create blocklist-rule <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-packages-python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--package-name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plotnine <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--description</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Installation of 'plotnine' is blocked."</span></span>
<span id="cb4-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> update <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-packages-python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--file-in</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>package_subset_py.txt <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--snapshot</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${snapshot}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--commit</span></span>
<span id="cb4-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create repo <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--description</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Curated PyPI with vulnerability blocking enabled. Downloads of plotnine are also disallowed."</span></span>
<span id="cb4-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> subscribe <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-packages-python</span></code></pre></div>
<p>Let’s check for package versions that violate the blocklist rule for blocking vulnerabilities:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#rspm test blocklist-rules --repo=[repo name] --package-name=[package name] --version=[version]</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> test blocklist-rules <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--package-name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pillow</span>
<span id="cb5-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> test blocklist-rules <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>blocked-python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--package-name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pillow <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>10.0.1</span></code></pre></div>
<p>Let’s set up a cran that has all vulnerable packages blocked (rather than a subset). This wasn’t possible until the newest release.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create repo <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cran-vulns-blocked <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>r <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--description</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Access CRAN packages with known vulnerabilities blocked'</span></span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> subscribe <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cran-vulns-blocked <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cran</span>
<span id="cb6-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create blocklist-rule <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cran-vulns-blocked <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--vulns</span></span></code></pre></div>
<p>Let’s now do the same for pypi:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create repo <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pypi-vulns-blocked <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--description</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Access PyPi packages with known vulnerabilities blocked'</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> subscribe <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pypi-vulns-blocked <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--source</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pypi</span>
<span id="cb7-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create blocklist-rule <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pypi-vulns-blocked <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--vulns</span></span></code></pre></div>
<p>Let’s check for package versions that violate the blocklist rule for blocking vulnerabilities:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#rspm test blocklist-rules --repo=[repo name] --package-name=[package name] --version=[version]</span></span>
<span id="cb8-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> test blocklist-rules <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cran-vulns-blocked <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--package-name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>jsonlite <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1.8.7</span>
<span id="cb8-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> test blocklist-rules <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pypi-vulns-blocked <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--package-name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pillow <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>10.0.1</span></code></pre></div>
<p>Let’s create a blocklist rule to block a specific package:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> create blocklist-rule <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cran-vulns-blocked <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--package-name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ggplot2 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--description</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Installation of 'ggplot2' is blocked"</span></span>
<span id="cb9-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> test blocklist-rules <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cran-vulns-blocked <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--package-name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ggplot2</span></code></pre></div>
<p>Remove a repository (oops!):</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./rspm</span> delete repo <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pypi-vulns-blocked</span></code></pre></div>
<p>Try to download a blocked package:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(remotes)</span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">CRAN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://pkg.demo.posit.team/cran-vulns-blocked/__linux__/noble/latest"</span>))</span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_version</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jsonlite"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.8.7"</span>)</span></code></pre></div>
<p>or we can instead curl it to see what happens:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> https://pkg.demo.posit.team/cran-vulns-blocked/latest/src/contrib/Archive/jsonlite/jsonlite_1.8.7.tar.gz</span></code></pre></div>
</section>
<section id="rosv" class="level3">
<h3 class="anchored" data-anchor-id="rosv">rosv</h3>
<p>rosv r package: <a href="https://github.com/cran/rosv" class="uri">https://github.com/cran/rosv</a></p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rosv)</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pull the entire set of PyPI vulnerability data</span></span>
<span id="cb13-4">pkg_vul <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">osv_query</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ecosystem =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PyPI'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all_affected =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb13-5">pypi_vul <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_osv_list</span>(pkg_vul, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">as.data.frame =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">NA_value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pull the entire set of cran vulnerability data</span></span>
<span id="cb13-8">pkg_vul <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">osv_query</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ecosystem =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CRAN'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all_affected =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb13-9">cran_vul <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_osv_list</span>(pkg_vul, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">as.data.frame =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">NA_value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)</span>
<span id="cb13-10"></span>
<span id="cb13-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scan an R project </span></span>
<span id="cb13-12">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">osv_scan</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r_project'</span>)</span></code></pre></div>
</section>
<section id="r-advisory-database" class="level3">
<h3 class="anchored" data-anchor-id="r-advisory-database">r-advisory-database</h3>
<p>r-advisory-database: <a href="https://github.com/RConsortium/r-advisory-database" class="uri">https://github.com/RConsortium/r-advisory-database</a></p>
</section>
<section id="troubleshooting" class="level3">
<h3 class="anchored" data-anchor-id="troubleshooting">Troubleshooting</h3>
<blockquote class="blockquote">
<p>“unsupported protocol scheme”“”</p>
</blockquote>
<p>This error is due to the missing <code>https://</code> in front of the URL. Add that and try again.</p>
<blockquote class="blockquote">
<p>“Error: unable to get the claims from the token: signature is invalid”</p>
</blockquote>
<p>Was the package manager server recently updated? The encryption key changes between versions (is re-generated). It is used for all secret management in PPM, including JWT tokens, encrypted configuration values like database passwords, and credentials for git builders. Logic needs to be added to manage the key across versions if you want things like API keys to persist. Follow the docs <a href="https://docs.posit.co/rspm/admin/appendix/encryption/">here</a> and consider setting the supported env var <code>PACKAGEMANAGER_ENCRYPTION_KEY</code>.</p>


</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/rspm_remote_admin_cli.html</guid>
  <pubDate>Wed, 22 Jan 2025 07:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>AWS Connections from Posit Team</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/aws-data-sources.html</link>
  <description><![CDATA[ 





<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>This article walks through the different access options for data resources in AWS. Access patterns for AWS resources will vary based on several general factors:</p>
<ol type="1">
<li>Where the code is running (e.g.&nbsp;Posit Workbench vs.&nbsp;Posit Connect)</li>
<li>The credential (e.g.&nbsp;OIDC, IAM roles, kerberos authentication, IAM instance profile and policy, username/password, etc.)</li>
<li>The connection method (e.g.&nbsp;Workbench managed credentials, R or Python package, ODBC, etc.)</li>
<li>Which AWS resource is being accessed</li>
</ol>
<section id="aws-data-resources" class="level3">
<h3 class="anchored" data-anchor-id="aws-data-resources">AWS data resources</h3>
<p>Popular data storage options in AWS include S3, Aurora, Redshift, and Athena. Each type is useful for different workflows.</p>
<table class="table">
<colgroup>
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
</colgroup>
<thead>
<tr class="header">
<th><strong>Service</strong></th>
<th><strong>Type</strong></th>
<th><strong>Data Type</strong></th>
<th><strong>Best For</strong></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Amazon S3</strong></td>
<td>Object Storage</td>
<td>Unstructured, Semi-structured</td>
<td>Data lakes, blob storage, backups, archive</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td><strong>Amazon RDS / Aurora</strong></td>
<td>Relational Database</td>
<td>Structured</td>
<td>Real-time transactions, enterprise apps, Aurora/MySQL/PostgreSQL/MariaDB/Microsoft SQL Server/Oracle database engines</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td><strong>Amazon Redshift</strong></td>
<td>Data Warehouse</td>
<td>Structured, Semi-structured</td>
<td>Analytics, Business Intelligence</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td><strong>Amazon Athena</strong></td>
<td>Interactive Query to S3</td>
<td>Semi-structured, Structured</td>
<td>Ad-hoc queries on S3 data</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</section>
<section id="aws-identity-and-access-management-iam" class="level3">
<h3 class="anchored" data-anchor-id="aws-identity-and-access-management-iam">AWS Identity and Access Management (IAM)</h3>
<p>The foundation of identity management on AWS is through the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html">Identity and Access Management (IAM) web service</a>. The basic principles are:</p>
<ul>
<li>A user is set up on IAM (this can be synced with an external authentication agent)</li>
<li>Their sign-in credentials are used to authenticate with AWS (either as an AWS account root user, an IAM user, or assuming an IAM role)</li>
<li>Sign-in credentials are matched to a principal (an IAM user, federated user, IAM role, or application)</li>
<li>Access is requested and granted to a specific service according to the relevant services policy</li>
</ul>
<p>Vocabulary:</p>
<ul>
<li><p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users.html">IAM users</a> are individual entities, typically a human user. By default IAM users have minimum permissions and access must be granted to them.</p></li>
<li><p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups.html">IAM groups</a> can be used to describe a collection of IAM users and grant permissions to a larger set of users, rather than individually.</p></li>
<li><p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">Roles</a> are an identity that has specific permissions. Any IAM user can be granted a role which would then give them access to those permissions for the time alotted. Services can also be granted roles which allows the service to perform actions on your behalf.</p></li>
<li><p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html">Policies</a> define permissions. They can be attached to identities or resources. These permissions define if a request is allowed or denied.</p></li>
</ul>
</section>
</section>
<section id="credentials" class="level2">
<h2 class="anchored" data-anchor-id="credentials">Credentials</h2>
<p>This guide will focus on the recommended tools for authentication to AWS resources when using Posit. The different methods that are commonly used are:</p>
<ul>
<li>User: Workbench Managed Credentials using Identity and Access Management (IAM) (recommended) 🔗</li>
<li>User: Developer managed credentials using Identity and Access Management (IAM), Secrets manager, or Key Management Service (KMS) 🔗</li>
<li>User or One-to-many: Developer managed keypair using an AWS secret key and access key 🔗</li>
<li>One-to-many: Grant trusted access to resource from VM using an IAM instance profile and policy or role 🔗</li>
</ul>
<p>Not supported:</p>
<ul>
<li>Browser authentication methods. Posit Workbench does not support this method. After a successful login, AWS will redirect you to <code>localhost</code> instead of your Workbench instance.</li>
</ul>
</section>
<section id="connection-methods" class="level2">
<h2 class="anchored" data-anchor-id="connection-methods">Connection Methods</h2>
<p>AWS supports many different types of connection methods. This guide will focus on the recommended connection methods when using Posit Workbench and Posit Connect.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset" data-group="language">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">R</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Python</a></li></ul>
<div class="tab-content" data-group="language">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p>Connection authentication is through the <a href="https://www.paws-r-sdk.com/">paws</a> package. In addition it provides the ability to return data objects for many of the resources inside AWS. For resources that are databases the <a href="https://odbc.r-dbi.org/reference/dbConnect-OdbcDriver-method.html">odbc</a> and <a href="https://dbi.r-dbi.org/">DBI</a> packages are also needed in order to create connection objects. Your Posit admin should follow the instructions on the <a href="https://docs.posit.co/pro-drivers/">Install Pro Drivers</a> page of the documentation.</p>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p>Connection authentication is through the <a href="https://pypi.org/project/boto3/">boto3</a> package. For resources that are databases this can be used in conjunction with data frame libraries like <a href="https://docs.pola.rs/">polars</a> or <a href="https://pandas.pydata.org/">pandas</a>. Your Posit admin should follow the instructions on the <a href="https://docs.posit.co/pro-drivers/">Install Pro Drivers</a> page of the documentation.</p>
</div>
</div>
</div>
</section>
<section id="user-credential-examples" class="level2">
<h2 class="anchored" data-anchor-id="user-credential-examples">User Credential Examples</h2>
<section id="development-environments-ie-workbench" class="level3">
<h3 class="anchored" data-anchor-id="development-environments-ie-workbench">Development Environments (IE Workbench)</h3>
<p>Development environments refer to environments where users write and execute cod, which include Posit Workbench. In the development environment the running user is executing the code, so both interactive and non-interactive authentiation methods are possible. Most commonly the credential method chosen uses the credetials of the running user.</p>
<p>The admin for Workbench can configure credentials on Workbench to help make this process easier for developers. Currently, this feature is only supported for RStudio Pro and VS Code sessions.</p>
</section>
<section id="example-access-patterns" class="level3">
<h3 class="anchored" data-anchor-id="example-access-patterns">Example Access Patterns</h3>
<section id="workbench-managed-creds-iam" class="level4">
<h4 class="anchored" data-anchor-id="workbench-managed-creds-iam">Workbench Managed Credentials</h4>
<p>Workbench Managed Credentials is the recommended way to access data on AWS from Posit Workbench. This method is secure and provides a nice user experience because Workbench manages the credentials for the user.This uses the AWS <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc.html">web identity federation</a> mechanism to securely set credentials in individual sessions.</p>
<p>An admin can configure Workbench to provide user-specific AWS credentials for sessions that are tied to their Single Sign-On credentials. Under the hood Workbench uses the AWS web identity federation mechanism (IAM with OpenID Connect) to set these credentials in individual sessions. For more details the administrator should refer to the <a href="https://docs.posit.co/ide/server-pro/authenticating_users/aws_credentials.html">AWS Credentials</a> page in the Posit Workbench Admin Guide.</p>
<section id="aws-configuration" class="level5">
<h5 class="anchored" data-anchor-id="aws-configuration">AWS Configuration</h5>
<p>AWS will need to be configured with an appropriate IAM Identity Provider and IAM Roles that Workbench users will assume. See the <a href="https://docs.posit.co/ide/server-pro/authenticating_users/aws_credentials.html#aws-configuration">AWS Configuration</a> page for step-by-step directions.</p>
<p>Users that need access to resources will need the policy associated with their IAM role updated.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset" data-group="resource">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">S3</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">RDS / Aurora</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Redshift</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-4" aria-controls="tabset-2-4" aria-selected="false">Athena</a></li></ul>
<div class="tab-content" data-group="resource">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<p>For access from Workbench to S3 that could look like <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/security_iam_service-with-iam.html">this</a>:</p>
<pre><code>{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "Allow user complete access to create and remove objects in the bucket",
            "Effect": "Allow",
            "Principal": {
                "AWS": "arn:aws:iam::12345678901:user/user"
            },
            "Action": "s3:*",
            "Resource": "arn:aws:s3:::amzn-s3-demo-bucket"
        }
    ]
}</code></pre>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<p>For access from Workbench to RDS / Aurora that could look like <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.IAMPolicy.html">this</a> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.IAMPolicy.html">this</a>:</p>
<pre><code>{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "rds-db:connect"
            ],
            "Resource": [
                "arn:aws:rds:us-east-2:637485797898:db:cluster-db/username"
            ]
        }
    ]
}</code></pre>
<p>The database will need to have user access granted, for example <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.DBAccounts.html#UsingWithRDS.IAMDBAuth.DBAccounts.PostgreSQL">for postgres use <code>GRANT rds_iam TO db_userx;</code></a>.</p>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<p>For access from Workbench to Redshift that could look like <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/generating-user-credentials.html">this</a>:</p>
<pre><code>{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": "redshift:GetClusterCredentials",
            "Resource": "arn:aws:redshift:us-east-2:637485797898:dbuser:demo-cluster/username"
        }
    ]
}</code></pre>
<p>The database will need to have user access granted, use the <a href="https://docs.aws.amazon.com/redshift/latest/dg/r_GRANT.html">GRANT</a> command. For more details refer to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/generating-iam-credentials-steps.html">the AWS documentation</a>.</p>
</div>
<div id="tabset-2-4" class="tab-pane" aria-labelledby="tabset-2-4-tab">
<p>For access from Workbench to Aurora that could look like <a href="https://docs.aws.amazon.com/athena/latest/ug/example-policies-workgroup.html">this</a>:</p>
<pre><code>{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "athena:*"
            ],
            "Resource": [
                "*"
            ]
        }
    ]
}</code></pre>
<p>There are two managed policies for Athena that are needed to grant access <code>AmazonAthenaFullAccess</code> and <code>AWSQuicksightAthenaAccess</code>.</p>
<p>Additional permissions may be needed in order to access the underlying dataset stored in S3.</p>
</div>
</div>
</div>
</section>
<section id="workbench-managed-creds-user" class="level5">
<h5 class="anchored" data-anchor-id="workbench-managed-creds-user">User Configuration</h5>
<p>When starting a new Workbench session, users should click on the AWS credential selection widget to login to AWS. After selecting and starting the session with attached credentials, the credentials needed to connect to AWS resources (<code>AWS_ROLE_ARN</code> and <code>AWS_WEB_IDENTITY_TOKEN_FILE</code>) are available within the session.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/aws-new-connection.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" data-glightbox="description: .lightbox-desc-1" title="AWS accounts in the New Session dialog’s credential selection widget"><img src="https://questionable.quarto.pub/blog/work/img/aws-new-connection.png" class="img-fluid figure-img" alt="AWS accounts in the New Session dialog’s credential selection widget"></a></p>
<figcaption>AWS accounts in the New Session dialog’s credential selection widget</figcaption>
</figure>
</div>
<p>The <a href="https://docs.posit.co/ide/server-pro/user/posit-workbench/managed-credentials/aws.html">Posit Workbench User Guide - Workbench-managed AWS Credentials</a> page in the Posit Workbench User Guide provides more details on logging into AWS via Posit Workbench.</p>
<p>It is not possible to share credentials amongst users with Workbench Managed Credentials.</p>
</section>
<section id="workbench-managed-credentials-r-and-python-examples" class="level5">
<h5 class="anchored" data-anchor-id="workbench-managed-credentials-r-and-python-examples">R and Python Examples</h5>
<p>Users can verify the available credentials within their Workbench session by installing the <a href="https://aws.amazon.com/cli/">AWS CLI</a>.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"awscliv2.zip"</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unzip</span> awscliv2.zip</span>
<span id="cb5-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./aws/install</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> ~/.local/aws-cli <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-b</span> ~/.local/bin</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">aws</span> sts get-caller-identity</span></code></pre></div>
<div class="tabset-margin-container"></div><div class="panel-tabset" data-group="language">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-5-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-5-1" aria-controls="tabset-5-1" aria-selected="true">R</a></li><li class="nav-item"><a class="nav-link" id="tabset-5-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-5-2" aria-controls="tabset-5-2" aria-selected="false">Python</a></li></ul>
<div class="tab-content" data-group="language">
<div id="tabset-5-1" class="tab-pane active" aria-labelledby="tabset-5-1-tab">
<div class="tabset-margin-container"></div><div class="panel-tabset" data-group="r-resource">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">S3</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">RDS / Aurora</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-3" aria-controls="tabset-3-3" aria-selected="false">Redshift</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-4" aria-controls="tabset-3-4" aria-selected="false">Athena</a></li></ul>
<div class="tab-content" data-group="r-resource">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(paws)</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create an S3 service object in the region you are working on</span></span>
<span id="cb6-4">s3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> paws<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">config =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">region =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us-east-2"</span>))</span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Is this needed? </span></span>
<span id="cb6-7">token <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build_auth_token</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">endpoint =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo-cluster-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">region =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us-east-2"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">user =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span>) </span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb6-9"></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># locate the s3 bucket you want</span></span>
<span id="cb6-11">bucket <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo-projects'</span></span>
<span id="cb6-12">s3<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_objects</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Bucket =</span> bucket)</span>
<span id="cb6-13"></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># upload data to s3 bucket</span></span>
<span id="cb6-15">s3<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">put_object</span>(</span>
<span id="cb6-16">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Bucket =</span> bucket,</span>
<span id="cb6-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Key =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data.csv'</span></span>
<span id="cb6-18">)</span>
<span id="cb6-19"></span>
<span id="cb6-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read data from s3 bucket</span></span>
<span id="cb6-21">s3_download <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> s3<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_object</span>(</span>
<span id="cb6-22">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Bucket =</span> bucket,</span>
<span id="cb6-23">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Key =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-24">)</span></code></pre></div>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<p>Currently there is an <a href="https://github.com/paws-r/paws/issues/324">issue</a> preventig the credentials from being correctly loaded. In order to get this working (until the issue is fixed) the AWS CLI can be used to retrieve a functional token with <code>aws rds generate-db-auth-token --hostname demo-cluster-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com --port 5432 --region us-east-2 --username username</code> or call out to Python and use boto3 (for example with reticulate).</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(odbc)</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DBI)</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(paws)</span>
<span id="cb7-4">rds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> paws<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rds</span>()</span>
<span id="cb7-5">token <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build_auth_token</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">endpoint =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo-cluster-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">region =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us-east-2"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">user =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span>) </span>
<span id="cb7-6">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(odbc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">odbc</span>(),</span>
<span id="cb7-7">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Driver   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PostgreSQL"</span>,</span>
<span id="cb7-8">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Server   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo-cluster-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com"</span>,</span>
<span id="cb7-9">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Database =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo_db"</span>,</span>
<span id="cb7-10">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">UID      =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span>,</span>
<span id="cb7-11">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">PWD      =</span> token,</span>
<span id="cb7-12">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Port     =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5432</span>,</span>
<span id="cb7-13">                      )</span></code></pre></div>
</div>
<div id="tabset-3-3" class="tab-pane" aria-labelledby="tabset-3-3-tab">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(odbc)</span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DBI)</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(paws)</span>
<span id="cb8-4">DB_NAME <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo_db'</span></span>
<span id="cb8-5">CLUSTER_IDENTIFIER <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo-cluster'</span></span>
<span id="cb8-6">DB_USER <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'username'</span></span>
<span id="cb8-7">redshift <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> paws<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">redshift</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">region =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us-east-2"</span>)</span>
<span id="cb8-8">temp_credentials <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> redshift<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_cluster_credentials</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DbUser =</span> DB_USER, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DbName =</span> DB_NAME, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ClusterIdentifier =</span> CLUSTER_IDENTIFIER, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">AutoCreate =</span> F)</span>
<span id="cb8-9">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(odbc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">odbc</span>(),</span>
<span id="cb8-10">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Driver   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Redshift"</span>,</span>
<span id="cb8-11">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Server   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo-cluster.cyvu3e2plbhb.us-east-2.redshift.amazonaws.com"</span>,</span>
<span id="cb8-12">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Database =</span> DB_NAME,</span>
<span id="cb8-13">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">UID      =</span> temp_credentials<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>DbUser,</span>
<span id="cb8-14">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">PWD      =</span> temp_credentials<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>DbPassword,</span>
<span id="cb8-15">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Port     =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5439</span></span>
<span id="cb8-16">                      )</span></code></pre></div>
</div>
<div id="tabset-3-4" class="tab-pane" aria-labelledby="tabset-3-4-tab">
<p>For R developers the <a href="https://www.paws-r-sdk.com/docs/athena/">paws</a> package can be used. More commonly, users connect directly to the data stored in S3.</p>
</div>
</div>
</div>
</div>
<div id="tabset-5-2" class="tab-pane" aria-labelledby="tabset-5-2-tab">
<div class="tabset-margin-container"></div><div class="panel-tabset" data-group="python-resource">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-4-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-1" aria-controls="tabset-4-1" aria-selected="true">S3</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-2" aria-controls="tabset-4-2" aria-selected="false">RDS / Aurora</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-3" aria-controls="tabset-4-3" aria-selected="false">Redshift</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-4" aria-controls="tabset-4-4" aria-selected="false">Athena</a></li></ul>
<div class="tab-content" data-group="python-resource">
<div id="tabset-4-1" class="tab-pane active" aria-labelledby="tabset-4-1-tab">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install boto3</span></code></pre></div>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyodbc</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> boto3</span>
<span id="cb10-3">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boto3.client(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s3'</span>)</span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Is this needed?</span></span>
<span id="cb10-5">token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.generate_db_auth_token(DBHostname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo-cluster-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com'</span>, Port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5432</span>,DBUsername<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span>, Region<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us-east-2"</span>)</span>
<span id="cb10-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(token)</span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span></span>
<span id="cb10-8">bucket <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s3.Bucket(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'amzn-s3-demo-bucket'</span>)</span>
<span id="cb10-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> obj <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> bucket.objects.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>():</span>
<span id="cb10-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(obj.key)</span></code></pre></div>
</div>
<div id="tabset-4-2" class="tab-pane" aria-labelledby="tabset-4-2-tab">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install pyodbc boto3</span></code></pre></div>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyodbc</span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> boto3</span>
<span id="cb12-3">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boto3.client(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rds'</span>, region_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us-east-2"</span>)</span>
<span id="cb12-4">token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.generate_db_auth_token(DBHostname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo-cluster-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com'</span>, Port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5432</span>,DBUsername<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span>, Region<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us-east-2"</span>)</span>
<span id="cb12-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(token)</span>
<span id="cb12-6">con<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pyodbc.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(driver<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{PostgreSQL}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb12-7">                   database<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo_db'</span>,</span>
<span id="cb12-8">                   uid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'username'</span>,</span>
<span id="cb12-9">                   pwd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>token,</span>
<span id="cb12-10">                   server<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo-cluster-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com'</span>,</span>
<span id="cb12-11">                   port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5432</span>,</span>
<span id="cb12-12">                   )</span>
<span id="cb12-13">con</span></code></pre></div>
</div>
<div id="tabset-4-3" class="tab-pane" aria-labelledby="tabset-4-3-tab">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install pyodbc boto3</span></code></pre></div>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyodbc</span>
<span id="cb14-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> boto3</span>
<span id="cb14-3">DB_NAME <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo_db'</span></span>
<span id="cb14-4">CLUSTER_IDENTIFIER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo-cluster'</span></span>
<span id="cb14-5">DB_USER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'username'</span></span>
<span id="cb14-6">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boto3.client(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'redshift'</span>, region_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us-east-2"</span>)</span>
<span id="cb14-7">cluster_creds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.get_cluster_credentials(DbUser<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DB_USER, DbName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DB_NAME, ClusterIdentifier<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CLUSTER_IDENTIFIER, AutoCreate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb14-8">temp_user <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cluster_creds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DbUser'</span>]</span>
<span id="cb14-9">temp_password <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cluster_creds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DbPassword'</span>]</span>
<span id="cb14-10">con<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pyodbc.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(driver<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{Redshift}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb14-11">                   database<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DB_NAME,</span>
<span id="cb14-12">                   uid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>temp_user,</span>
<span id="cb14-13">                   pwd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>temp_password,</span>
<span id="cb14-14">                   server<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo-cluster.cyvu3e2plbhb.us-east-2.redshift.amazonaws.com'</span>,</span>
<span id="cb14-15">                   port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5439</span>,</span>
<span id="cb14-16">                   )</span>
<span id="cb14-17">con</span></code></pre></div>
</div>
<div id="tabset-4-4" class="tab-pane" aria-labelledby="tabset-4-4-tab">
<p>For Python developers the <a href="https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/athena.html">boto3</a> package can be used. More commonly, users connect directly to the data stored in S3.</p>
</div>
</div>
</div>
</div>
</div>
</div>
<p>For more in depth information and examples, see:</p>
<ul>
<li>The Workbench User Guide section on <a href="https://docs.posit.co/ide/server-pro/user/posit-workbench/managed-credentials/aws.html">Workbench managed AWS credentials</a></li>
<li>The Connect User Guide <a href="https://docs.posit.co/connect/user/oauth-integrations/">OAuth Integrations</a> section for more detail on these concepts</li>
<li>The <a href="https://docs.posit.co/connect/cookbook/">Connect Cookbook</a> for complete examples of using OAuth credentials for deployment</li>
<li>The Connect Admin Guide section on <a href="https://docs.posit.co/connect/admin/integrations/oauth-integrations/">Oauth Integrations</a></li>
</ul>
</section>
</section>
<section id="workbench-developer-creds" class="level4">
<h4 class="anchored" data-anchor-id="workbench-developer-creds">Developer Managed Credentials</h4>
<p>If Workbench isn’t managing credentials on the behalf of users then users need the additional step of populating their credentials.</p>
<p>The AWS CLI can be used to retrieve a functional token with <code>aws rds generate-db-auth-token --hostname cluster-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com --port 5432 --region us-east-2 --username username</code>. This will grant a temporary token that by default lasts for 15 minutes. The developer will need to manually refresh the token as needed while working, unlike the case where Workbench will manage the token on their behalf.</p>
<p>After loading the token and performing appropriate authentication steps then the above steps can be taken to request resources from AWS.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset" data-group="language">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-6-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-6-1" aria-controls="tabset-6-1" aria-selected="true">R</a></li><li class="nav-item"><a class="nav-link" id="tabset-6-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-6-2" aria-controls="tabset-6-2" aria-selected="false">Python</a></li></ul>
<div class="tab-content" data-group="language">
<div id="tabset-6-1" class="tab-pane active" aria-labelledby="tabset-6-1-tab">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(paws)</span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(odbc)</span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DBI)</span>
<span id="cb15-4"></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build a token </span></span>
<span id="cb15-6">token <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build_auth_token</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">endpoint =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo-cluster-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">region =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us-east-2"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">user =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span>) </span>
<span id="cb15-7"></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the token with the ODBC connection </span></span>
<span id="cb15-9">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(odbc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">odbc</span>(),</span>
<span id="cb15-10">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Driver   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PostgreSQL"</span>,</span>
<span id="cb15-11">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Server   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo-cluster-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com"</span>,</span>
<span id="cb15-12">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Database =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo_db"</span>,</span>
<span id="cb15-13">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">UID      =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span>,</span>
<span id="cb15-14">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">PWD      =</span> token,</span>
<span id="cb15-15">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Port     =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5432</span>,</span>
<span id="cb15-16">                      )</span>
<span id="cb15-17"></span>
<span id="cb15-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Gather temp credentials </span></span>
<span id="cb15-19">temp_credentials <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> redshift<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_cluster_credentials</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DbUser =</span> DB_USER, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DbName =</span> DB_NAME, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ClusterIdentifier =</span> CLUSTER_IDENTIFIER, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">AutoCreate =</span> F)</span>
<span id="cb15-20"></span>
<span id="cb15-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the temp credentials with the ODBC connection</span></span>
<span id="cb15-22">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DBI<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(odbc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">odbc</span>(),</span>
<span id="cb15-23">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Driver   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Redshift"</span>,</span>
<span id="cb15-24">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Server   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo-cluster.cyvu3e2plbhb.us-east-2.redshift.amazonaws.com"</span>,</span>
<span id="cb15-25">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Database =</span> DB_NAME,</span>
<span id="cb15-26">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">UID      =</span> temp_credentials<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>DbUser,</span>
<span id="cb15-27">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">PWD      =</span> temp_credentials<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>DbPassword,</span>
<span id="cb15-28">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Port     =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5439</span></span>
<span id="cb15-29">                      )</span></code></pre></div>
</div>
<div id="tabset-6-2" class="tab-pane" aria-labelledby="tabset-6-2-tab">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install pyodbc boto3</span></code></pre></div>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyodbc</span>
<span id="cb17-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> boto3</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build a token </span></span>
<span id="cb17-5">token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.generate_db_auth_token(DBHostname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo-cluster-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com'</span>, Port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5432</span>,DBUsername<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span>, Region<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us-east-2"</span>)</span>
<span id="cb17-6"></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the token with the ODBC connection </span></span>
<span id="cb17-8">con<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pyodbc.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(driver<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{PostgreSQL}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb17-9">                   database<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo_db'</span>,</span>
<span id="cb17-10">                   uid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'username'</span>,</span>
<span id="cb17-11">                   pwd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>token,</span>
<span id="cb17-12">                   server<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo-cluster-db.cpbvczwgws3n.us-east-2.rds.amazonaws.com'</span>,</span>
<span id="cb17-13">                   port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5432</span>,</span>
<span id="cb17-14">                   )</span>
<span id="cb17-15"></span>
<span id="cb17-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Gather temp credentials </span></span>
<span id="cb17-17">DB_NAME <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo_db'</span></span>
<span id="cb17-18">CLUSTER_IDENTIFIER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo-cluster'</span></span>
<span id="cb17-19">DB_USER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'username'</span></span>
<span id="cb17-20">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boto3.client(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'redshift'</span>, region_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us-east-2"</span>)</span>
<span id="cb17-21">cluster_creds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.get_cluster_credentials(DbUser<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DB_USER, DbName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DB_NAME, ClusterIdentifier<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CLUSTER_IDENTIFIER, AutoCreate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb17-22">temp_user <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cluster_creds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DbUser'</span>]</span>
<span id="cb17-23">temp_password <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cluster_creds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DbPassword'</span>]</span>
<span id="cb17-24"></span>
<span id="cb17-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the temp credentials with the ODBC connection</span></span>
<span id="cb17-26">con<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pyodbc.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(driver<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{Redshift}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb17-27">                   database<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DB_NAME,</span>
<span id="cb17-28">                   uid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>temp_user,</span>
<span id="cb17-29">                   pwd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>temp_password,</span>
<span id="cb17-30">                   server<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'demo-cluster.cyvu3e2plbhb.us-east-2.redshift.amazonaws.com'</span>,</span>
<span id="cb17-31">                   port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5439</span>,</span>
<span id="cb17-32">                   )</span></code></pre></div>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="one-to-many-credential-examples" class="level2">
<h2 class="anchored" data-anchor-id="one-to-many-credential-examples">One-to-many Credential Examples</h2>
<section id="other-environments-ie-connect-etc" class="level3">
<h3 class="anchored" data-anchor-id="other-environments-ie-connect-etc">Other Environments (IE Connect, etc)</h3>
<p>In this section we will describe authentication patterns for all other environments for example production environments, deployed environments, etc. In these cases typically the code is executed by a service account making only non-interactive authentication methods possible.</p>
</section>
<section id="example-access-patterns-1" class="level3">
<h3 class="anchored" data-anchor-id="example-access-patterns-1">Example Access Patterns</h3>
<section id="trusted-creds-iam" class="level4">
<h4 class="anchored" data-anchor-id="trusted-creds-iam">Grant trusted access to resource from VM using an IAM instance profile and policy</h4>
<p>Trusted access between the server running the content and the resource can be granted using an IAM instance profile and policy. In this case all content running on the server has access to the resource.</p>
<section id="aws-configuration-1" class="level5">
<h5 class="anchored" data-anchor-id="aws-configuration-1">AWS Configuration</h5>
<p>Instead of assigning the roles to the IAM user it can be assigned to the AWS EC2 instance, slurm environment, or k8s cluster to allow access. This will broadlly allow access to that resource specifically for only that environment.</p>
<p>In this case the admin will need to:</p>
<ul>
<li>Create an AWS role that has the correct trusted entity type (for example, EC2)</li>
<li>Create a custom policy that provides access to the needed resources</li>
<li>Attach the IAM role to the environment (for example, the EC2 server)</li>
<li>Verify network connectivity</li>
</ul>
<p>See the AWS <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html">use IAM roles to grant permissions to applications running on EC2 instances</a> and the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html">EC2 IAM roles</a> pages for more details.</p>
</section>
</section>
<section id="keypair-creds" class="level4">
<h4 class="anchored" data-anchor-id="keypair-creds">Developer Managed Credentials</h4>
<p>If granting access through a trusted relationship between the VM and the resource isn’t feasible, then a non-interactive authentication method can be used like a developer managed keypair using an AWS secret key and access key. However this approach comes with security risks if the keypair isn’t closely guarded. In this case <a href="https://solutions.posit.co/connections/db/best-practices/managing-credentials/">securing credentials</a> is critical.</p>
<p>The documentation for <a href="https://www.paws-r-sdk.com/">paws</a> and <a href="https://pypi.org/project/boto3/">boto3</a> have extensive examples using keypair authentication.</p>



</section>
</section>
</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/aws-data-sources.html</guid>
  <pubDate>Tue, 21 Jan 2025 07:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/aws-new-connection.png" medium="image" type="image/png" height="78" width="144"/>
</item>
<item>
  <title>Dealing with ssh keys with ansible and pulumi</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/ansible-and-pulumi-ssh-keys.html</link>
  <description><![CDATA[ 





<p>Very specific learning for the day but if you are trying to run pulumi-with-ansible IAC and in a world of ssh key pain this bypasses the ssh-agent:</p>
<p>Pulumi.yaml</p>
<pre><code>  keypath: "~/.ssh/mykey.pem"</code></pre>
<p><strong>main</strong>.py</p>
<pre><code>pulumi.export('keypath', config.require("keypath"))</code></pre>
<p>playbook.yml</p>
<pre><code>    ansible_ssh_private_key_file: "{{ keypath }}"</code></pre>
<p>Or just add things properly to your ssh-agent (even better, start using the config):</p>
<pre><code># Set permissions 
chmod -R 400 ~/.ssh/mykey.pem # 600 is also fine

# Add keys to ssh-agent 
ssh-agent -s
eval `ssh-agent -s`
ssh-add ~/.ssh/mykeyaws.pem
ssh-add ~/.ssh/mykeyazure.pem</code></pre>



 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/ansible-and-pulumi-ssh-keys.html</guid>
  <pubDate>Wed, 02 Oct 2024 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Handling secrets and pinning files to Posit Connect</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/secrets-and-pinning-files.html</link>
  <description><![CDATA[ 





<p>Imagine a world where you can sleep peacefully at night knowing that your secrets (that you need for connecting to data sources) are being handled responsibly and will never leak.</p>
<section id="built-in-with-your-version-control" class="level2">
<h2 class="anchored" data-anchor-id="built-in-with-your-version-control">Built in with your version control</h2>
<p>Github has secret scanning for enterprise accounts or public repositories: <a href="https://docs.github.com/en/code-security/secret-scanning/introduction/about-secret-scanning" class="uri">https://docs.github.com/en/code-security/secret-scanning/introduction/about-secret-scanning</a></p>
</section>
<section id="environment-variables" class="level2">
<h2 class="anchored" data-anchor-id="environment-variables">Environment variables</h2>
<p>When working with pulling data from secure databases or other sources a developer might find themselves in a situation of needing to provide very sensitive information, such as a password or a token, in order to access the data that is needed or to successfully deploy a project. Handling those secrets in way that doesn’t expose them in the code directly is critical and where using <a href="https://db.rstudio.com/best-practices/deployment/">environmental variable’s for securing sensitive variables</a> is strongly recommended.</p>
<p>Additionally there may be parameters that are often needed that can be accessed as a variable more easily rather than having to type in every time.</p>
<p>For both of these cases knowing how environment variables can be leveraged can be very rewarding and it is surprising how little effort it can to take to set up.</p>
</section>
<section id="python-os-package" class="level2">
<h2 class="anchored" data-anchor-id="python-os-package">Python: <code>os</code> package</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Setting a new environment variable</span></span>
<span id="cb1-4">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"API_KEY"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"YOUR_API_KEY"</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieving the environment variable</span></span>
<span id="cb1-7">var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable_name"</span>]</span></code></pre></div>
</section>
<section id="r-usethis-package" class="level2">
<h2 class="anchored" data-anchor-id="r-usethis-package">R: <code>usethis</code> package</h2>
<p><code>usethis</code> has a function for creating and editing the .Renviron file:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(usethis)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Edit the global .Renviron file</span></span>
<span id="cb2-4">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edit_r_environ</span>()</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Edit the project specific .Renviron file</span></span>
<span id="cb2-7">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edit_r_environ</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scope =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"project"</span>)</span></code></pre></div>
<p>Add the variables to that file in the format variable_name = “variable_value” and save it. Restart the session so the new environment variables will be loaded with ctrl shift f10 or through the RStudio IDE with session -&gt; restart R.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Saved variables can be accessed with:</span></span>
<span id="cb3-2">variable_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable_name"</span>)</span></code></pre></div>
<p>While it’s recommended to add env vars to the environ file and not use in your code (otherwise it defeats the point), you can set an env var on the fly with:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.setenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>)</span></code></pre></div>
</section>
<section id="r-working-with-the-.renviron-file" class="level2">
<h2 class="anchored" data-anchor-id="r-working-with-the-.renviron-file">R: Working with the .Renviron file</h2>
<p>When R starts it loads a bunch of variables, settings, and configs for the user. This is really powerful and some of the magic for how it can work so apparently seamlessly.</p>
<p>However for power users we can leverage these behind the scenes config files so that we can include such things as variables in our project without including it in our code. The .Renviron file is the one most commonly interacted with for adding sensitive variables to a project in order to protect them from being exposed in the code.</p>
<p>With increased use of these behind the scenes config files and the growing direction of arranging code into projects there was the development of giving, on startup, having multiple options for each config file that can be loaded depending on what the user specifies. Broadly speaking there are two levels of config files: - User - Project</p>
<p>On startup, since R is trying to make things as seamless as possible for the user, it will use some logic to figure out which config to use. It will assume that if a project level config exists it should load that one (and not any others). If that project level config doesn’t exist, then it will default to the user level config. For more details on the different config files and the nuances see <a href="https://support.rstudio.com/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf">Managing R with .Rprofile, .Renviron, Rprofile.site, Renviron.site, rsession.conf, and repos.conf</a>.</p>
<p>Just to re-iterate the key takeaway: When in doubt note that the <strong>project level file is given preference over user level config files</strong>. Only if the project level config file doesn’t exist will the user level file be sourced/pulled in.</p>
<p>There is a really excellent <a href="https://rviews.rstudio.com/2017/04/19/r-for-enterprise-understanding-r-s-startup/">overview of R’s startup process here</a> but in short it can be thought of this way:</p>
<section id="example-with-a-user-level-.renviron-config-file" class="level4">
<h4 class="anchored" data-anchor-id="example-with-a-user-level-.renviron-config-file">Example with a user level .Renviron config file</h4>
<p>usethis has a function for creating and editing the .Renviron file</p>
<pre><code>library(usethis)
usethis::edit_r_environ()</code></pre>
<p>Add the variables to that file in the format <code>variable_name = "variable_value"</code> and save it. Restart the session so the new environment variables will be loaded with ctrl shift f10 or through the RStudio IDE</p>
<p>Saved variables can be accessed with:</p>
<pre><code>variable_name &lt;- Sys.getenv("variable_name")</code></pre>
<p>When working in a more complex environment structure where separate project, site, and user environments are being support <a href="https://support.rstudio.com/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf">this support article has useful information</a> with a <a href="https://rviews.rstudio.com/2017/04/19/r-for-enterprise-understanding-r-s-startup/">deeper dive into R’s startup here</a>.</p>
</section>
<section id="example-with-a-project-level-.renviron-config-file" class="level4">
<h4 class="anchored" data-anchor-id="example-with-a-project-level-.renviron-config-file">Example with a project level .Renviron config file</h4>
<p>Storing secrets securely can be done using the <a href="https://usethis.r-lib.org/reference/edit.html">edit_r_environ function from the usethis package</a>. For more overview see <a href="https://support.rstudio.com/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf">this overview</a>.</p>
<p>Example:</p>
<pre><code>library(usethis)
usethis::edit_r_environ(scope = "project")</code></pre>
<p>Accessing those stored parameters later can be done using <code>Sys.getenv("DB_NAME")</code>.</p>
<p>Be sure to add the project level .Renviron file to your .gitignore so you aren’t exposing secrets when code is being saved to your git repository. Similarly this can be done with the <code>edit_git_ignore(scope = c("user", "project"))</code> function. For more best practices see <a href="https://db.rstudio.com/best-practices/managing-credentials">securing credentials</a>.</p>
<p>After updating these files the project should be closed and re-opened for any additions to be pulled in. One way to do this is through session -&gt; restart R (ctrl-shift-f10).</p>
</section>
<section id="gitignore" class="level4">
<h4 class="anchored" data-anchor-id="gitignore">Gitignore</h4>
<p>While typically explicitly listing the file name is the desired addition, wildcards can be added to exclude a type of file. For example: <code>*.html</code>.</p>
<p>Example excluding a number of pieces that would be undesirable to check into version control:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>.gitignore</strong></pre>
</div>
<div class="sourceCode" id="cb8" data-filename=".gitignore" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># History files</span></span>
<span id="cb8-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.Rhistory</span></span>
<span id="cb8-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.Rapp.history</span></span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Session Data files</span></span>
<span id="cb8-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.RData</span></span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example code in package build process</span></span>
<span id="cb8-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">*-Ex.R</span></span>
<span id="cb8-10"></span>
<span id="cb8-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output files from R CMD build</span></span>
<span id="cb8-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/*.tar.gz</span></span>
<span id="cb8-13"></span>
<span id="cb8-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output files from R CMD check</span></span>
<span id="cb8-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/*.Rcheck/</span></span>
<span id="cb8-16"></span>
<span id="cb8-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># RStudio files</span></span>
<span id="cb8-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.Rproj.user/</span></span>
<span id="cb8-19"></span>
<span id="cb8-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># produced vignettes</span></span>
<span id="cb8-21"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">vignettes/*.html</span></span>
<span id="cb8-22"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">vignettes/*.pdf</span></span>
<span id="cb8-23"></span>
<span id="cb8-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OAuth2 token, see https://github.com/hadley/httr/releases/tag/v0.3</span></span>
<span id="cb8-25"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.httr-oauth</span></span>
<span id="cb8-26"></span>
<span id="cb8-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># knitr and R markdown default cache directories</span></span>
<span id="cb8-28"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/*_cache/</span></span>
<span id="cb8-29"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/cache/</span></span>
<span id="cb8-30"></span>
<span id="cb8-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Temporary files created by R markdown</span></span>
<span id="cb8-32"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">*.utf8.md</span></span>
<span id="cb8-33"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">*.knit.md</span></span>
<span id="cb8-34"></span>
<span id="cb8-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shiny token, see https://shiny.rstudio.com/articles/shinyapps.html</span></span>
<span id="cb8-36"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rsconnect/</span></span>
<span id="cb8-37"></span>
<span id="cb8-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Deployment details from rsconnect-python</span></span>
<span id="cb8-39"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rsconnect-python/</span></span>
<span id="cb8-40"></span>
<span id="cb8-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Temporary files</span></span>
<span id="cb8-42"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.DS_Store</span></span>
<span id="cb8-43"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">__pycache__</span></span>
<span id="cb8-44"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.ipynb_checkpoints</span></span>
<span id="cb8-45"></span>
<span id="cb8-46"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rmarkdown-notebook/flights.csv</span></span>
<span id="cb8-47"></span>
<span id="cb8-48"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.venv</span></span>
<span id="cb8-49"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">venv</span></span>
<span id="cb8-50"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.env</span></span>
<span id="cb8-51"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.Rprofile</span></span>
<span id="cb8-52"></span>
<span id="cb8-53"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/.luarc.json</span></span>
<span id="cb8-54"></span>
<span id="cb8-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OS and python artifacts</span></span>
<span id="cb8-56"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.DS_Store</span></span>
<span id="cb8-57"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">__pycache__/</span></span>
<span id="cb8-58"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">*.py[cod]</span></span>
<span id="cb8-59"></span>
<span id="cb8-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># docs artifacts</span></span>
<span id="cb8-61"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/docs/_site</span></span>
<span id="cb8-62"></span>
<span id="cb8-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Package Manager license</span></span>
<span id="cb8-64"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/ppm.lic</span></span></code></pre></div>
</div>
</section>
<section id="example-with-project-level-github-secrets-for-environment-variables" class="level4">
<h4 class="anchored" data-anchor-id="example-with-project-level-github-secrets-for-environment-variables">Example with project level github secrets for environment variables</h4>
<p>Another approach, particularly useful when automating testing and deployments using github actions, is to include the environment variables as secrets. Once this has been added through the git UI for the project they can then be referenced in the relevant deployment .yaml file with something like <code>CONNECT_ENV_SET_ZD_USER: ${{ secrets.ZD_USER }}</code>. In the R scripts they will be referenced as usual with something like <code>Sys.getenv("DB_NAME")</code>.</p>
</section>
<section id="references-for-adding-environment-variables-through-the-connect-ui" class="level4">
<h4 class="anchored" data-anchor-id="references-for-adding-environment-variables-through-the-connect-ui">References for adding environment variables through the Connect UI</h4>
<p>Starting with version 1.6, RStudio Connect allows <a href="https://docs.rstudio.com/connect/admin/security-and-auditing/#application-environment-variables">Environment Variables</a>. The variables are encrypted on-disk, and in-memory.</p>
<p>This can be done at the project level with <a href="https://db.rstudio.com/best-practices/deployment/">securing deployment</a> through the <a href="https://support.rstudio.com/hc/en-us/articles/228272368-Managing-your-content-in-RStudio-Connect">Connect UI</a>.</p>
</section>
</section>
<section id="handling-secret-files" class="level2">
<h2 class="anchored" data-anchor-id="handling-secret-files">Handling secret files</h2>
<p>Options:</p>
<ul>
<li>base64 encode the json string, set an environment variable, read the env var, and base64 decode it - If it fits in an env var, you could always cache it from the env var to your temp dir right before you use</li>
<li>Save it somewhere on Connect, let developers know the path</li>
<li>Use a supervisor script to save into the sandbox environment</li>
<li>Possibly save it as a pin?</li>
</ul>
<section id="useful-linux-commands-and-generating-a-dummy-key-file" class="level3">
<h3 class="anchored" data-anchor-id="useful-linux-commands-and-generating-a-dummy-key-file">Useful linux commands and generating a dummy key file</h3>
<pre><code># cd ~/.ssh
openssl genrsa -out test_key 4096
openssl rsa -in test_key -pubout -out test_key.pub
openssl pkcs8 -topk8 -inform pem -in test_key -outform PEM -v2 aes-256-cbc -out test_key.p8</code></pre>
<ul>
<li>The second command generate a RDS private key (unencrypted). https://www.openssl.org/docs/man1.1.1/man1/openssl-genrsa.html</li>
<li>The third command generate a public key for the private key above.</li>
<li>The fourth command generate an encrypted private key using a cipher aes-256-cbc. Please refer the following URL for more about AES 256 CBC.https://datatracker.ietf.org/doc/html/rfc3602</li>
</ul>
<pre><code># Set permissions 
chmod -R 400 ~/.ssh/mykey.pem 

# Add key to ssh-agent 
ssh-agent -s
eval `ssh-agent -s`
ssh-add ~/.ssh/mykey.pem</code></pre>
<p>If you already have a ssh key and want to get the key.pub public key info:</p>
<pre><code>ssh-keygen -y -f ~/.ssh/mykey.pem
ssh-keygen -y -f ~/.ssh/mykey.pem &gt; key.pub</code></pre>
</section>
<section id="pin-the-key-to-connect" class="level3">
<h3 class="anchored" data-anchor-id="pin-the-key-to-connect">Pin the key to Connect</h3>
<section id="setup" class="level4">
<h4 class="anchored" data-anchor-id="setup">Setup</h4>
<p>Env variables that need to be set are:</p>
<pre><code>CONNECT_SERVER=&lt;server, eg https://colorado.posit.co&gt;
CONNECT_API_KEY=&lt;API key from Connect server&gt;</code></pre>
</section>
<section id="code-for-pinning-a-file" class="level4">
<h4 class="anchored" data-anchor-id="code-for-pinning-a-file">Code for pinning a file</h4>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb13-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb13-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(pins)</span>
<span id="cb13-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rsconnect)</span>
<span id="cb13-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(usethis)</span>
<span id="cb13-8"></span>
<span id="cb13-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Check our environment variables</span></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># usethis::edit_r_environ()</span></span>
<span id="cb13-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Needs: </span></span>
<span id="cb13-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CONNECT_SERVER=&lt;server&gt;</span></span>
<span id="cb13-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CONNECT_API_KEY=&lt;API key from Connect server&gt;</span></span>
<span id="cb13-14"></span>
<span id="cb13-15">board <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">board_connect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">auth =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"envvar"</span>)</span>
<span id="cb13-16"></span>
<span id="cb13-17">board <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_upload</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paths=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_key"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_key"</span>)</span>
<span id="cb13-18">board <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_upload</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paths=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_key.p8"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_key-p8"</span>)</span>
<span id="cb13-19">board <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_upload</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paths=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_key.pub"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_key-pub"</span>)</span>
<span id="cb13-20"></span>
<span id="cb13-21">cache_path<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>board <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_download</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_key"</span>)</span>
<span id="cb13-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(cache_path)</span></code></pre></div>
</section>
<section id="python" class="level4">
<h4 class="anchored" data-anchor-id="python">Python</h4>
<p>Python pins package has parity: <a href="https://rstudio.github.io/pins-python/reference/pin_upload.html#pins.boards.BaseBoard.pin_upload" class="uri">https://rstudio.github.io/pins-python/reference/pin_upload.html#pins.boards.BaseBoard.pin_upload</a></p>
</section>
<section id="encode-key-file-as-base64-json-string" class="level4">
<h4 class="anchored" data-anchor-id="encode-key-file-as-base64-json-string">Encode key file as base64 json string</h4>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">librar</span>(readr)</span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(openssl)</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Locally, encode the key and save as environment variable</span></span>
<span id="cb14-5">key <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> openssl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">base64_encode</span>(readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_key.pub"</span>))</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save as env var</span></span>
<span id="cb14-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.setenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TEST_SSH_KEY"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"123"</span>)</span>
<span id="cb14-9">test_key_set <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TEST_SSH_KEY"</span>)</span>
<span id="cb14-10"></span>
<span id="cb14-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a tempfile in the sandboxed current location</span></span>
<span id="cb14-12">cached_key <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>()</span>
<span id="cb14-13"></span>
<span id="cb14-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cache the SSH file from the environment variable</span></span>
<span id="cb14-15">readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_file</span>(openssl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">base64_decode</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TEST_SSH_KEY"</span>)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> cached_key)</span></code></pre></div>
<p>it may be useful to nest in an if statement so that this only happens on Connect, but on Workbench it will still use the managed credentials:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use SSH key if on Connect, otherwise use managed credentials</span></span>
<span id="cb15-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RSTUDIO_PRODUCT"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CONNECT"</span>){</span>
<span id="cb15-3">}</span></code></pre></div>


</section>
</section>
</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/secrets-and-pinning-files.html</guid>
  <pubDate>Tue, 01 Oct 2024 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>R projects set up and maintenance</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/r-projects-setup.html</link>
  <description><![CDATA[ 





<p>Have you ever tried to use someone else’s repo and run into issues with package installation and breaking package versions? Or tried to work on a really old repository and been foiled while trying to set it up?</p>
<p>Projects have a standards problem - we need to realize that all the work we are doing exist in the framework of a project. By defining the elements of a project we can identify the parts that need to be made transparent and the tools (renv/venv) for making that happen.</p>
<p>What is a project?</p>
<ul>
<li>Code, data files, config files, images/assets</li>
<li>Defined / reproducible environment</li>
<li>Defined language version</li>
<li>Defined package versions and requirements</li>
</ul>
<p>What it’s not:</p>
<ul>
<li>Your editor</li>
<li>The actual packages / repositories</li>
<li>System dependencies</li>
</ul>
<section id="reading" class="level1">
<h1>Reading</h1>
<p>Environment management:</p>
<ul>
<li>Get started with renv in the RStudio IDE: <a href="https://docs.posit.co/ide/user/ide/guide/environments/r/renv.html">https://docs.posit.co/ide/user/ide/guide/environments/r/renv.html</a></li>
<li>You should be using renv: <a href="https://www.youtube.com/watch?v=GwVx_pf2uz4">https://www.youtube.com/watch?v=GwVx_pf2uz4</a></li>
<li>Using Public Package Manager : <a href="https://support.rstudio.com/hc/en-us/articles/360046703913-FAQ-for-RStudio-Public-Package-Manager">https://support.rstudio.com/hc/en-us/articles/360046703913-FAQ-for-RStudio-Public-Package-Manager</a></li>
</ul>
<section id="reproducible-package-environments-for-r---at-a-glance" class="level2">
<h2 class="anchored" data-anchor-id="reproducible-package-environments-for-r---at-a-glance">Reproducible package environments for R - At a glance</h2>
<p>Step 1: Use pre-compiled packages</p>
<ul>
<li>Go to Public Package Manager</li>
<li>Click on Get Started -&gt; Setup -&gt; Distribution and select your OS -&gt; Select Latest or Freeze and follow the instructions below the calendar.</li>
<li>For example:</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">REPO_NAME =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://packagemanager.rstudio.com/all/latest"</span>))</span></code></pre></div>
<p>Step 2: Use environment tracking</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set up a new version controlled R project and install renv:</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"renv"</span>)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(renv)</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize your project with renv and take a snapshot:</span></span>
<span id="cb2-6">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">init</span>()</span>
<span id="cb2-7">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">snapshot</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update all packages, or revert back to an earlier snapshot:</span></span>
<span id="cb2-10">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span>()</span>
<span id="cb2-11">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">revert</span>()</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># History is saved into version control:</span></span>
<span id="cb2-14">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">history</span>()</span></code></pre></div>
<p>Step 3: Easy collaboration</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Have your colleague configure their repository to match yours: </span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">REPO_NAME =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://packagemanager.rstudio.com/all/latest"</span>)) </span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Send a colleague the link to your project on git, they'll restore your environment with:</span></span>
<span id="cb3-5">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restore</span>()</span></code></pre></div>
</section>
<section id="r-projects-setup" class="level2">
<h2 class="anchored" data-anchor-id="r-projects-setup">R projects setup</h2>
<p>Setup the <code>renv</code> environment:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">activate</span>()</span>
<span id="cb4-2">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restore</span>()</span></code></pre></div>
<p>To run the app either open <code>app/app.R</code> and click the “Run App” button at the top of the IDE code pane or use:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runApp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"app"</span>)</span></code></pre></div>
</section>
<section id="deployment" class="level2">
<h2 class="anchored" data-anchor-id="deployment">Deployment</h2>
<section id="push-button" class="level3">
<h3 class="anchored" data-anchor-id="push-button">Push Button</h3>
<p>Open <code>app/app.R</code> and use the blue publish icon in the upper right corner of the IDE code pane.</p>
</section>
<section id="rsconnect-package" class="level3">
<h3 class="anchored" data-anchor-id="rsconnect-package">rsconnect package</h3>
<p>You can also deploy using the rsconnect package:</p>
<pre><code>rsconnect::deployApp(
  appDir = "app",
  appTitle = "Shiny Penguins"
)</code></pre>
</section>
<section id="git-backed" class="level3">
<h3 class="anchored" data-anchor-id="git-backed">Git-backed</h3>
<p>Update the code, and then run:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">rsconnect<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeManifest</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"app"</span>)</span></code></pre></div>
<p>Commit the new <code>manifest.json</code> file to the git repo along with the code.</p>
</section>
</section>
<section id="project-updates" class="level2">
<h2 class="anchored" data-anchor-id="project-updates">Project updates</h2>
<p>Use <a href="https://rstudio.github.io/renv/articles/renv.html">renv</a> to record the r package versions used</p>
<p>Create a <a href="https://docs.posit.co/connect/user/git-backed/#creating-a-manifest-file-from-r"><code>manifest.json</code> file</a> to support git-backed publishing</p>
</section>
<section id="all-about-renv" class="level2">
<h2 class="anchored" data-anchor-id="all-about-renv">All about renv</h2>
<p><strong>Why use renv?</strong></p>
<p>There is an excellent video by David Aja discussing why he started using renv at the 2022 RStudio Conference <a href="https://www.rstudio.com/conference/2022/talks/you-should-use-renv/">here</a>.</p>
<p>Ever had your code mysteriously stop working or start producing different results after upgrading packages, and had to spend hours debugging to find which package was the culprit? Ever tried to collaborate on code just to get stuck on trying to decipher various package dependencies?</p>
<p><a href="https://rstudio.github.io/renv/articles/renv.html">renv</a> helps you track and control package changes - making it easy to revert back if you need to. It works with your current methods of installing packages (<code>install.packages()</code>), and was designed to work with most data science workflows.</p>
<p>Who shouldn’t use renv?</p>
<ul>
<li>Package developers</li>
<li>?</li>
</ul>
<p># Terms</p>
<ul>
<li>R Project - a special kind of directory of files and supporting functionality.</li>
<li>Package - a collection of functions beyond base R that developers can install and use.</li>
<li>Library - a directory containing installed packages.</li>
</ul>
</section>
</section>
<section id="workflow" class="level1">
<h1>Workflow</h1>
<p>New project -&gt; updates -&gt; reverting -&gt; advanced</p>
</section>
<section id="new-project" class="level1">
<h1>New project</h1>
<p>Initialize your project with:</p>
<pre><code>library(renv)
renv::init()</code></pre>
<p>Look at the renv.lock file and see the information that has been captured about the packages supporting your project.</p>
</section>
<section id="making-updates" class="level1">
<h1>Making updates</h1>
<p>Try installing a new package and then look at the renv.lock file. What did you expect to happen? What do you see?</p>
<p>Now try running <code>renv::snapshot()</code>. What do you see now when you look at the renv.lock file?</p>
<p>The renv lock file is updated by you when you run the command to snapshot. This means you can update packages, or install new packages, without changing your lock file.</p>
</section>
<section id="how-to-revert" class="level1">
<h1>How to revert</h1>
<p>Practice updating the packages your project relies on, each time saving to git. You can see the history of your changes with:</p>
<p><code>renv::history()</code></p>
<p>If you want to revert back to an earlier snapshot you can do that with:</p>
<pre><code>## Revert to the most recent snapshot 
renv::revert()

## Alternatively we can revert to a specific snapshot by specifying the commit: 
db &lt;- renv::history()

# choose an older commit
commit &lt;- db$commit[5]

# revert to that version of the lockfile
renv::revert(commit = commit)</code></pre>
<p>Note: Currently, only Git repositories are supported by renv::history() and renv::revert().</p>
</section>
<section id="advanced-renv" class="level1">
<h1>Advanced renv</h1>
<p>There are a couple other commands that can be used depending on your workflow that are useful to know about.</p>
<p>Say that your organization has a managed package host, for example Package Manager, and is using the <a href="strategy">Shared Baseline</a>. Meaning that all developers in the organization are pointed to a snapshot of available packages frozen to a particular date when the managing team had intentionally tested and made them available. On some cadence, let’s say quarterly, the managing team goes through, performs testing again, and provides a new updated snapshot that is available for developers to switch to. There are a lot of advantages in switching with new features, resolved bugs, etc.</p>
<p>In order for developers to know that a new release has happened (that the local package dates are out of date in reference to the repo being pointed at) they can run:</p>
<pre><code>view(old.packages())</code></pre>
<p>The same process would be followed with then updating the packages, testing as needed, and then creating a new snapshot so the renv lock file is updated to the latest. This provides the added security that in case it does not pass testing the renv lock file will still point at the supported package versions and not the ones that caused the breakage.</p>
<p>One of the more recent releases of the renv package has included <a href="https://rstudio.github.io/renv/articles/profiles.html">having separate profiles for the project</a>. Meaning that a developer could have a production profile, a validation profile, and testing profile that can be easily switched between while working through their workflow towards deployment into production.</p>
<p>The renv.lock file can be manually changed to update the packages that are included with:</p>
<p><code>renv::modify()</code></p>
<p>Remove packages that are no longer needed with:</p>
<p><code>renv::clean()</code></p>
<p>Update everything to the latest for each package (according to the repository you are pointed at) with:</p>
<p><code>renv::update()</code></p>
</section>
<section id="troubleshooting" class="level1">
<h1>Troubleshooting</h1>
<p>Running a diagnostic:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diagnostics</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">project =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span></code></pre></div>
<p>Add more detail to logging:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">renv.download.trace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<p>If you are having particular issue with a package and it keeps being pulled in from the cache then doing a complete purge and reinstall can be useful:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">purge</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stringr"</span>)</span>
<span id="cb13-2">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">purge</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stringi"</span>)</span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stringr"</span>)</span></code></pre></div>
<p><code>renv::purge</code> removes packages completely from the package cache (which may be shared across projects) rather than just removing the package from the project which is what <code>renv::remove</code> does. This can be useful if a package which had previously been installed in the cache has become corrupted or unusable, and needs to be re-installed.</p>
<p>It may also be useful to verify both the OS you are currently useing as well as checking that the repository you are pointing towards is using the correct OS if it is pulling in the binaries.</p>
<p>For debian/ubuntu distributions:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">lsb_release</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-a</span></span></code></pre></div>
<p>For other distributions (more broadly cross-linux compatible command):</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> /etc/os-release</span></code></pre></div>
<p>Check the repository being pointed to and update it to use the URL from your package manager instance:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'repos'</span>)</span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">REPO_NAME =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://packagemanager.posit.co/cran/__linux__/jammy/latest"</span>))</span></code></pre></div>
<p>Some additional options and settings:</p>
<ul>
<li><p><code>Renv</code> comes with an over-ride option for the repository that could be recommended for users to run prior to re-initializing projects: <a href="https://rstudio.github.io/renv/reference/config.html?q=OS#renv-config-repos-override" class="uri">https://rstudio.github.io/renv/reference/config.html?q=OS#renv-config-repos-override</a></p>
<ul>
<li>It was discussed in <a href="https://stackoverflow.com/questions/65326540/how-to-change-r-repository-cran-from-renv-lock-to-get-packages-from-an-internal">this stackoverflow post</a> with this example (run from console): <code>Sys.setenv("RENV_CONFIG_REPOS_OVERRIDE" = "your_private_package_repository_url")</code></li>
</ul></li>
<li><p>As of renv 0.13.0 where it can now construct a prefix based on fields within the system’s /etc/os-release file: <a href="https://rstudio.github.io/renv/reference/paths.html#sharing-state-across-operating-systems" class="uri">https://rstudio.github.io/renv/reference/paths.html#sharing-state-across-operating-systems</a></p></li>
</ul>
</section>
<section id="library-paths" class="level1">
<h1>Library paths</h1>
<p>Find where your library is:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.libPaths</span>()</span>
<span id="cb17-2">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/sagemaker-user/R/x86_64-pc-linux-gnu-library/4.2"</span></span>
<span id="cb17-3">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/opt/R/4.2.1/lib/R/library"</span> </span></code></pre></div>
<p>For example when working in a system that has a mounted share drive then would want to check that libraries are being written to that share so you get persistence. Typically this means writing to inside the home directory. Check mounted drives with: <code>df -h</code></p>
<p>The next thing to check is permissions, for example with this command that shows full directory tree permissions</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">namei</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span> /home/sagemaker-user/test/r-examples</span></code></pre></div>
</section>
<section id="migrations" class="level1">
<h1>Migrations</h1>
<p>Consider using the script in this gist to migrate R and Python libraries: <a href="https://gist.github.com/edavidaja/5996ffeb042df2642c77c065c07f023d" class="uri">https://gist.github.com/edavidaja/5996ffeb042df2642c77c065c07f023d</a></p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete the existing libraries</span></span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlink</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"renv/library"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recursive=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set repo address</span></span>
<span id="cb19-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">REPO_NAME =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://colorado.posit.co/rspm/all/__linux__/jammy/latest"</span>))</span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (optional) add repo address to r profile</span></span>
<span id="cb19-8">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edit_r_profile</span>()</span>
<span id="cb19-9"></span>
<span id="cb19-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Restart R session</span></span>
<span id="cb19-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.rs.restartR</span>()</span>
<span id="cb19-12"></span>
<span id="cb19-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Re-install libraries</span></span>
<span id="cb19-14">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restore</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rebuild =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the existing venv</span></span>
<span id="cb20-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> .venv/bin/activate</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make note of all installed packages</span></span>
<span id="cb20-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip freeze <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> requirements-freeze.txt</span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Deactivate the venv and delete</span></span>
<span id="cb20-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">deactivate</span></span>
<span id="cb20-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-rf</span> .venv/</span>
<span id="cb20-10"></span>
<span id="cb20-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new virtual environment</span></span>
<span id="cb20-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv .venv</span>
<span id="cb20-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> .venv/bin/activate </span>
<span id="cb20-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span> pip wheel setuptools</span>
<span id="cb20-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> requirements-freeze.txt</span></code></pre></div>
</section>
<section id="repositories" class="level1">
<h1>Repositories</h1>
<p>Check your current repo with: <code>options('repos')</code></p>
<p>For example, you might see: <code>https://packagemanager.rstudio.com/all/latest</code> or <code>https://cran.rstudio.com/</code>.</p>
<p>Change your repo with: <code>options(repos = c(REPO_NAME = "https://colorado.rstudio.com/rspm/cran/__linux__/focal/2022-06-29"))</code> or <code>options(repos = c(REPO_NAME = "https://packagemanager.rstudio.com/all/latest"))</code></p>
<section id="troubleshooting-1" class="level2">
<h2 class="anchored" data-anchor-id="troubleshooting-1">Troubleshooting</h2>
<p>Bioconductor and Mass and R version: <a href="https://forum.posit.co/t/mass-not-available-for-r-4-3-3/188156/2" class="uri">https://forum.posit.co/t/mass-not-available-for-r-4-3-3/188156/2</a></p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/r-projects-setup.html</guid>
  <pubDate>Fri, 13 Sep 2024 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Python projects set up and maintenance</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/python-projects-setup.html</link>
  <description><![CDATA[ 





<p>Have you ever tried to use someone else’s repo and run into issues with package installation and breaking package versions? Or tried to work on a really old repository and been foiled while trying to set it up?</p>
<p>Projects have a standards problem - we need to realize that all the work we are doing exist in the framework of a project. By defining the elements of a project we can identify the parts that need to be made transparent and the tools (renv/venv) for making that happen.</p>
<p>What is a project?</p>
<ul>
<li>Code, data files, config files, images/assets</li>
<li>Defined / reproducible environment</li>
<li>Defined language version</li>
<li>Defined package versions and requirements</li>
</ul>
<p>What it’s not:</p>
<ul>
<li>Your editor</li>
<li>The actual packages / repositories</li>
<li>System dependencies</li>
</ul>
<section id="reproducible-package-environments-for-python---at-a-glance" class="level2">
<h2 class="anchored" data-anchor-id="reproducible-package-environments-for-python---at-a-glance">Reproducible package environments for Python - At a glance</h2>
<p>Step 1: Use scanned Python packages</p>
<p><code>Pip</code> can be already set up for you by your admins (with <code>sudo pip config set --global global.index-url https://pkg.current.posit.team/blocked-python/latest/simple</code>) whenever you use Workbench to use packages from package manager, no configuration needed. Check with:</p>
<pre><code>pip config list

# pip from stackoverflow article: https://stackoverflow.com/questions/51874974/how-can-i-get-pip-to-list-the-repositories-its-using
pip download --no-cache-dir "foo&lt;0" 2&gt;&amp;1 | grep Looking

# uv: https://docs.astral.sh/uv/guides/integration/alternative-indexes/
cat pyproject.toml</code></pre>
<p>As a user, configure pip to use your repository of choice with:</p>
<pre><code>pip config set global.index-url https://pkg.current.posit.team/blocked-python/latest/simple
pip config set --global global.trusted-host pkg.current.posit.team</code></pre>
<p>Alternatively, for a specific project add these to the top of the <code>requirements.txt</code> file</p>
<pre><code>--index-url https://pkg.current.posit.team/blocked-python/latest/simple
--trusted-host pkg.current.posit.team</code></pre>
<p>Step 2: Use environment tracking</p>
<pre><code># Activate your virtual environment: 
python -m venv .venv
. .venv/bin/activate</code></pre>
<pre><code># Take a snapshot of the environment: 
pip freeze &gt; requirements.txt</code></pre>
<p>Step 3: Easy collaboration</p>
<pre><code># Send a colleague the link to your project on git, they'll restore your environment with:
pip install -r requirements.txt</code></pre>
</section>
<section id="python-projects-setup" class="level2">
<h2 class="anchored" data-anchor-id="python-projects-setup">Python projects setup</h2>
<p>Setup the <code>venv</code> environment:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv .venv</span>
<span id="cb7-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">.</span> .venv/bin/activate</span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .venv\Scripts\activate # Windows</span></span></code></pre></div>
<p>Upgrade pip and then install needed packages:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span> pip</span>
<span id="cb8-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span> pip wheel setuptools rsconnect-python</span>
<span id="cb8-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> requirements.txt</span></code></pre></div>
<p>Run the application:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">shiny</span> run <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--reload</span> app.py</span></code></pre></div>
<p>Leave a virtual environment with:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">deactivate</span></span></code></pre></div>
</section>
<section id="jupyter-kernels-quarto-and-vs-code" class="level2">
<h2 class="anchored" data-anchor-id="jupyter-kernels-quarto-and-vs-code">Jupyter kernels, Quarto, and VS Code</h2>
<pre><code># Create a venv and install packages
python -m venv .venv
. .venv/bin/activate
source .venv/bin/activate
pip install -r requirements.txt
pip install --upgrade pip

# Register as kernel
pip install ipykernel jupyter
python3 -m ipykernel install --name "new_venv" --user

# Check for missing dependencies
python -m pip check

# Automatically uprade all packages from requirements.txt 
pip install pip-upgrader
pip-upgrade requirements.txt
pip install -r requirements.txt

# Freeze your requirements
pip freeze &gt; requirements.txt

Requires jupyter extension</code></pre>
<p>For quarto and vs code:</p>
<blockquote class="blockquote">
<p>If you create a virtual environment with venv in the env/ directory as described above, Visual Studio Code should automatically discover that environment when you load a workspace from the environment’s parent directory. Source: https://quarto.org/docs/projects/virtual-environments.html#vs-code</p>
</blockquote>
<pre><code>python3 -m venv env
source env/bin/activate
python3 -m pip freeze &gt; requirements.txt
python3 -m pip install -r requirements.txt</code></pre>
</section>
<section id="deploy" class="level2">
<h2 class="anchored" data-anchor-id="deploy">Deploy</h2>
<section id="rsconnect-python-cli" class="level3">
<h3 class="anchored" data-anchor-id="rsconnect-python-cli">rsconnect-python CLI</h3>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rsconnect</span> deploy shiny .</span></code></pre></div>
</section>
<section id="git-backed" class="level3">
<h3 class="anchored" data-anchor-id="git-backed">Git-backed</h3>
<p>Update the code, and then run:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rsconnect</span> write-manifest shiny <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--overwrite</span> .</span></code></pre></div>
<p>Commit the new <code>manifest.json</code> file to the git repo along with the code.</p>
</section>
</section>
<section id="project-updates" class="level2">
<h2 class="anchored" data-anchor-id="project-updates">Project updates</h2>
<p>Create the requirements file:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip freeze <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> requirements.txt</span></code></pre></div>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rsconnect</span> write-manifest shiny .</span></code></pre></div>
<p>If you are running into deploy issues where there are breaking packages you can edit the requirements file explicitly:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># requirements.txt generated by rsconnect-python on 2022-09-21 14:59:58.865441</span></span>
<span id="cb17-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">streamlit</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>=1.11.0</span></code></pre></div>
<p>To use a Package Manager repository with a specific project defined by a <code>requirements.txt</code> file, add <code>-i [repositoryURL]</code> to the top of your file, for example:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-i</span> https://packagemanager.posit.co/pypi/latest/simple</span>
<span id="cb18-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pandas</span></span>
<span id="cb18-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">scipy</span></span></code></pre></div>
<p>How to configure a pypi repository globally (using pip.conf): <a href="https://docs.posit.co/resources/install-python/#optional-configure-a-pypi-repository" class="uri">https://docs.posit.co/resources/install-python/#optional-configure-a-pypi-repository</a></p>
</section>
<section id="troubleshooting" class="level2">
<h2 class="anchored" data-anchor-id="troubleshooting">Troubleshooting</h2>
<section id="issues-with-python-not-being-on-path" class="level3">
<h3 class="anchored" data-anchor-id="issues-with-python-not-being-on-path">Issues with Python not being on path</h3>
<p>Set it manually to an installed Python version with:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">alias</span> python=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/opt/python/3.9.17/bin/python"</span></span></code></pre></div>
<p>Set it in your .bashrc on mac or linux so that it is set for your profile every time you log in (typically this is located in the root directory of your home folder):</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add this to your .bashrc</span></span>
<span id="cb20-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">PATH</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/opt/python/3.11.9/bin:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$PATH</span></span></code></pre></div>
<p>Check for the available python versions (if typically installed):</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-ld</span> /opt/python/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</section>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<p><a href="https://docs.posit.co/connect/user/shiny-python/">Posit Connect User Guide: Shiny for Python</a></p>


</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/python-projects-setup.html</guid>
  <pubDate>Fri, 13 Sep 2024 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Job templating in Kubernetes</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/job-templating-k8s.html</link>
  <description><![CDATA[ 





<p>This short writeup addresses a need to add an additional label to Workbench sessions started in a kubernetes environment. Specifically this was for an environemnt where an external Workbench server was launching sessions into a Kubernetes cluster. The recommended way to do this is to use job templating.</p>
<section id="job-templating-for-custom-labels-for-posit-workbench-with-k8s" class="level2">
<h2 class="anchored" data-anchor-id="job-templating-for-custom-labels-for-posit-workbench-with-k8s">Job templating for custom labels for Posit Workbench with k8s</h2>
<p>These are the granular steps for taking advantage of <a href="https://docs.posit.co/ide/server-pro/job_launcher/kubernetes_plugin.html#kube-templating">kubernetes object templating</a> that would work with an external Workbench instance launching into k8s:</p>
<ol type="1">
<li>Add to <code>launcher.kubernetes.conf</code>, <code>use-templating = 1</code></li>
<li>Use the launcher CLI to create the <code>job.tpl</code> and <code>service.tpl</code> files (see below for an example)</li>
<li>Confirm that the version called out in <code>job.tpl</code> and <code>service.tpl</code> (using <code>head job.tpl</code> and <code>head service.tpl</code> for example) are compatible with your workbench version (version 2.3.1 is latest)</li>
<li>Create <code>rstudio-library-templates-data.tpl</code> - for now this is a helm-only construct so it will need to be copied from the helm output (<a href="https://github.com/rstudio/helm/tree/main/charts/rstudio-workbench">helm repo</a>) (see example below for doing this with the <code>helm template</code> command)</li>
<li>Copy <code>job.tpl</code>, <code>service.tpl</code>, and <code>rstudio-library-templates-data.tpl</code> into the launcher scratch directory on the host machine (in this case your Workbench server outside of k8s) (see below for default for where this is located) and make sure that rstudio-server has read/write access</li>
</ol>
<p>For adding the new labels/values, here are good options:</p>
<ul>
<li>Modify <code>rstudio-library-templates-data.tpl</code> directly (either in the header bit, or lower under values/labels)</li>
<li>Modify the values in the helm values file (<a href="https://github.com/rstudio/helm/blob/5fb2ad5cecf84680c8e64e4d8123df9d4e0c1cc7/charts/rstudio-workbench/values.yaml#L82-L109">example</a>)</li>
<li>Recommended: Add the values at time of making the template, IE with <code>--set launcher.templateValues.job.labels.test=value \</code> (see below)</li>
</ul>
<p>From talking with a colleague they shared this example using helm to create the template with the added label values:</p>
<pre><code>helm template my-release rstudio/rstudio-workbench \
 --set launcher.useTemplates=true \
 --set launcherPem=test \
 --set session.defaultConfigMount=false \
 --set launcher.templateValues.job.labels.test=value \
 --set launcher.templateValues.job.labels.other=something-else \
 | less</code></pre>
<p>In that helm example:</p>
<ul>
<li><code>session.defaultConfigMount=false</code> prevents defining volumes and volumeMounts that are only relevant for the helm chart</li>
<li><code>launcherPem=test</code> speeds up templating</li>
<li><code>launcher.useTemplates=true</code> turns on templating (instead of job json overrides)</li>
</ul>
<p><strong>What if things go wrong?</strong></p>
<p>The rstudio-kubernetes-launcher CLI can <a href="https://docs.posit.co/ide/server-pro/job_launcher/kubernetes_plugin.html#validating-templates">verify templates</a> now!</p>
<p><strong>Playing with the rstudio-kubernetes-launcher CLI:</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/usr/lib/rstudio-server/bin/rstudio-kubernetes-launcher</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--help</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/usr/lib/rstudio-server/bin/rstudio-kubernetes-launcher</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--generate-templates</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--scratch-path</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/tmp/hello</span></code></pre></div>
<p><strong>Default scratch path:</strong></p>
<pre><code> # mount into the default scratch-path
 - name: session-templates
  mountPath: "/var/lib/rstudio-launcher/Kubernetes/rstudio-library-templates-data.tpl"
  subPath: "rstudio-library-templates-data.tpl"
 - name: session-templates
  mountPath: "/var/lib/rstudio-launcher/Kubernetes/job.tpl"
  subPath: "job.tpl"
 - name: session-templates
  mountPath: "/var/lib/rstudio-launcher/Kubernetes/service.tpl"
  subPath: "service.tpl"</code></pre>
</section>
<section id="another-approach-using-json-over-rides-on-posit-workbench-with-k8s" class="level2">
<h2 class="anchored" data-anchor-id="another-approach-using-json-over-rides-on-posit-workbench-with-k8s">Another approach using json over-rides on Posit Workbench with k8s</h2>
<p>Potentially json over-rides could work but my understanding is that this would overwrite ALL labels.</p>
<p>use this to add a label:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/rstudio/launcher.kubernetes.profiles.conf</strong></pre>
</div>
<div class="sourceCode" id="cb4" data-filename="/etc/rstudio/launcher.kubernetes.profiles.conf" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">job-json-overrides=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/spec/template/spec/labels"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/etc/rstudio/labels"</span></span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/rstudio/labels</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="/etc/rstudio/labels" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb5-2">  {</span>
<span id="cb5-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"applicationid"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"workbench"</span>,</span>
<span id="cb5-4">    <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">"label":</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">["value"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-5">  <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/job-templating-k8s.html</guid>
  <pubDate>Wed, 21 Aug 2024 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Google data storage and R</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/google-resources.html</link>
  <description><![CDATA[ 





<section id="overview" class="level1">
<h1>Overview</h1>
<p>Access to resources in google (bigquery, drive, etc) will depend on where the user is connecting from:</p>
<ul>
<li>Local desktop: any method is fine</li>
<li>Workbench / server web app based: “OOB” workflows or non-interactive</li>
<li>Connect / server web app non-interactive: Non-interactive only</li>
</ul>
</section>
<section id="interactive-workflow" class="level1">
<h1>Interactive workflow</h1>
<p>In order to get this working on Workbench, we need to use the OOB method so we don’t have to mess with bouncing between URL’s.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(googlesheets4)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(gargle)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(googledrive)</span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load/refresh existing credentials, if available</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># otherwise, go to browser for authentication and authorization (only works if not behind a proxy)</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drive_auth</span>()</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gargle_oauth_client_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"web"</span>)       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pseudo-OOB, use this when on Workbench, Connect, etc. </span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># options(gargle_oauth_client_type = "installed") # conventional OOB - this doesn't work for me, looks like it was deprecated in 2023</span></span></code></pre></div>
</section>
<section id="hacky-workflow-aka-oauth-user-token-re-discovered" class="level1">
<h1>Hacky workflow AKA Oauth user token re-discovered</h1>
<p>The idea is to make it render once, then use the token in the cache for future authentications. This will likely need to be periodically updated (think, annually) whenever the token expires.</p>
<p>This is the least recommended because of security challenges and having to manage an ecosystem of tokens, but it’s hard to deny the appeal because it means a service account isn’t needed!</p>
<p>We’ll need to change the location of the cached token to within the project so that when we deploy to Connect it will be included. Security here is tricky since the token is an exposed file, so care should be taken.</p>
<p>Reference: <a href="https://gargle.r-lib.org/articles/non-interactive-auth.html#sidebar-1-deployment" class="uri">https://gargle.r-lib.org/articles/non-interactive-auth.html#sidebar-1-deployment</a></p>
<p>Step 1: Do this once interactively to get a token</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a token interactively, but we can reuse it later</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pseudo-OOB - this will bounce us out to a webpage, but we don't have to bounce back, we'll copy a code instead that we'll use like a password</span></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gargle_oauth_client_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"web"</span>) </span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># designate project-specific cache</span></span>
<span id="cb3-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gargle_oauth_cache =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".secrets"</span>)</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do anything that triggers auth, in this case I want to tie it to my email identity</span></span>
<span id="cb3-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gargle_oauth_email =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lisamaeanders@gmail.com"</span>)</span>
<span id="cb3-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drive_auth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">email =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lisamaeanders@gmail.com"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cache =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".secrets"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">use_oob =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use a 'read only' scope, so it's impossible to edit or delete files</span></span>
<span id="cb3-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drive_auth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scopes =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drive.readonly"</span>)</span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This sets an option that allows gargle to use cached tokens whenever there’s a unique match:</span></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#options(gargle_oauth_email = TRUE)</span></span></code></pre></div>
<p>Step 2: Downstream use we will reuse the token we got interactively earlier</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Revise code so it uses the pre-authorized token </span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drive_auth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cache =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".secrets"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">email =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lisamaeanders@gmail.com"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">use_oob =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now use googledrive</span></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drive_find</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</section>
<section id="when-deployed-in-gcp-use-existing-cloud-credentials-and-go-keyless" class="level1">
<h1>When deployed in GCP use existing cloud credentials and go “keyless”</h1>
<p>When deployed already in GCP then there is an underlying service account already assigned to your infrastructure. The gotcha is that it is unlikely that the pre-existing service account has the “scope” IE the access to what you need.</p>
<p>Additional scopes need to be added to that service account identity, for example:</p>
<ul>
<li>That authentication might be successful for BigQuery, because the service account has the scope ‘cloud-platform’</li>
<li>That authentication won’t be successful for drive, because it doesn’t have the ‘drive’ scope</li>
</ul>
<p>Additional scope is added at the GCP compute instance level either when the instance is created or the instance can be stopped and the scope added.</p>
<p>Check for GCE credentials with (super curious what this returns for you, probably worth saving the output so it can be restored in the future if needed):</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">credentials_gce</span>()</span></code></pre></div>
<p>This also means that if you are GCE and getting errors that may be because it is using that service account for access, which doesn’t have the correct scoping. You may need to remove the credentials for that account so it can try to create fresh credentials:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># removes `credentials_gce()` from gargle's registry</span></span>
<span id="cb6-2">gargle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cred_funs_add</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">credentials_gce =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span></code></pre></div>
<p>Reference: <a href="https://gargle.r-lib.org/articles/non-interactive-auth.html#embrace-credentials-available-in-certain-cloud-settings" class="uri">https://gargle.r-lib.org/articles/non-interactive-auth.html#embrace-credentials-available-in-certain-cloud-settings</a></p>
</section>
<section id="non-interactive-workflow" class="level1">
<h1>Non-interactive workflow</h1>
<p>Reference: <a href="https://gargle.r-lib.org/articles/non-interactive-auth.html" class="uri">https://gargle.r-lib.org/articles/non-interactive-auth.html</a></p>
<section id="service-account-token" class="level2">
<h2 class="anchored" data-anchor-id="service-account-token">Service account token</h2>
<p>Follow <a href="https://gargle.r-lib.org/articles/get-api-credentials.html#service-account-token">these</a> steps:</p>
<ul>
<li>Create a service account</li>
<li>From the <a href="https://console.cloud.google.com">GCP Console</a>, in the target GCP Project, go to IAM &amp; Admin &gt; Service accounts</li>
<li>Assign permissions: googledrive docs does not have any explicit roles, service account used to test bigrquery has roles BigQuery Admin and Storage Admin</li>
<li>After creating the service account, click on the three dots and “actions”, manage keys, add key as json, download credentials as json file</li>
<li>This key is a secret! Consider how it should be protected</li>
<li>Provide path of json file to authentication</li>
<li>Grant the service account permissions to resources as needed (it doesn’t inherit permissions) (For example, I had to visit https://console.developers.google.com/apis/api/drive.googleapis.com/overview?project=redacted to enable access for google drive and gogle sheets, which it gave me the link to in an error message for my specific project)</li>
</ul>
<p>Reference: <a href="https://gargle.r-lib.org/articles/non-interactive-auth.html#provide-a-service-account-token-directly" class="uri">https://gargle.r-lib.org/articles/non-interactive-auth.html#provide-a-service-account-token-directly</a> and <a href="https://gargle.r-lib.org/articles/get-api-credentials.html#service-account-token" class="uri">https://gargle.r-lib.org/articles/get-api-credentials.html#service-account-token</a></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use a service account token, like drive_auth(path = "/path/to/your/service-account-token.json")</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># drive_auth(path = Sys.getenv("google_drive_service_account"), scopes = "drive.readonly")</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># drive_auth(path = Sys.getenv("google_drive_service_account"), scopes = "drive.readonly")</span></span>
<span id="cb7-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">credentials_service_account</span>(</span>
<span id="cb7-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#scopes = "https://www.googleapis.com/auth/userinfo.email",</span></span>
<span id="cb7-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"google_drive_service_account"</span>)</span>
<span id="cb7-7">)</span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now use googledrive</span></span>
<span id="cb7-9">googledrive<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drive_find</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</section>
</section>
<section id="troubleshooting" class="level1">
<h1>Troubleshooting</h1>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># see user associated with current token</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drive_user</span>()</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List credentials </span></span>
<span id="cb8-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cred_funs_list</span>()</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># force the OAuth web dance</span></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#drive_auth(email = NA)</span></span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># provides an OAuth2 “situation report”, only relevant for oauth2 user tokens (not service accounts, etc)</span></span>
<span id="cb8-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gargle_oauth_sitrep</span>() </span>
<span id="cb8-12"></span>
<span id="cb8-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check if a oauth cache is being used</span></span>
<span id="cb8-14">gargle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gargle_oauth_cache</span>()</span>
<span id="cb8-15"></span>
<span id="cb8-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Default is to cache OAuth access credentials in the folder ~/.cache/gargle between R sessions</span></span>
<span id="cb8-17"></span>
<span id="cb8-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># retrieve the currently configured OAuth client and API key, respectively.</span></span>
<span id="cb8-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># without configuring auth these are null</span></span>
<span id="cb8-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drive_oauth_client</span>() </span>
<span id="cb8-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drive_api_key</span>() </span>
<span id="cb8-22"></span>
<span id="cb8-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># see your token file in the cache</span></span>
<span id="cb8-24"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".secrets/"</span>)</span>
<span id="cb8-25"></span>
<span id="cb8-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For troubleshooting purposes, you can set a gargle option to see verbose output about the execution of gargle::token_fetch():</span></span>
<span id="cb8-27"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gargle_verbosity =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"debug"</span>)</span>
<span id="cb8-28"></span>
<span id="cb8-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Gargle uses port 1410 for auth, check if it is blocked with (on nix systems): sudo lsof -i :1410</span></span></code></pre></div>
</section>
<section id="security" class="level1">
<h1>Security</h1>
<p>Want to learn more about managing tokens? Read <a href="https://gargle.r-lib.org/articles/managing-tokens-securely.html">this</a></p>
</section>
<section id="resources" class="level1">
<h1>Resources</h1>
<ul>
<li>Exploring non-interactive auth workflows would also be really useful (and set us up for successful deployments to Connect down the road): <a href="https://gargle.r-lib.org/articles/non-interactive-auth.html" class="uri">https://gargle.r-lib.org/articles/non-interactive-auth.html</a></li>
<li>Might also be useful to refer to the google docs on auth: <a href="https://cloud.google.com/bigquery/docs/authentication" class="uri">https://cloud.google.com/bigquery/docs/authentication</a></li>
<li>This section is also really useful: <a href="https://bigrquery.r-dbi.org/#authentication-and-authorization" class="uri">https://bigrquery.r-dbi.org/#authentication-and-authorization</a></li>
<li>Likely OOB auth is needed, with options(gargle_oob_default = TRUE)</li>
<li>“If you are interacting with R within a browser (applies to RStudio Server, Posit Workbench, Posit Cloud, and Google Collaboratory), you need OOB auth or the pseudo-OOB variant. If this does not happen automatically, you can request it explicitly with use_oob = TRUE or, more persistently, by setting an option via options(gargle_oob_default = TRUE).”</li>
<li>Reference: <a href="https://googledrive.tidyverse.org/reference/drive_auth.html" class="uri">https://googledrive.tidyverse.org/reference/drive_auth.html</a></li>
<li>Also really useful: <a href="https://gargle.r-lib.org/articles/non-interactive-auth.html" class="uri">https://gargle.r-lib.org/articles/non-interactive-auth.html</a></li>
<li>And another one that is really useful: <a href="https://bigrquery.r-dbi.org/#authentication-and-authorization" class="uri">https://bigrquery.r-dbi.org/#authentication-and-authorization</a></li>
<li>There’s an example on this page using a json file downloaded from the google developers console: <a href="https://googledrive.tidyverse.org/reference/drive_auth_configure.html#ref-examples" class="uri">https://googledrive.tidyverse.org/reference/drive_auth_configure.html#ref-examples</a></li>
<li>From the google cloud console these are the options we have for generating credentials: API key, Oauth client ID, service account. (<a href="https://console.cloud.google.com/" class="uri">https://console.cloud.google.com/</a> -&gt; API’s and Services -&gt; Create credentials)</li>
<li>Basically you (1) create a service account then (2) create a key (see <a href="https://developers.google.com/identity/protocols/oauth2/service-account" class="uri">https://developers.google.com/identity/protocols/oauth2/service-account</a>)</li>
<li>Auth from web: <a href="https://gargle.r-lib.org/articles/auth-from-web.html" class="uri">https://gargle.r-lib.org/articles/auth-from-web.html</a></li>
</ul>


</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/google-resources.html</guid>
  <pubDate>Fri, 21 Jun 2024 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Debugging R Package Environments (renv): A long winded writeup</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/renv-environments.html</link>
  <description><![CDATA[ 





<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: false</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| include: false</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(renv)</span></code></pre></div>
<p>This vignette is an overview of environment management in R and a comprehensive summary of the different options that can be configured to support different workflows. Environment management in R is intentionally complex, so figuring out where to even start when debugging can be a challenge. This vignette also goes into specific scenarios that might come up with environment management and recommendations.</p>
<section id="at-a-glance" class="level2">
<h2 class="anchored" data-anchor-id="at-a-glance">At a glance</h2>
<p>Overview of the R environment:</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph LR
    
    subgraph ENV[Working R Environment]
    
    subgraph CONFIG[Config]
    
      subgraph LOCAL[Local R Config]
      RENVIRON[.Renviron]
      RPROFILE[.Rprofile]
      end
    
      subgraph SERVER[Server R Config]
      SRENVIRON[Renviron.site&lt;br/&gt;etc/R.home/Renviron.site]
      SRRPROFILE[Rprofile.site&lt;/br&gt;etc/Rprofile.site]
      
        subgraph W[Posit Workbench]
        REPOS["repos.conf"]
        RSESSION["rsession.conf"] 
        end
    
      end
      
      LOCAL-- User settings &lt;br/&gt;override&lt;br/&gt;global settings --&gt; SERVER
      
      subgraph RENVCONFIG[Renv Config]
      RENVPROJECT[Project Settings&lt;br/&gt;renv/settings.json]
      
        subgraph RENVUSER[Config: User Level Settings]
        RENVUR["User Renviron&lt;br/&gt;~/.Renviron"]
        RENVRI["R installation&lt;br/&gt;etc/Rprofile.site"]
        RENVP["Project&lt;br/&gt;.Rprofile"]
        end
      end      
      
    end
    
    subgraph LIBRARY[Package Library Path]

      USERLIBRARY["User&lt;br/&gt;R_HOME/library&lt;br/&gt;~/R"]

      SITELIBRARY[Site&lt;br/&gt;R_HOME/site-library]
      
      subgraph RENV[Renv]
      direction TB
      CACHE["Cache&lt;br/&gt;~/.cache/R/renv/"]
      PROJECTCACHE["Project Cache&lt;br/&gt;~/renv/library/"]
      CACHE-- Unless isolated, symlink --&gt; PROJECTCACHE; 
      SHAREDCACHE[Cross-User Shared Cache]
      end

    end  
    
    LIBRARY --&gt; CONFIG
    CONFIG --&gt; LIBRARY
    
    end
    
    subgraph REPOSITORY[Package Repository Source]
      direction TB
    
      subgraph PPM[Posit Package Manager]
      RE[Package Binaries]
      RP[Package Sources]
      end
    
      CRAN[CRAN/Pypi/BioConductor/etc]
    
      CRAN -- Posit sync service --&gt; PPM;

    end
    
    UA[User-Agent request header]-- Binary requested&lt;br/&gt;Details: OS, R version --&gt;PPM
    
    UA --&gt; ENV

</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</section>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<section id="environment-management-strategies" class="level2">
<h2 class="anchored" data-anchor-id="environment-management-strategies">Environment Management strategies</h2>
<p>There are severeal common <a href="https://solutions.posit.co/envs-pkgs/environments/">environment management strategies</a>. Some strategies can be more prone to pain and challenges later than others. Thinking about the appropriate strategy for your organization in advance can save you from a lot of hurt later.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://solutions.posit.co/envs-pkgs/environments/reproduce/reproducibility-strategies-and-danger-zones.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" data-glightbox="description: .lightbox-desc-1" title="alt text"><img src="https://solutions.posit.co/envs-pkgs/environments/reproduce/reproducibility-strategies-and-danger-zones.png" class="img-fluid figure-img" alt="alt text"></a></p>
<figcaption>alt text</figcaption>
</figure>
</div>
<p>Image: <a href="https://solutions.posit.co/envs-pkgs/environments/reproduce/reproducibility-strategies-and-danger-zones.png" class="uri">https://solutions.posit.co/envs-pkgs/environments/reproduce/reproducibility-strategies-and-danger-zones.png</a></p>
<table class="table">
<thead>
<tr class="header">
<th><a href="https://solutions.posit.co/envs-pkgs/environments/snapshot/">Snapshot and Restore</a></th>
<th><a href="https://solutions.posit.co/envs-pkgs/environments/shared/">Shared Baseline</a></th>
<th><a href="https://solutions.posit.co/envs-pkgs/environments/validated/">Validated</a></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>All developers are responsible for their own environment management, and enabled for making their enviornments reproduceable through the use of renv’s <code>snapshot()</code> capability. Users can freely access and install packages while following a package-centric workflow. Users are responsible for recording their dependencies for their projects.</td>
<td>All developers in the organization are pointed to a snapshot of available packages frozen to a particular date when the managing team had intentionally tested and made them available. On some cadence, let’s say quarterly, the managing team goes through, performs testing again, and provides a new updated snapshot that is available for developers to switch to. There are a lot of advantages in switching with new features, resolved bugs, etc.</td>
<td>Similar to the shared baseline stratgey the difference is that changes to the package environment go through an approval and auditing process, and access to packages is strictly enforced.</td>
</tr>
</tbody>
</table>
</section>
<section id="understanding-rs-startup-behavior" class="level2">
<h2 class="anchored" data-anchor-id="understanding-rs-startup-behavior">Understanding R’s startup behavior</h2>
<p>R has a lot of flexibility for different workflows, which is a great thing. However, it also means that the answer to trying to change specific pieces of that customized behavior can have complex answers that depend on example what has been implemented in your environment.</p>
<p>This diagram posted by <a href="https://twitter.com/thomasp85/status/961553618196418560">Thomas Lin Pedersen on X</a> showing the R startup flowchart went viral, and for good reason:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/thomasp85.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-2" data-glightbox="description: .lightbox-desc-2" title="R Startup diagram by Thomas Lin Pedersen on X"><img src="https://questionable.quarto.pub/blog/work/img/thomasp85.jpg" class="img-fluid figure-img" alt="R Startup diagram by Thomas Lin Pedersen on X"></a></p>
<figcaption>R Startup diagram by <a href="https://twitter.com/thomasp85/status/961553618196418560">Thomas Lin Pedersen on X</a></figcaption>
</figure>
</div>
<p>Posit <a href="https://docs.posit.co/resources/install-r/">provides precompiled R binaries</a> for anyone to use, free of charge. The <a href="https://github.com/rstudio/r-builds">public respository</a> can be visited to understand how they are compiled.</p>
</section>
<section id="where-packages-come-from" class="level2">
<h2 class="anchored" data-anchor-id="where-packages-come-from">Where packages come from</h2>
<p>Packages can come from a couple places, a tarball, version control location, but most commonly is the URL of the repository that the package will be installed from. The package source can be set by assigning an environment variable with the desired location. More than one repository can be specified, for example with:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">repos <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">CRAN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://cloud.r-project.org"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">WORK =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://work.example.org"</span>)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> repos)</span></code></pre></div>
<p>Setting it this way would be a “one off” that would change the “package repository” for the current session. In order to persist the change of repository location, and other settings, various configurations can be applied.</p>
<p>Typically “package repository”, among developers, is used to refer to R and Python package repositories (not to be confused with linux package repositories, etc). Most R and Python package managers serve only R and Python packages, and don’t handle additional management of system dependencies or packages, which would be risky in a shared server system where conflicts could come up.</p>
<p>The most famous R and Python package repositories are:</p>
<ul>
<li><a href="https://cran.r-project.org/">CRAN</a> - hosting public packages, checking, distributing, and archiving R packages for various platforms</li>
<li><a href="https://www.bioconductor.org/">BioConductor</a> - hosting public packages, checking, distributing, and archiving R packages for various platforms</li>
<li><a href="https://pypi.org/">PyPi</a> - hosting public packages, checking, distributing, and archiving Python packages for various platforms</li>
</ul>
<p>Posit Package Manager can be deployed within your organization, completely air-gapped, or with a sync service to Posit, to receive package sources and binaries.</p>
<ul>
<li><a href="https://pypi.org/">Posit Package Manager</a> - hosting public packages, hosting internal packages, checking, distributing, blocking vulnerabilities, and archiving R and Python packages for various platforms</li>
</ul>
</section>
<section id="server-vs-individual-environments" class="level2">
<h2 class="anchored" data-anchor-id="server-vs-individual-environments">Server vs individual environments</h2>
<p>Developers can work locally on their local machines, in a cloud environment, or using a shared server environment (for example, by using Posit Workbench).</p>
<p>Having multiple developers working on a centralized server using Posit Workbench has a couple primary advantages:</p>
<ul>
<li>Better IT oversight and security with encrypted traffic and restricted IP addresses</li>
<li>Additional configuration options and settings</li>
<li>Auditing and logging</li>
<li>Less time spent on software installation and management</li>
<li>Access to larger compute resources</li>
<li>Options for standardizing settings across all users</li>
</ul>
<p>When sharing a server environment users will sign in separately and work will live in separate user home directories. Workbench can act as an auth client to different data sources. However, the shared system dependencies will need to be carefully managed to support the different workflows that the users are doing.</p>
</section>
<section id="the-renv-package" class="level2">
<h2 class="anchored" data-anchor-id="the-renv-package">The renv package</h2>
<p>Renv is an open source R package that allows users to better manage their package environments.</p>
<p>Ever had your code mysteriously stop working or start producing different results after upgrading packages, and had to spend hours debugging to find which package was the culprit? Ever tried to collaborate on code just to get stuck on trying to decipher various package dependencies?</p>
<p><a href="https://rstudio.github.io/renv/articles/renv.html">renv</a> helps you track and control package changes - making it easy to revert back if you need to. It works with your current methods of installing packages (<code>install.packages()</code>). It comes with a great degree of flexibility and supports a wide range of user workflows.</p>
<p>Renv assumes:</p>
<ul>
<li>Users are familiar with a version control system, like git</li>
<li>Users are following a project-centric methodology where the goal is to simultaneously work on different projects with different package environment needs</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://rstudio.github.io/renv/articles/renv.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" data-glightbox="description: .lightbox-desc-3" title="The Renv workflow"><img src="https://rstudio.github.io/renv/articles/renv.png" class="img-fluid figure-img" alt="The Renv workflow"></a></p>
<figcaption>The <a href="https://rstudio.github.io/renv/articles/renv.html">Renv workflow</a></figcaption>
</figure>
</div>
<p>There is an excellent video by David Aja discussing why he started using renv at the 2022 RStudio Conference here: <a href="https://www.rstudio.com/conference/2022/talks/you-should-use-renv/" class="uri">https://www.rstudio.com/conference/2022/talks/you-should-use-renv/</a></p>
<p>Usefully, <a href="https://p3m.dev/client/#/repos/cran/packages/renv/616174/overview?search=renv#package-details:~:text=1.14%20MB-,SYSTEM%20REQUIREMENTS,-none">renv doesn’t have system requirements</a>.</p>
<section id="the-lock-file" class="level3">
<h3 class="anchored" data-anchor-id="the-lock-file">The lock file</h3>
<p>The renv lock file is what is generated that allows the environment to be recreated on another system. It might look something like this:</p>
<details>
<summary>
Click here to expand an example renv lock file
</summary>
<pre><code>{
  "R": {
    "Version": "4.3.2",
    "Repositories": [
      {
        "Name": "CRAN",
        "URL": "https://p3m.dev/cran/latest"
      }
    ]
  },
  "Packages": {
    "MASS": {
      "Package": "MASS",
      "Version": "7.3-60",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "grDevices",
        "graphics",
        "methods",
        "stats",
        "utils"
      ],
      "Hash": "a56a6365b3fa73293ea8d084be0d9bb0"
    },
    "Matrix": {
      "Package": "Matrix",
      "Version": "1.6-4",
      "Source": "Repository",
      "Repository": "RSPM",
      "Requirements": [
        "R",
        "grDevices",
        "graphics",
        "grid",
        "lattice",
        "methods",
        "stats",
        "utils"
      ],
      "Hash": "d9c655b30a2edc6bb2244c1d1e8d549d"
    },
    "yaml": {
      "Package": "yaml",
      "Version": "2.3.7",
      "Source": "Repository",
      "Repository": "RSPM",
      "Hash": "0d0056cc5383fbc240ccd0cb584bf436"
    }
  }
}</code></pre>
</details>
<p>It’s in a json format. There are two main sections:</p>
<ul>
<li>Header : This is where the R version is declared as well as package sources (if declared)</li>
<li>Packages : This is where the specific package versions are specified, as well as various metadata</li>
</ul>
<p>For an overview on package sources, see the <a href="https://rstudio.github.io/renv/articles/package-sources.html">Package Sources vignette</a>.</p>
<p>The package source can be set for three different scenarios:</p>
<ul>
<li><code>RemoteType</code> - packages installed by devtools, remotes, and pak</li>
<li><code>Repository</code> - packages installed from a package repository; CRAN, Posit Package Manager, etc</li>
<li><code>biocViews</code> - packages installed from BioConductor repositories</li>
</ul>
<p>Let’s understand how the <code>Repository</code> is set. Notice how under each package the repository is declared like this:</p>
<pre><code>Repository: &lt;a name&gt;,</code></pre>
<p>The <code>Repository: &lt;a name&gt;</code> field is used to denote the repository that the package was originally installed from. Most commonly it might like look:</p>
<ul>
<li><code>Repository: CRAN</code> - This indicates that the package was installed from a repository call CRAN, likely a CRAN mirror</li>
<li><code>Repository: RSPM</code> - This indicates that the package was installed from Posit Package Manager, regardless of whether it was a binary or source package</li>
</ul>
<p>There is a fail over order for determining the correct URL:</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD;
    A(Assign repository URL) --&gt;lock; 
    
    subgraph lock[renv.lock file]
    B[Repository name in package definition]
    c[Repository URL in header]
    end
    
    lock -- Repository name in header --&gt;D;
    D[Select matching URL] --&gt;END;
    lock -- Repository name not in header --&gt;E;
    
    E{Check env for first repository listed &lt;br&gt; for required package version} -- package exists --&gt;F;
    F[Select first repository URL] --&gt;END; 
    E -- package does not exist --&gt;G;

    G{Check env for .. repository listed &lt;br&gt; for required package version} -- package exists --&gt;H;
    H[Select .. repository URL] --&gt;END; 
    G -- package does not exist --&gt;I;
    
    I{Check env for last repository listed &lt;br&gt; for required package version} -- package exists --&gt;J;
    J[Select last repository URL] --&gt;END; 
    I -- package does not exist --&gt;K;
    
    K{Check the cellar} -- package exists --&gt;L;
    L[Select cellar] --&gt;END; 
    K -- package does not exist --&gt;M;    
    
    M[Package does not exist, unable to restore]
    
    END(End)
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>In words, for a package repository declaration of <code>Repository: RSPM</code>, if there happens to be a repository called <code>RSPM</code> in the repository list, then that repository will be preferred when restoring the package; otherwise, renv will check each repository from first to last for the required version of each package. The <a href="https://rstudio.github.io/renv/articles/package-sources.html#the-package-cellar">renv package cellar</a> is meant to help with packages that aren’t available or accessible for installation. The cellar can be set to point at tarball locations for these tricky packages as an ultimate fail safe.</p>
</section>
</section>
<section id="the-pak-package" class="level2">
<h2 class="anchored" data-anchor-id="the-pak-package">The pak package</h2>
<p>Pak is a useful R package that can help with package installation and dependency look up.</p>
<p>If an error is encountered, we may need to enable the package pak to work with renv (or be patient and wait a couple minutes after installing pak). There is a useful git issue discussing this <a href="https://github.com/r-lib/pak/issues/325">here</a>.</p>
<p>Renv can be told to use pak for package installation with: <code>RENV_CONFIG_PAK_ENABLED = TRUE</code></p>
<p>For example temporarily with: <code>Sys.setenv("RENV_CONFIG_PAK_ENABLED" = TRUE)</code>)</p>
<p>Check that it set with: <code>Sys.getenv('RENV_CONFIG_PAK_ENABLED')</code></p>
</section>
<section id="package-installation" class="level2">
<h2 class="anchored" data-anchor-id="package-installation">Package installation</h2>
<p>Packages are installed into a package library, a directory that exists somewhere on disk.</p>
<p>Packages are associated with that the OS, the particular version of R being used, and if using renv, with that particular project directory. The current library path(s) can be found with: <code>.libPaths()</code>. When packages are installed they will install to a sub folder that is specific to the combination of both of those.</p>
<section id="the-default-library-location" class="level3">
<h3 class="anchored" data-anchor-id="the-default-library-location">The default library location</h3>
<p>The default R installation will install packages into the users home directory, by default located at <code>R_HOME/library</code>. For example, on Windows:</p>
<pre><code>\-- C:/Users/LisaAnders/AppData/Local/R
    \-- win-library
        \-- 4.3
            \-- ..packages
\-- C:/Program Files/R
    \-- R-4.3.1
        \-- library
            \-- ..packages</code></pre>
<p>Learn more about <a href="https://rstudio.github.io/r-manuals/r-admin/Add-on-packages.html#managing-libraries">managing libraries in base R</a>.</p>
</section>
<section id="shared-site-library-location" class="level3">
<h3 class="anchored" data-anchor-id="shared-site-library-location">Shared site library location</h3>
<p>A shared site library can be set it up that will make packages from a global directory available to all users on the system, without the need for them to go through the installation steps. Through configuring Workbench, default repository locations can be set, an alternative directory can be set for use for package installation instead of user home directories, and user package installations can be disabled.</p>
<p>A default site library can be used, at <code>R_HOME/site-library</code> (in this case <code>/opt/R/3.4.4/lib/R/library</code>), or a site library can be set up by setting <code>.Library.site</code> in <code>R_HOME/etc/Rprofile.site</code> / <code>{$R_HOME}/etc/Rprofile.site</code>. Multiple library locations can be set up to be used.</p>
<p>When using a shared library, user options to change repository settings and package installation can be disabled if desired (typically as part of a validated environment management workflow). In this case, all users are accessing packages from that global site library and packages are added / updated by going through an approvals process with an admin ultimately running the commands that make the change.</p>
<p>A site library can also be set up that allows users to access both the globally installed packages as well as install packages into the user directory. This is often “the best of both worlds”. New users are able to hit the ground running quickly, and advanced users have control over packages and package versions for their projects.</p>
</section>
<section id="renv-library-location" class="level3">
<h3 class="anchored" data-anchor-id="renv-library-location">Renv library location</h3>
<p>Packages installed with renv, depending on some configuration options, will use two locations:</p>
<ul>
<li>User’s cache - <code>~/.cache/R/renv/</code></li>
<li>Project cache - <code>~/renv/library/</code></li>
</ul>
<p>By default, the project cache will symlink to the users cache in order to preserve space. Projects can <a href="https://rstudio.github.io/renv/reference/isolate.html">be isolated</a> in order to have the packages copied into the project library so that the project is completely independent of the broader renv cache.</p>
<p>The folder structure (note that it is specific to the possible OS’s, and the possible R versions and this is just an example) is:</p>
<p><em><code>~/.cache/R/renv/</code></em></p>
<pre><code>+-- projects 
+-- index
\-- binary
    \-- linux-centos-7
        \-- R-4.3
            \-- x86_64-pc-linux-gnu
                \-- repository
                    \-- ..packages
        \-- R-4.4
            \-- x86_64-pc-linux-gnu
                \-- repository
                    \-- ..packages
    \-- linux-rocky-8.9
        \-- R-4.3
            \-- x86_64-pc-linux-gnu
                \-- repository
                    \-- ..packages
\-- source
    \-- repository
        \-- ..packages</code></pre>
<p><em><code>~/renv/</code></em></p>
<pre><code>+-- activate.R
+-- settings.json
+-- staging
\-- library
    \-- linux-centos-7
        \-- R-4.3
            \-- x86_64-pc-linux-gnu
                \-- repository
                    \-- ..packages
        \-- R-4.4
            \-- x86_64-pc-linux-gnu
                \-- repository
                    \-- ..packages
    \-- linux-rocky-8.9
        \-- R-4.3
            \-- x86_64-pc-linux-gnu
                \-- repository
                    \-- ..packages
\-- source
    \-- repository
        \-- ..packages</code></pre>
</section>
</section>
</section>
<section id="configuration" class="level1">
<h1>Configuration</h1>
<section id="local-r-config-files" class="level2">
<h2 class="anchored" data-anchor-id="local-r-config-files">Local R config files</h2>
<p>These two configuration files, that may or may not be set, are the moste common for changing the behavior as relates to setting the repository for package installations:</p>
<ul>
<li><a href="https://rstats.wtf/r-startup#renviron">.Renviron</a> : The user R environ file contains all environment variables, often including renv settings, etc (typically located at ~/.Renviron)</li>
<li><a href="https://rstats.wtf/r-startup#rprofile">.Rprofile</a> : The user R profile file contains various settings and configuration properties (typically located at ~/.Rprofile)</li>
</ul>
<p>The easiest way to access either of this files is with the usethis package.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(usethis)</span>
<span id="cb8-2">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edit_r_environ</span>() </span>
<span id="cb8-3">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edit_r_profile</span>()</span></code></pre></div>
<p>These <a href="https://rstats.wtf/r-startup#disabling-startup-files">startup files can be disabled</a>.</p>
</section>
<section id="shared-server-r-config-files" class="level2">
<h2 class="anchored" data-anchor-id="shared-server-r-config-files">Shared server R config files</h2>
<p>Instead of setting individually with <a href="https://rstats.wtf/r-startup#renviron">.Renviron</a> and <a href="https://rstats.wtf/r-startup#rprofile">.Rprofile</a>, the same parameters can be set at the server and R installation level. When set, any configuration will be active for any R sessions launched on that server.</p>
<ul>
<li><a href="https://packagemanager.rstudio.com/__docs__/user/configure-r/#configure-base-r">Rprofile.site</a> : The RProfile.site file is typically located at <code>etc/Rprofile.site</code></li>
<li><a href="https://support.posit.co/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf">Renviron.site</a> : The Renviron.site file is specific to the R installation, typically located at <code>file.path(R.home("etc"), "Renviron.site")</code>.</li>
</ul>
<p>For example, this code can be used to maintain the repository configuration across R sessions by adding to the individual users <code>.Rprofile</code> file. It can be maintained across all users on the server by adding to the <code>Rprofile.site</code> file.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local</span>({</span>
<span id="cb9-2">  repos <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">PackageManager =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://packagemanager.posit.co/cran/__linux__/centos7/latest"</span>)</span>
<span id="cb9-3">  repos[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LocalPackages"</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://packagemanager.posit.co/local/__linux__/centos7/latest"</span></span>
<span id="cb9-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add the new repositories first, but keep the existing ones</span></span>
<span id="cb9-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(repos, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getOption</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"repos"</span>)))</span>
<span id="cb9-6">})</span>
<span id="cb9-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getOption</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"repos"</span>)</span></code></pre></div>
<p>Users can override the global settings in these files <code>Rprofile.site</code> and <code>Renviron.site</code> with their individual <code>.Rprofile</code> files.</p>
</section>
<section id="workbench-files-for-rstudio-pro-sessions" class="level2">
<h2 class="anchored" data-anchor-id="workbench-files-for-rstudio-pro-sessions">Workbench files for RStudio Pro sessions</h2>
<p>Similarly, there are configuration files used in Workbench that can set repository preference for package installations:</p>
<ul>
<li><a href="https://docs.posit.co/ide/server-pro/rstudio_pro_sessions/package_installation.html">/etc/rstudio/repos.conf</a></li>
<li><a href="https://docs.posit.co/ide/server-pro/rstudio_pro_sessions/package_installation.html">/etc/rstudio/rsession.conf</a></li>
</ul>
<p>When using a shared library, user options to change repository settings and package installation can be disabled if desired:</p>
<pre><code># /etc/rstudio/rsession.conf
allow-r-cran-repos-edit=0
allow-package-installation=0</code></pre>
</section>
<section id="configuration-of-renv" class="level2">
<h2 class="anchored" data-anchor-id="configuration-of-renv">Configuration of renv</h2>
<p>For most users, renv’s default behavior is powerful and doesn’t need modification.</p>
<p>However, the behavior can also be manually set / modified. Generally speaking though, relying on the defaults is the recommended happy path as renv is designed to just magically work. This does mean that troubleshooting when things go wrong can be tricky, see the troubleshooting section below for some tips on what to look out for.</p>
<p>There are also a number of environment variables that can be set that will also similarly effect the behavior as relates to setting the repositories being used as the source for package installation.</p>
<p>Commonly, these settings are set in the <code>.Renviron</code> file to be set across all sessions for that user, or in the R installation’s <code>Renviron.site</code> file so it is active for all users on that server.</p>
<p>Settings:</p>
<ul>
<li><a href="https://rstudio.github.io/renv/reference/paths.html#sharing-state-across-operating-systems">RENV_PATHS_PREFIX</a> : Used for sharing state across operating systems</li>
<li><a href="https://rstudio.github.io/renv/articles/package-sources.html#the-package-cellar">RENV_PATHS_CELLAR</a> : Path to tarballs, used as a last ditch effort for installing tricky packages</li>
<li><a href="https://rstudio.github.io/renv/articles/package-install.html#cache-location">RENV_PATHS_CACHE</a> : Path location for a cache shared across multiple users</li>
<li><a href="https://rstudio.github.io/renv/articles/package-install.html?q=PATH#shared-cache-locations">RENV_CACHE_USER</a> : When using a shared cache, renv can re-assign ownershp of the cache’d package to a separate user account</li>
<li><a href="https://rstudio.github.io/renv/articles/package-install.html?q=renv.download.trace#debugging">renv.download.trace</a> : Run <code>options(renv.download.trace = TRUE)</code> to temporarily have more verbose logging</li>
</ul>
<p>Config settings:</p>
<ul>
<li><a href="https://rstudio.github.io/renv/reference/config.html#renv-config-repos-override">renv.config.repos.override</a> : Enforce the use of some repositories over what is defined in the renv.lock file</li>
<li><a href="https://rstudio.github.io/renv/reference/config.html#renv-config-ppm-enabled">renv.config.ppm.enabled</a> : Attempt to transform the repository URL in order to receive binaries on your behalf (defaults to TRUE)</li>
<li><a href="https://rstudio.github.io/renv/reference/config.html#renv-config-ppm-default">renv.config.ppm.default</a> : If repos have not already been set (for example, from the startup .Rprofile) then projects using renv will use the Posit Public Package Manager instance by default</li>
<li><a href="https://rstudio.github.io/renv/reference/config.html#renv-config-ppm-url">renv.config.ppm.url</a> : The URL for Posit Package Manager to be used for new renv projects</li>
<li><a href="https://rstudio.github.io/renv/reference/config.html#renv-config-user-environ">renv.config.user.environ</a> : Load the users R environ file, usually encouraged (defaults to true)</li>
<li><a href="https://rstudio.github.io/renv/reference/config.html#renv-config-user-profile">renv.config.user.profile</a> : Load the users R profile file, usually discouraged since it can break project encapsulation (defaults to false)</li>
<li><a href="https://rstudio.github.io/renv/reference/config.html#renv-config-user-library">renv.config.user.library</a> : option to include the system library on the library paths for projects, usually discouraged since it can break project encapsulation (defaults to false)</li>
<li><a href="https://rstudio.github.io/renv/reference/config.html#renv-config-external-libraries">renv.config.external.libraries</a> : Similar to <code>renv.config.user.library</code>, external libraries can be included with the project, usually discouraged since it can break project encapsulation (defaults to false)</li>
<li><a href="https://rstudio.github.io/renv/reference/config.html#renv-config-cache-enabled">renv.config.cache.enabled</a> : Enable the global renv package cache, so that packages are installed into the global cache and then linked or copied into the users R library in order to save space (defaults to true)</li>
<li><a href="https://rstudio.github.io/renv/reference/config.html?q=link#renv-config-cache-symlinks">renv.config.cache.symlinks</a> : Use symlinks to reference packages installed into the global renv package cache (if set to FALSE packages are copied from the cache into your project library) (enabled by default, defaults to NULL)</li>
<li><a href="https://rstudio.github.io/renv/reference/config.html#renv-config-pak-enabled">renv.config.pak.enabled</a> : Use pak with renv to install packages</li>
</ul>
<p>Since the configuration settings can be set in multiple places, the priority is given according to:</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD;
    A(Renv configuration selection) --&gt;B;
    B{R option &lt;br/&gt; renv.config.&lt;name&gt;} -- Not set --&gt;C;
    B{R option &lt;br/&gt; renv.config.&lt;name&gt;} -- Set --&gt;F;
    C{Environment variable &lt;br/&gt; RENV_CONFIG_&lt;NAME&gt;} -- Not set --&gt;D;
    C{Environment variable &lt;br/&gt; RENV_CONFIG_&lt;NAME&gt;} -- Set --&gt;F;
    D{Default} --&gt;F;
    F(End)
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>If both the R option and the environment variable option are defined, the R option is preferred.</p>
<p>We can check the value of any of these parameters a couple ways:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Checking the renv options by reading environment variables and renv config properties</span></span>
<span id="cb11-2">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>paths<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>()</span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RENV_PATHS_CACHE'</span>)</span>
<span id="cb11-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RENV_CACHE_USER'</span>)</span>
<span id="cb11-5">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>paths<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cache</span>()</span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check the r_environ and r_profile contents using the usethis package</span></span>
<span id="cb11-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(usethis)</span>
<span id="cb11-9">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edit_r_environ</span>() </span>
<span id="cb11-10">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edit_r_profile</span>()</span></code></pre></div>
<section id="renv-and-binary-package-os-and-r-version-detection" class="level3">
<h3 class="anchored" data-anchor-id="renv-and-binary-package-os-and-r-version-detection">Renv and binary package OS and R version detection</h3>
<p>By default, renv used with Package Manager will dynamically set the URL of your repository to pull package binaries for your respective system.</p>
<blockquote class="blockquote">
<p>Starting with R 4.4.0, renv automatically uses a platform prefix for library paths on linux (the equivalent to setting <code>RENV_PATHS_PREFIX_AUTO = TRUE</code>). This means that, for example, upgrading to a new version of an OS will automatically signal to renv that new library + cache directories will be required.</p>
</blockquote>
<section id="sharing-state-across-operating-systems" class="level4">
<h4 class="anchored" data-anchor-id="sharing-state-across-operating-systems">Sharing state across operating systems</h4>
<p>As of renv 0.13.0, <a href="https://rstudio.github.io/renv/reference/paths.html#sharing-state-across-operating-systems">sharing state across operating systems</a> is now possible. By default, it will construct a prefix based on fields within the system’s /etc/os-release file.</p>
<p>also possible to explicitly set with the <code>RENV_PATHS_PREFIX</code> environment variable. For example, it could be set like <code>RENV_PATHS_PREFIX = "ubuntu-bionic"</code> in order to programmatically generate a cache path like <code>/mnt/shared/renv/cache/v2/ubuntu-bionic/R-3.5/x86_64-pc-linux-gnu</code>. Alternatively the auto feature can be enabled with <code>RENV_PATHS_PREFIX_AUTO = TRUE</code> to automatically detect the environment and set the path.</p>
<p>Commonly, this would be set in the <code>.Renviron</code> file to be set across all sessions for that user, or in the R installation’s <code>Renviron.site</code> file so it is active for all users on that server.</p>
</section>
</section>
<section id="renv-and-binary-package-os-and-r-version-detection-1" class="level3">
<h3 class="anchored" data-anchor-id="renv-and-binary-package-os-and-r-version-detection-1">Renv and binary package OS and R version detection</h3>
<p>Renv’s default behavior is powerful when using it with Posit Package Manager. It will <em>automatically</em> try to detect the details about your underlying system and set the corrrect URL path so that the appropriate binaries are downloading. If it is unable to find a binary, then it will fail over to the source URL.</p>
</section>
</section>
<section id="configuration-of-posit-package-manager" class="level2">
<h2 class="anchored" data-anchor-id="configuration-of-posit-package-manager">Configuration of Posit Package Manager</h2>
<p>Posit Package Manager is a hosting repository that can be deployed inside a companies network. It is often used in conjunction with vulnerability detection and package blocking for security. It is also useful for hosting internally developed packages that are meant to stay confidential and only used within that particular enterprise organization.</p>
<ul>
<li><a href="https://packagemanager.rstudio.com/__docs__/user/configure-r/#configure-r">Configuring R Environments</a></li>
<li><a href="https://packagemanager.rstudio.com/__docs__/user/configure-python/">Configuring Python Environments</a></li>
</ul>
<p>For Workbench the URL for Package Manager is commonly configured so that it is at least used as the default repository for both R and Python packages from within the customers enterprise network.</p>
<p>Optionally, the Posit Package Manager url can be configured to be specific to:</p>
<ul>
<li>Snapshot dates</li>
<li>Particular curated repository/repositories</li>
<li>Particular OS (in order to install binaries)</li>
</ul>
<section id="package-manager-and-binary-package-os-and-r-version-detection" class="level3">
<h3 class="anchored" data-anchor-id="package-manager-and-binary-package-os-and-r-version-detection">Package Manager and binary package OS and R version detection</h3>
<p>Binary packages are incredibly useful, enabling faster downloads by skipping the compilation step. When a binary package is requested (by using the <code>__linux__</code> URL), Package Manager will make a best effort to serve the requested binary package. If that package is unavailable or <em>unsupported on the user’s binary distribution</em> Package Manager will fall back to serving the packages source version.</p>
<p>Posit Package Manager has the option for the <a href="https://packagemanager.rstudio.com/__docs__/admin/serving-binaries/#binary-user-agents">R user agent header can be configured</a>. The user’s User-Agent request header indicates to Package manager which appropriate binary package to server, based on the R version and the OS. A <a href="https://packagemanager.rstudio.com/__docs__/admin/check-user-agent.R">diagnostic script</a> is provided for generating a diagnostic to make sure this is set correctly. The diagnostic will fail to indicate that the OS and R version in the User-Agent request header needs to be updated.</p>
<details>
<summary>
Click here to expand for the diagnostic script
</summary>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># User agent diagnostic script for Posit Package Manager binary packages</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local</span>({</span>
<span id="cb12-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (.Platform<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>OS.type <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unix"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.info</span>()[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sysname"</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Darwin"</span>) {</span>
<span id="cb12-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Success! Posit Package Manager does not require additional configuration to install binary packages on macOS or Windows."</span>)</span>
<span id="cb12-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>())</span>
<span id="cb12-7">  }</span>
<span id="cb12-8"></span>
<span id="cb12-9">  dl_method <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getOption</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"download.file.method"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb12-10">  dl_extra_args <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getOption</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"download.file.extra"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb12-11">  user_agent <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getOption</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HTTPUserAgent"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb12-12"></span>
<span id="cb12-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (dl_method <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) {</span>
<span id="cb12-14">    dl_method <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">capabilities</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"libcurl"</span>))) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"libcurl"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"internal"</span></span>
<span id="cb12-15">  }</span>
<span id="cb12-16"></span>
<span id="cb12-17">  default_ua <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R (%s)"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getRversion</span>(), R.version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>platform, R.version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>arch, R.version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>os))</span>
<span id="cb12-18"></span>
<span id="cb12-19">  instruction_template <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'You must configure your HTTP user agent in R to install binary packages.</span></span>
<span id="cb12-20"></span>
<span id="cb12-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">In your site-wide startup file (Rprofile.site) or user startup file (.Rprofile), add:</span></span>
<span id="cb12-22"></span>
<span id="cb12-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"># Set default user agent</span></span>
<span id="cb12-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">%s</span></span>
<span id="cb12-25"></span>
<span id="cb12-26"></span>
<span id="cb12-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Then restart your R session and run this diagnostic script again.</span></span>
<span id="cb12-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb12-29"></span>
<span id="cb12-30">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb12-31">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R installation path: %s</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R.home</span>()),</span>
<span id="cb12-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R version: %s</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, R.version.string),</span>
<span id="cb12-33">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OS version: %s</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, utils<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sessionInfo</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>running),</span>
<span id="cb12-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HTTPUserAgent: %s</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, user_agent),</span>
<span id="cb12-35">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Download method: %s</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, dl_method),</span>
<span id="cb12-36">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Download extra args: %s</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, dl_extra_args),</span>
<span id="cb12-37">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">----------------------------</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb12-38">  ))</span>
<span id="cb12-39"></span>
<span id="cb12-40">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (dl_method <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"libcurl"</span>) {</span>
<span id="cb12-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(default_ua, user_agent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fixed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span></span>
<span id="cb12-42">        (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getRversion</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3.6.0"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substr</span>(user_agent, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R ("</span>)) {</span>
<span id="cb12-43">      config <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options(HTTPUserAgent = sprintf("R/%s R (%s)", getRversion(), paste(getRversion(), R.version["platform"], R.version["arch"], R.version["os"])))'</span></span>
<span id="cb12-44">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(instruction_template, config))</span>
<span id="cb12-45">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>())</span>
<span id="cb12-46">    }</span>
<span id="cb12-47">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (dl_method <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"curl"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wget"</span>)) {</span>
<span id="cb12-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--header </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">User-Agent: %s</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, default_ua), dl_extra_args, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fixed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) {</span>
<span id="cb12-49">      ua_arg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sprintf(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">--header </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">User-Agent: R (%s)</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\\"\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, paste(getRversion(), R.version[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">platform</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">], R.version[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">arch</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">], R.version[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">os</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">]))"</span></span>
<span id="cb12-50">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (dl_extra_args <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) {</span>
<span id="cb12-51">        config <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"options(download.file.extra = %s)"</span>, ua_arg)</span>
<span id="cb12-52">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb12-53">        config <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"options(download.file.extra = paste(%s, %s))"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shQuote</span>(dl_extra_args), ua_arg)</span>
<span id="cb12-54">      }</span>
<span id="cb12-55">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(instruction_template, config))</span>
<span id="cb12-56">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>())</span>
<span id="cb12-57">    }</span>
<span id="cb12-58">  }</span>
<span id="cb12-59"></span>
<span id="cb12-60">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Success! Your user agent is correctly configured."</span>)</span>
<span id="cb12-61">})</span></code></pre></div>
</details>
</section>
</section>
<section id="configuration-on-workbench-for-r-repository-using-run.r-programmatically-setting-the-repository-location" class="level2">
<h2 class="anchored" data-anchor-id="configuration-on-workbench-for-r-repository-using-run.r-programmatically-setting-the-repository-location">Configuration on Workbench for R repository using run.R / Programmatically setting the repository location</h2>
<p>Instead of the above, a run.R file can be used to programmatically set the repository and library location for users. This is commonly used in validated workflows, where the additional oversight is critical.</p>
<p>Example created by Michael <a href="https://github.com/sol-eng/singularity-rstudio/blob/main/data/r-session-complete/jammy/scripts/run.R">here</a>.</p>
</section>
</section>
<section id="scenarios" class="level1">
<h1>Scenarios</h1>
<section id="scenario-1-setting-up-a-shared-site-library-on-workbench" class="level2">
<h2 class="anchored" data-anchor-id="scenario-1-setting-up-a-shared-site-library-on-workbench">Scenario 1: Setting up a shared site library on Workbench</h2>
<p>The <a href="https://solutions.posit.co/envs-pkgs/environments/shared/">shared site library</a> is specific to an installed version of R. For example for R version <code>4.3.2</code> installed to: <code>/opt/R/4.3.2/lib/R/library</code>:</p>
<ol type="1">
<li>Edit the Rprofile.site file to set the repository URL</li>
</ol>
<pre><code># /opt/R/4.3.2/etc/Rprofile.site
local({
  options(repos = c(CRAN = "https://r-pkgs.example.com/cran/128"))
})</code></pre>
<ol start="2" type="1">
<li><p>(optional) The default site library can be used, at <code>R_HOME/site-library</code> (in this case <code>/opt/R/3.4.4/lib/R/library</code>), or a site library can be set up by setting <code>.Library.site</code> in <code>R_HOME/etc/Rprofile.site</code>. Multiple library locations can be set up to be used.</p></li>
<li><p>Run R as the root/admin account and install all desired packages</p></li>
</ol>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Multiple packages can be installed at the same time like this: </span></span>
<span id="cb14-2">export R_VERSION<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>.<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.2</span></span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>opt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>R<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">$</span>{R_VERSION}<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>bin<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>R</span>
<span id="cb14-5"></span>
<span id="cb14-6">sudo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>opt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>R<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">$</span>{R_VERSION}<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>bin<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Rscript <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>e <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'install.packages(c("haven","forcats","readr","lubridate","shiny", "DBI", "odbc", "rvest", "plotly","rmarkdown", "rsconnect","pins","png","tidyverse", "Rcpp"), repos = "http://cran.us.r-project.org")'</span></span>
<span id="cb14-7"></span>
<span id="cb14-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">q</span>()</span></code></pre></div>
<ol start="4" type="1">
<li>Users access packages on the system (without needing to install)</li>
</ol>
<p>When using a shared library, the ability for users to change repository settings and package installation can be disabled:</p>
<pre><code># /etc/rstudio/rsession.conf
allow-r-cran-repos-edit=0
allow-package-installation=0</code></pre>
</section>
<section id="scenario-2-setting-up-a-project-to-use-renv" class="level2">
<h2 class="anchored" data-anchor-id="scenario-2-setting-up-a-project-to-use-renv">Scenario 2: Setting up a project to use renv</h2>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install renv</span></span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.package</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"renv"</span>) </span>
<span id="cb16-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(renv)</span>
<span id="cb16-4"></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># activate the project as an renv project</span></span>
<span id="cb16-6">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">activate</span>()</span>
<span id="cb16-7"></span>
<span id="cb16-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate the renv.lock file </span></span>
<span id="cb16-9">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">snapshot</span>()</span>
<span id="cb16-10"></span>
<span id="cb16-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check the status of renv </span></span>
<span id="cb16-12">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">status</span>()</span>
<span id="cb16-13"></span>
<span id="cb16-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># On a separate system the snapshot can be used to install the specific packages and versions </span></span>
<span id="cb16-15">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restore</span>() </span>
<span id="cb16-16"></span>
<span id="cb16-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Restore a project with an explicit repository URL, note that this does not update the renv.lock file, it will need to be manually edited</span></span>
<span id="cb16-18">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restore</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"COLORADO"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://colorado.posit.co/rspm/all/latest"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rebuild=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb16-19"></span>
<span id="cb16-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add additional logging</span></span>
<span id="cb16-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">renv.download.trace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</section>
<section id="scenario-3-determining-the-root-package-that-is-causing-a-failing-dependency" class="level2">
<h2 class="anchored" data-anchor-id="scenario-3-determining-the-root-package-that-is-causing-a-failing-dependency">Scenario 3: Determining the root package that is causing a failing dependency</h2>
<p>For example, error message:</p>
<blockquote class="blockquote">
<p>2024/05/17 9:24:10 AM: Error in dyn.load(file, DLLpath = DLLpath, …) : 2024/05/17 9:24:10 AM: unable to load shared object ‘/opt/rstudio-connect/mnt/app/packrat/lib/x86_64-pc-linux-gnu/4.3.2/magick/libs/magick.so’: 2024/05/17 9:24:10 AM: libMagick++-6.Q16.so.8: cannot open shared object file: No such file or directory 2024/05/17 9:24:10 AM: Calls: loadNamespace -&gt; library.dynam -&gt; dyn.load</p>
</blockquote>
<p>We can look through our project repository and see that the <code>magick</code> package isn’t directly being called. So the question is, which package is calling it as dependency?</p>
<p>The easiest way to look up the dependency is to open the renv.lock file and find which package has it listed as a dependency.</p>
<p>Some other tricks that might be useful are:</p>
<ul>
<li>We can use renv to look at top level dependencies: <code>renv::dependencies()</code></li>
<li>We can use base R to look up package dependencies: <code>tools::package_dependencies("leaflet", recursive = TRUE)[[1]]</code></li>
<li>Renv can be told to use pak for package installation with: <code>RENV_CONFIG_PAK_ENABLED = TRUE</code></li>
<li>Check that it set with: <code>Sys.getenv('renv.config.pak.enabled')</code></li>
<li>We can use pak to look up all package dependencies in a tree format: <code>pak::pkg_deps_tree("tibble")</code></li>
<li>We can also get more details about the packages with: <code>pak::pak_sitrep()</code></li>
<li>If an error is encountered, we may need to enable the package pak to work with renv (or be patient and wait a couple minutes after installing pak). There is a useful git issue discussing this <a href="https://github.com/r-lib/pak/issues/325">here</a>.</li>
</ul>
<p>We can then clean up the project and remove packages that are installed, but no longer referenced in the project source, with <code>renv::clean()</code> and save that to the renv lock file with <code>renv::snapshot()</code>. Don’t forget to update your manifest.json file if this is a project being published to Connect with <code>rsconnect::writeManifest()</code>.</p>
</section>
<section id="scenario-4-upgrading-a-project-using-renv-from-r-4.1-to-r-4.4" class="level2">
<h2 class="anchored" data-anchor-id="scenario-4-upgrading-a-project-using-renv-from-r-4.1-to-r-4.4">Scenario 4: Upgrading a project using renv from R 4.1 to R 4.4</h2>
<blockquote class="blockquote">
<p>Why is this relevant? <a href="https://support.posit.co/hc/en-us/articles/23170092899607-CVE-2024-27322-R-bitrary-Code-Execution">R CVE detection, vulnerability removed with R 4.4</a></p>
</blockquote>
<p>What is recommended: For each project, individually capture the requirements with renv. Change the R version and use the renv.lock file to install the captured requirements for the new R version. Perform tests, updating code and package versions as needed.</p>
<p>What is not recommended: An in-place upgrading. Meaning, we do not recommend removing existing R versions and forcing all projects to use R 4.4. It is likely that code will break and will need developer work to make compatible with the new R version.</p>
</section>
<section id="scenario-5-os-migration-for-individual-r-projects-using-renv" class="level2">
<h2 class="anchored" data-anchor-id="scenario-5-os-migration-for-individual-r-projects-using-renv">Scenario 5: OS migration for individual R projects using renv</h2>
<p>Refer to <a href="https://docs.posit.co/how-to-guides/upgrade-os-and-product/phase2-migrate/?h=migrat#workbench-post-migration">here</a></p>
<p>All packages will need to be rebuilt.</p>
<p>These two locations in particular, the user home directories and global R or Python directories, will likely need to be flushed and rebuilt:</p>
<ul>
<li><code>~/R</code></li>
<li><code>~/.local/lib/python3.*</code></li>
</ul>
<p>Reference <a href="https://gist.github.com/edavidaja/5996ffeb042df2642c77c065c07f023d">this script</a> from David which programmatically reinstalls all packages installed into user home directories, or the global R or Python directories.</p>
<p>Rebuild renv:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete existing libraries</span></span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlink</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"renv/library"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recursive=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Restart R session</span></span>
<span id="cb17-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.rs.restartR</span>()</span>
<span id="cb17-6"></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Change anything that is needed, repository URL, etc</span></span>
<span id="cb17-8"></span>
<span id="cb17-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Re-install libraries</span></span>
<span id="cb17-10">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restore</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rebuild =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<p>Rebuild venv:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate existing venv</span></span>
<span id="cb18-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> .venv/bin/activate</span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Capture all installed packages</span></span>
<span id="cb18-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip freeze <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> requirements-freeze.txt</span>
<span id="cb18-6"></span>
<span id="cb18-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Deactivate and delete</span></span>
<span id="cb18-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">deactivate</span></span>
<span id="cb18-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-rf</span> .venv/</span>
<span id="cb18-10"></span>
<span id="cb18-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Change anything that is needed, repository URL, etc</span></span>
<span id="cb18-12"></span>
<span id="cb18-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new virtual environment</span></span>
<span id="cb18-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv .venv</span>
<span id="cb18-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> .venv/bin/activate </span>
<span id="cb18-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span> pip wheel setuptools</span>
<span id="cb18-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> requirements-freeze.txt</span></code></pre></div>
<p>For Connect, the content runtimes will need to be cleared and rebuilt. This can be <a href="https://docs.posit.co/connect/admin/server-management/runtime-caches/#workflow">done pre-emptively</a>.</p>
<p>Delete:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enumerate the caches known to your server.</span></span>
<span id="cb19-2">rsconnect system caches list \</span>
<span id="cb19-3">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>server https<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">//</span>connect.example.org<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3939</span> \</span>
<span id="cb19-4">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>api<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>key my<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>api<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>key</span>
<span id="cb19-5"></span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Validate cache targeted for deletion.</span></span>
<span id="cb19-7">rsconnect system caches delete \</span>
<span id="cb19-8">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>server https<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">//</span>connect.example.org<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3939</span> \</span>
<span id="cb19-9">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>api<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>key my<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>api<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>key \</span>
<span id="cb19-10">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>language Python \</span>
<span id="cb19-11">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>version <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>.<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.5</span> \</span>
<span id="cb19-12">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>dry<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>run</span>
<span id="cb19-13"></span>
<span id="cb19-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete one cache.</span></span>
<span id="cb19-15">rsconnect system caches delete \</span>
<span id="cb19-16">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>server https<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">//</span>connect.example.org<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3939</span> \</span>
<span id="cb19-17">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>api<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>key my<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>api<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>key \</span>
<span id="cb19-18">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>language Python \</span>
<span id="cb19-19">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>version <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>.<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.5</span></span></code></pre></div>
<p>Rebuild:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enumerate every "published" content item and save its GUID.</span></span>
<span id="cb20-2">rsconnect content search \</span>
<span id="cb20-3">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>server https<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">//</span>connect.example.org<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3939</span> \</span>
<span id="cb20-4">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>api<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>key my<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>api<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>key \</span>
<span id="cb20-5">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>published <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> jq <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.[].guid'</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> guids.txt</span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Queue each GUID for build.</span></span>
<span id="cb20-8">xargs printf <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-g %s</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> guids.txt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> xargs rsconnect content build add \</span>
<span id="cb20-9">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>server https<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">//</span>connect.example.org<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3939</span> \</span>
<span id="cb20-10">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>api<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>key my<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>api<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>key</span>
<span id="cb20-11"></span>
<span id="cb20-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build each queued content item.</span></span>
<span id="cb20-13">rsconnect content build run \</span>
<span id="cb20-14">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>server https<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">//</span>connect.example.org<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3939</span> \</span>
<span id="cb20-15">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>api<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>key my<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>api<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>key</span></code></pre></div>
</section>
<section id="scenario-6-changing-the-project-repository-url" class="level2">
<h2 class="anchored" data-anchor-id="scenario-6-changing-the-project-repository-url">Scenario 6: Changing the project repository URL</h2>
<p>Often the package repository is set to a specific source URL. This can be due to it being within your network, or so that you are getting binaries for a specific OS version, etc.</p>
<p>Using the <code>RENV_CONFIG_REPOS_OVERRIDE</code> setting:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'repos'</span>)</span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the override as a one off </span></span>
<span id="cb21-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.setenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RENV_CONFIG_REPOS_OVERRIDE"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"COLORADO"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://colorado.posit.co/rspm/all/latest"</span>)) </span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check that it set </span></span>
<span id="cb21-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RENV_CONFIG_REPOS_OVERRIDE"</span>)</span>
<span id="cb21-8"></span>
<span id="cb21-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn on debug logging so we can see more information about where packages are coming from and verify it's using the correct URL</span></span>
<span id="cb21-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">renv.download.trace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb21-11"></span>
<span id="cb21-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rebuild the environment using that URL</span></span>
<span id="cb21-13">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restore</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rebuild=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) </span>
<span id="cb21-14"></span>
<span id="cb21-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Override only applies during restore, and won't update the renv.lock file, so either manually update the renv.lock file with the appropriate URLor using renv::snapshot(repos = "")</span></span></code></pre></div>
<p>Using the <code>repos</code> setting during rebuild:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rebuild </span></span>
<span id="cb22-2">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restore</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"COLORADO"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://colorado.posit.co/rspm/all/latest"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rebuild=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Snapshot s the URL change is reflected</span></span>
<span id="cb22-5">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">snapshot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"COLORADO"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://colorado.posit.co/rspm/all/latest"</span>)) </span></code></pre></div>
<p>Changing it directly in the renv.lock file:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'repos'</span>)</span>
<span id="cb23-2"></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Either manually update the renv.lock file with the appropriate URL or using</span></span>
<span id="cb23-4">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">snapshot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"COLORADO"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://colorado.posit.co/rspm/all/latest"</span>)) </span>
<span id="cb23-5"></span>
<span id="cb23-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rebuild the environment using that URL</span></span>
<span id="cb23-7">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restore</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rebuild=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) </span></code></pre></div>
</section>
<section id="scenario-7-recovering-an-old-project-that-didnt-have-an-renv-and-isnt-working-with-latest-r-package-versions" class="level2">
<h2 class="anchored" data-anchor-id="scenario-7-recovering-an-old-project-that-didnt-have-an-renv-and-isnt-working-with-latest-r-package-versions">Scenario 7: Recovering an old project that didn’t have an renv and isn’t working with latest R, package versions</h2>
<p>Use the snapshot date option with package manager to “guess” when the environment would have been built with renv so that package versions can be individually tweaked until the project works. Use the <code>renv::revert</code> feature with version control to update the packages with the ability to downgrade as needed.</p>
</section>
<section id="scenario-8-going-between-os-on-the-same-workbench-system-using-slurm-singularity-with-a-renv-project" class="level2">
<h2 class="anchored" data-anchor-id="scenario-8-going-between-os-on-the-same-workbench-system-using-slurm-singularity-with-a-renv-project">Scenario 8: Going between OS on the same Workbench system using slurm / singularity with a renv project</h2>
<p>With the interaction between renv and package manager, as well as the additions with recognition from renv when the OS and R version has changed, things should just work magically as long as the project is configured to use these pieces:</p>
<ul>
<li>renv</li>
<li>package manager (binaries enabled)</li>
</ul>
<p>On a system that has been configured to use slurm with singularity images (that are different OS’s) we can run these lines to get a feel for what is going on:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn on debug logging so we can see more information about where packages are coming from and verify it's using the correct URL</span></span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">renv.download.trace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb24-3"></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check the default repository URL</span></span>
<span id="cb24-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'repos'</span>)</span>
<span id="cb24-6"></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check the OS version</span></span>
<span id="cb24-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cat /etc/os-release"</span>)</span>
<span id="cb24-9"></span>
<span id="cb24-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check the details of our singularity environment</span></span>
<span id="cb24-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"env | grep SINGULARITY"</span>)</span>
<span id="cb24-12"></span>
<span id="cb24-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check that auto-path prefix re-writing is set</span></span>
<span id="cb24-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RENV_PATHS_PREFIX_AUTO"</span>)</span>
<span id="cb24-15"></span>
<span id="cb24-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We can attempt to set the URL to a specific binary, when we snapshot it will update the lock file to have the generic URL</span></span>
<span id="cb24-17">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">snapshot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RSPM"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://packagemanager.posit.co/cran/__linux__/centos8/latest"</span>)) </span>
<span id="cb24-18"></span>
<span id="cb24-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We can attempt to set the URL to a specific binary, when we snapshot it will update the lock file to have the generic URL</span></span>
<span id="cb24-20">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">snapshot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RSPM"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://packagemanager.posit.co/cran/__linux__/jammy/latest"</span>)) </span>
<span id="cb24-21"></span>
<span id="cb24-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the renv to use a source URL as RSPM </span></span>
<span id="cb24-23">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">snapshot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RSPM"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://packagemanager.posit.co/cran/latest"</span>)) </span>
<span id="cb24-24"></span>
<span id="cb24-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We can also manually set the repo outside of renv this way, for example to successfully download renv</span></span>
<span id="cb24-26"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">CRAN=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://cran.r-project.org"</span>))</span>
<span id="cb24-27"></span>
<span id="cb24-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rebuild the environment using that URL</span></span>
<span id="cb24-29">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restore</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rebuild=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) </span></code></pre></div>
<p>Inside the renv lock file we might see a couple different things:</p>
<pre><code>    "Repositories": [
      {
        "Name": "CRAN",
        "URL": "https://packagemanager.posit.co/cran/__linux__/centos8/latest"
      },</code></pre>
<p>This will cause problems and will tell renv to install the wrong version of packages for the wrong OS.</p>
<p>If we try to snapshot a binary repository URL with <code>renv::snapshot(repos = c("RSPM" = "https://packagemanager.posit.co/cran/__linux__/jammy/latest"))</code> then we will see the renv.lock will be updated to:</p>
<pre><code>    "Repositories": [
      {
        "Name": "RSPM",
        "URL": "https://packagemanager.posit.co/cran/latest"
      }</code></pre>
<p>This correction from the binary URL to the base URL will happen regardless of whether the OS matches the one we are using or not.</p>
<p>When we install a package we will see that it is downloading the binary. This is the magic of <code>RENV_PATHS_PREFIX_AUTO</code>! This happens regardless of whether our package source is <code>CRAN</code> or <code>RSPM</code>.</p>
<p>We can test what the outputs are for each scenario:</p>
<ul>
<li>Before a project has been initialized</li>
<li>Once a project has been initialized, with renv</li>
<li>Closing the project and re-opening it with a different image (different OS) and restoring packages (‘renv::restore(rebuild=TRUE)’)</li>
</ul>
<p>The auto-path prefix re-writing is really powerful. This means that, for example, upgrading to a new version of an OS will automatically signal to renv that new library + cache directories will be required. The caveats to know are:</p>
<ul>
<li>Starting with 4.4, renv automatically uses a platform prefix for library paths on linux.</li>
<li>R versions below this may need to have the paths prefix set (for example for just the session with <code>Sys.setenv("RENV_PATHS_PREFIX_AUTO" = TRUE)</code>, though most likely this should be set at the user or global level).</li>
</ul>
<p>We can set auto-path prefix re-writing at the user level by adding <code>RENV_PATHS_PREFIX_AUTO = TRUE</code> into the user r environ file:</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(usethis)</span>
<span id="cb27-2">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edit_r_environ</span>() </span></code></pre></div>
</section>
<section id="scenario-9-comparing-two-renv-projects" class="level2">
<h2 class="anchored" data-anchor-id="scenario-9-comparing-two-renv-projects">Scenario 9: Comparing two renv projects</h2>
<p>Reference: <a href="https://forum.posit.co/t/compare-two-renv-projects/145574" class="uri">https://forum.posit.co/t/compare-two-renv-projects/145574</a></p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(jsonlite)</span>
<span id="cb28-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb28-3">my_renvlock <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromJSON</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"renv.lock"</span>)</span>
<span id="cb28-4"></span>
<span id="cb28-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(my_renvlock<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Packages, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enframe</span>(.) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb28-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Version"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb28-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(value)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb28-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>())</span></code></pre></div>
</section>
<section id="scenario-10-script-for-updating-packages-from-rspm-that-have-changed-to-site-library" class="level2">
<h2 class="anchored" data-anchor-id="scenario-10-script-for-updating-packages-from-rspm-that-have-changed-to-site-library">Scenario 10: Script for updating packages from rspm that have changed to site library</h2>
<pre><code># update existing packages
update.packages(lib.loc=&lt;site.library&gt;, repos=&lt;PPM Repo&gt;, ask=FALSE)

# add any new packages
new.packages(lib.loc=&lt;site.library&gt;, repos=&lt;PPM Repo&gt;, ask=FALSE)</code></pre>
</section>
</section>
<section id="common-issues-and-troubleshooting" class="level1">
<h1>Common issues and troubleshooting</h1>
<section id="package-installation-errors-on-workbench" class="level2">
<h2 class="anchored" data-anchor-id="package-installation-errors-on-workbench">Package installation errors on Workbench</h2>
<p>Here’s an example error message that occurred during package installation inside Workbench (<code>install.packages(askpass)</code>):</p>
<blockquote class="blockquote">
<p>* installing <em>binary</em> package ‘askpass’ … cp: cannot open ‘./libs/askpass.so’ for reading: Operation not permitted /usr/bin/gtar: You may not specify more than one ‘-Acdtrux’, ‘–delete’ or ‘–test-label’ option Try ‘/usr/bin/gtar –help’ or ‘/usr/bin/gtar –usage’ for more information. /usr/bin/gtar: This does not look like a tar archive /usr/bin/gtar: Exiting with failure status due to previous errors</p>
</blockquote>
<p>A good first trouble shooting step is to SSH on the server and open an R session as root and attempt to install the same package. This helps to rule out where the issue is coming from, the global R configuration, the server, or a specific user issue or something with the Workbench configuration. Create a R session after SSH-ing into the server with <code>/opt/R/${R_VERSION}/bin/R</code></p>
<section id="where-to-start" class="level3">
<h3 class="anchored" data-anchor-id="where-to-start">Where to start</h3>
<p>Get the system information: <code>Sys.info()</code></p>
<p>Get session details: <code>sessionInfo()</code></p>
</section>
<section id="problems-with-pak" class="level3">
<h3 class="anchored" data-anchor-id="problems-with-pak">Problems with pak</h3>
<p>Get details about pak (if used): <code>pak::pak_sitrep()</code></p>
<p>Check if <a href="https://rstudio.github.io/renv/reference/config.html#renv-config-pak-enabled">renv has been configured to use pak</a>: <code>Sys.getenv('renv.config.pak.enabled')</code></p>
</section>
<section id="problems-with-renv-where-to-start" class="level3">
<h3 class="anchored" data-anchor-id="problems-with-renv-where-to-start">Problems with renv : where to start</h3>
<p>Can they provide a renv diagnostic? It is generated by running this: <code>renv::diagnostics()</code>.</p>
</section>
<section id="problems-with-renv-cache-location" class="level3">
<h3 class="anchored" data-anchor-id="problems-with-renv-cache-location">Problems with renv : cache location</h3>
<p>Check the location of the renv cache:</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>paths<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>()</span>
<span id="cb30-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RENV_PATHS_CACHE'</span>)</span>
<span id="cb30-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'renv.config.external.libraries'</span>)</span>
<span id="cb30-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'renv.download.trace'</span>)</span>
<span id="cb30-5">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>paths<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cache</span>()</span>
<span id="cb30-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RENV_PATHS_PREFIX_AUTO'</span>)</span></code></pre></div>
<p>Make sure that it is located to a writeable location (if it is a mount, see the note about file mounts below, this could be a source of issues):</p>
<p><code>system('namei -l /rsspdata/common/renv_cache/renv/v5/R-3.6/x86_64-pc-linux-gnu')</code></p>
<p>Check that the renv cache location matches the library locations: <code>.libPaths()</code></p>
<p>By default packages are installed into the global cache at <code>~/.cache/R/renv/</code> and symlinked from the users cache within the project at <code>~/renv/library/</code>.</p>
<p>Are they using a <a href="https://rstudio.github.io/renv/articles/package-install.html?q=PATH#shared-cache-locations">shared renv cache</a>, or an <a href="https://rstudio.github.io/renv/reference/config.html#renv-config-external-libraries">external library</a>,</p>
<p>Do they know if they’ve implemented settings in either of these, and could they share the contents?</p>
<ul>
<li><a href="https://packagemanager.rstudio.com/__docs__/user/configure-r/#configure-base-r">Rprofile.site</a> : The <code>RProfile.site</code> file is typically located at <code>etc/Rprofile.site</code></li>
<li><a href="https://support.posit.co/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf">Renviron.site</a> : The <code>Renviron.site</code> file is specific to the R installation (in this case I’m interested in if it exists for R 4.3 and R 3.6), typically located at <code>file.path(R.home("etc"), "Renviron.site")</code>.</li>
<li>Check if an external library is referenced in the environment: <code>options('renv.config.external.libraries')</code></li>
</ul>
<p>Is the goal to use a <a href="https://rstudio.github.io/renv/articles/package-install.html?q=PATH#shared-cache-locations">shared renv cache</a> location? There are a couple caveats with shared cache’s that can make them tricky. (1) cache permissions can be set with ACL’s, needing admin oversight to make sure are set correctly, (2) packages in the cache are owned by the requesting user, unless the RENV_CACHE_USER option is set. When set, renv will attempt to run <code>chown -R &lt;package&gt; &lt;user&gt;</code> to update cache ownership after the package has been copied into the cache.</p>
<p>If the desired behavior is to have a <a href="https://rstudio.github.io/renv/articles/package-install.html?q=PATH#shared-cache-locations">shared renv cache</a> then these two settings will likely need to be added to the project .Renviron, user .Renviron, or site Renviron.site file:</p>
<ul>
<li><a href="https://rstudio.github.io/renv/articles/package-install.html#cache-location">RENV_PATHS_CACHE</a> : Path location for a cache shared across multiple users</li>
<li><a href="https://rstudio.github.io/renv/articles/package-install.html?q=PATH#shared-cache-locations">RENV_CACHE_USER</a> : When using a shared cache, renv can re-assign ownership of the cache’d package to a separate user account</li>
</ul>
<p>I’d be curious, if it’s possible for them, to see if they are able to use R 4.4, or to set that parameter <code>RENV_PATHS_PREFIX_AUTO</code> to true (for example for just the session with <code>Sys.setenv("RENV_PATHS_PREFIX_AUTO" = TRUE)</code>) using their current version of R, and repeat the steps of installing a package:</p>
<blockquote class="blockquote">
<p>Starting with R 4.4.0, renv automatically uses a platform prefix for library paths on linux (the equivalent to setting <code>RENV_PATHS_PREFIX_AUTO = TRUE</code>). This means that, for example, upgrading to a new version of an OS will automatically signal to renv that new library + cache directories will be required.</p>
</blockquote>
<p>Of course, they could also try this for installing the package, bypassing the cache, and see if it works (but I’m worried that there is a ghost setting somewhere that needs to be removed so that issues don’t keep popping up):</p>
<pre class="plaintext"><code># install a package, bypassing the cache
renv::install("&lt;package&gt;", rebuild = TRUE)

# restore packages from the lockfile, bypassing the cache
renv::restore(rebuild = TRUE)</code></pre>
</section>
<section id="problems-with-renv-other" class="level3">
<h3 class="anchored" data-anchor-id="problems-with-renv-other">Problems with renv : other</h3>
<p>Check:</p>
<ul>
<li>Are you running the latest renv? If not, upgrade</li>
<li>Add additional logging: <code>options(renv.download.trace = TRUE)</code></li>
<li>Take a diagnostic: <code>renv::diagnostics()</code></li>
</ul>
<p>If you are having particular issue with a package and it keeps being pulled in from the cache then doing a complete purge and reinstall can be useful:</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">purge</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stringr"</span>)</span>
<span id="cb32-2">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">purge</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stringi"</span>)</span>
<span id="cb32-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stringr"</span>)</span></code></pre></div>
<p><code>renv::purge</code> removes packages completely from the package cache (which may be shared across projects) rather than just removing the package from the project which is what <code>renv::remove</code> does. This can be useful if a package which had previously been installed in the cache has become corrupted or unusable, and needs to be re-installed.</p>
<p>Follow these steps to “flush” and rebuild the renv environment, without losing the important parts of your renv.lock that are defining the R version and package versions:</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">snapshot</span>()</span>
<span id="cb33-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make the appropriate changes (for example, changing OS) </span></span>
<span id="cb33-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the renv.lock file manually to reflect any needed changes (for example, changing the repository URL) </span></span>
<span id="cb33-4">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deactivate</span>()</span>
<span id="cb33-5">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">activate</span>()</span>
<span id="cb33-6">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restore</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rebuild=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) </span></code></pre></div>
<p>Check that the packages either installed into the global cache at <code>~/.cache/R/renv/</code> or the users cache within the project at <code>~/renv/library/</code>. The folder structure will give some clues for whether source, binaries were installed, and which OS and R version they were installed for if specified.</p>
</section>
<section id="problems-with-packages-not-persisting" class="level3">
<h3 class="anchored" data-anchor-id="problems-with-packages-not-persisting">Problems with packages not persisting</h3>
<p>Is this on a cloud vendor? IE sagemaker, google workstations, azureml? Check that the package repository location is being saved to the mounted drive. If it is saved to the general OS that is ephemeral it will be lost when the session is spun down. This also applies for things like git credentials.</p>
</section>
<section id="incorrect-corrupted-r-installation" class="level3">
<h3 class="anchored" data-anchor-id="incorrect-corrupted-r-installation">Incorrect / corrupted R installation</h3>
<p>Check for an incorrect R installation for the OS, or a R installation that has gotten corrupted. An easy way to test this is to install a new R version, making sure to closely follow <a href="https://docs.posit.co/resources/install-r/">the instructions</a> as well as verifying the OS version.</p>
</section>
<section id="incorrect-package-repository-source-url-for-the-particular-system-os" class="level3">
<h3 class="anchored" data-anchor-id="incorrect-package-repository-source-url-for-the-particular-system-os">Incorrect package repository source URL for the particular system OS</h3>
<p>When R installs a binary package, it doesn’t actually check if the package can be loaded after installation, which is different from source packages. So it is unfortunately possible to install a binary package only to find out later that it can’t actually be loaded.</p>
<p>Check the URL that the user is installing from: <code>options('repos')</code></p>
<p>Temporarily point the repository to global CRAN and check if the packages will successfully install. For example by running this: <code>options(repos=c(CRAN="https://cran.r-project.org"))</code> and then installing any package with <code>install.packages("ggplot2")</code></p>
<p>Check in <code>/etc/rstudio/rsession.conf</code> if there is anything that would set the library location, for example <code>r-libs-user=~/R/library</code>.</p>
<p>It may also be useful to verify both the OS you are currently useing as well as checking that the repository you are pointing towards is using the correct OS if it is pulling in the binaries.</p>
<p>For debian/ubuntu distributions:</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb34-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">lsb_release</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-a</span></span></code></pre></div>
<p>For other distributions (more broadly cross-linux compatible command):</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> /etc/os-release</span></code></pre></div>
</section>
<section id="users-lacking-readwrite-permissions-to-their-home-directory" class="level3">
<h3 class="anchored" data-anchor-id="users-lacking-readwrite-permissions-to-their-home-directory">Users lacking read/write permissions to their home directory</h3>
<p>Check the home directory permissions on <code>/home/username/</code>. For example with <code>namei -l /home/username/</code>.</p>
<p>If useful, could try recursively chown-ing the directory with the user experiencing the issue and <code>chmod 750</code> to make sure there is access.</p>
<p>This can commonly happen after a migration from one server to another, if the correct permissions weren’t correctly carried over. This is why we commonly recommend using rsync with the -a flag for transfer any files / directories. This syncs directories recursively and preserve symbolic links, groups, ownership, and permissions. Additionally, rsync needs to be used in root mode in order to completely move the various software and home directory components as it includes files with restrictive read and write permissions.</p>
<p>For example, the permissions should look something like: <code>-rwx-r--r--</code></p>
</section>
<section id="users-lacking-permissions-to-.libs" class="level3">
<h3 class="anchored" data-anchor-id="users-lacking-permissions-to-.libs">Users lacking permissions to ./libs</h3>
<p>Check the permissions on <code>./libs/</code>. For example with <code>namei -l ./libs</code> and <code>ls -la ./libs</code></p>
</section>
<section id="incorrect-pam-configuration-for-users" class="level3">
<h3 class="anchored" data-anchor-id="incorrect-pam-configuration-for-users">Incorrect PAM configuration for users</h3>
<p>Check the output of <code>sudo getent passwd username</code></p>
<p>From a workbench session the output of the environment, <code>Sys.getenv()</code> and compare between a Workbench session and logged into a R session as root on the server (after SSH-ing in)</p>
<p>From an SSH session as root check the outputs of the user verification commands: <code>sudo /usr/lib/rstudio-server/bin/pamtester --verbose &lt;session-profile&gt; &lt;user&gt; authenticate acct_mgmt setcred open_session</code></p>
<p>For example this command will likely look like: <code>sudo /usr/lib/rstudio-server/bin/pamtester --verbose rstudio-session username authenticate acct_mgmt setcred open_session</code></p>
<p>Check for any umask or mask lines used during user provisioning, in the <code>/etc/sssd/sssd.conf</code> file</p>
</section>
<section id="server-hardening" class="level3">
<h3 class="anchored" data-anchor-id="server-hardening">Server hardening</h3>
<p>Another thing to check is whether <a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/using_selinux/changing-selinux-states-and-modes_using-selinux">SELinux is enabled on the system</a>. Check the mode with <code>getenforce</code></p>
<p>This can result in user specific errors, in that case compare the SELinux context for a user that has successfully package installations to the one that is having errors.</p>
<p>Often the following command will work to fix SELinux context issues: <code>restorecon -Rv /home/users/username</code></p>
<p>Great article from our support team discussing <a href="https://support.posit.co/hc/en-us/articles/4579112985751-SELinux-a-quick-primer-and-troubleshooter">how to use selinux</a></p>
<p>Disable SELINUX (RHEL only): <code>setenforce 0 &amp;&amp; sudo sed -i 's/^SELINUX=.*/SELINUX=disabled/g' /etc/selinux/config</code></p>
<p>Check for <a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/assembly_installing-the-system-in-fips-mode_security-hardening">FIPS being enabled</a>: <code>fips-mode-setup --check</code></p>
<p><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/assembly_installing-the-system-in-fips-mode_security-hardening">This article from redhat on FIPS mode</a> is also very useful.</p>
</section>
<section id="mounted-share-drive" class="level3">
<h3 class="anchored" data-anchor-id="mounted-share-drive">Mounted share drive</h3>
<p>Check if <code>/home</code> on the server, or is it a network mount (NFS or CIFS). In NFS, for example, there can be the use of access control lists which can impact permissions. Similarly, when working in a system that has a mounted share drive then would want to check that libraries are being written to that share so you get persistence. Typically this means writing to inside the home directory. Check mounted drives with: <code>df -h</code></p>
<p>Check <code>/etc/fstab</code> to see if the home directories are mounted with <code>noexec</code></p>
<p>For example, this shows that the home directories were mounted with <code>noexec</code>: <code>/dev/mapper/rhel-home  /home  xfs    defaults,noexec,nosuid,nodev   0 0</code></p>
<p>This resulted in this error message:</p>
<pre><code>library(stringi)Error: package or namespace load failed for 'stringi' in dyn.load(file, DLLpath = DLLpath, ...):
unable to load shared object '/home/c_jjones/R/x86_64-pc-linux-gnu-library/4.3/stringi/libs/stringi.so':
  /home/c_jjones/R/x86_64-pc-linux-gnu-library/4.3/stringi/libs/stringi.so: failed to map segment from shared object</code></pre>
</section>
<section id="azure-cloud-images" class="level3">
<h3 class="anchored" data-anchor-id="azure-cloud-images">Azure cloud images</h3>
<p>The default Azure RHEL images are unfortunately constricted in their ability to do some things.</p>
</section>
<section id="slurm" class="level3">
<h3 class="anchored" data-anchor-id="slurm">Slurm</h3>
<p>The Slurm service account should have full privileges to the Slurm environment (like killing jobs).</p>
<p>In regards to not being able to run the diagnostics command, could you please provide the following:</p>
<ul>
<li>Enable debug logging by setting enable-debug-logging=1 in /etc/rstudio/launcher.slurm.conf</li>
<li>Trigger the issue you are experiencing after restarting the launcher.</li>
<li>Resulting logs will be in: - /var/lib/rstudio-launcher/Slurm/rstudio-slurm-launcher.log</li>
<li>The Slurm version, which can be found by running sinfo –version</li>
<li>The installation location of Slurm on the host</li>
<li>Your /etc/slurm.conf (or equivalent) configuration file</li>
<li>The output of running sinfo as the Slurm service user configured in /etc/rstudio/launcher.slurm.conf</li>
<li>Run test job with srun date</li>
<li>Replace <user> with a valid username of a user that is set up to run Posit - Workbench in your installation, in the commands below:</user></li>
<li>sudo rstudio-server stop</li>
<li>sudo rstudio-server verify-installation –verify-user=<user></user></li>
<li>sudo rstudio-server start</li>
<li>The output of running sudo rstudio-launcher status</li>
</ul>
</section>
</section>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ul>
<li><a href="https://rstudio.github.io/renv/reference/paths.html#sharing-state-across-operating-systems">Sharing state across operating systems</a></li>
<li><a href="https://rstats.wtf/r-startup">What they forgot to teach you about R</a></li>
<li><a href="https://rstudio.github.io/renv/reference/config.html#renv-config-repos-override">renv.config.repos.override</a></li>
<li><a href="https://support.posit.co/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf">Managing R with .Rprofile, .Renviron, Rprofile.site, Renviron.site, rsession.conf, and repos.conf</a></li>
<li><a href="https://packagemanager.rstudio.com/__docs__/user/configure-r/">Package Manager admin guide: Configuring R Environments</a></li>
<li><a href="https://docs.posit.co/ide/server-pro/rstudio_pro_sessions/package_installation.html">Workbench admin guide: Rstudio Pro Sessions: Package Installation</a></li>
<li><a href="https://solutions.posit.co/envs-pkgs/environments/">Reproduceable Environments</a></li>
<li><a href="https://packagemanager.rstudio.com/__docs__/admin/serving-binaries/#binary-user-agents">R user agent header can be configured</a></li>
<li><a href="https://support.posit.co/hc/en-us/articles/218730228-Resetting-a-user-s-state-in-the-RStudio-IDE-on-Posit-RStudio-Workbench-RStudio-Server">Reset users state on Workbench</a></li>
<li><a href="https://support.posit.co/hc/en-us/articles/215733837-Managing-libraries-for-RStudio-Workbench-RStudio-Server">Managing libraries for RStudio Workbench / RStudio Server</a></li>
<li><a href="https://solutions.posit.co/envs-pkgs/rsw_defaults/">Setting Default Repositories in Workbench</a></li>
<li><a href="https://rstudio.github.io/r-manuals/r-admin/">R Manuals :: R Installation and Administration</a></li>
<li>It was discussed in <a href="https://stackoverflow.com/questions/65326540/how-to-change-r-repository-cran-from-renv-lock-to-get-packages-from-an-internal">this stackoverflow post</a> with this example (run from console): `Sys.setenv(“RENV_CONFIG_REPOS_OVERRIDE” = “your_private_package_repository_url”)</li>
<li>Internal slack thread: <a href="https://positpbc.slack.com/archives/CFLAY27EH/p1715370382325929" class="uri">https://positpbc.slack.com/archives/CFLAY27EH/p1715370382325929</a></li>
</ul>



</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/renv-environments.html</guid>
  <pubDate>Fri, 21 Jun 2024 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Shiny apps and Analytics</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/shiny-apps-and-analytics.html</link>
  <description><![CDATA[ 





<p>Adding instrumentation to your shiny apps can help you understand:</p>
<ul>
<li>User interaction</li>
<li>Most viewed dashboards</li>
<li>What is being exported and by who</li>
<li>Trends with access over time</li>
<li>Time spent on interactions</li>
</ul>
<p>Connect (as a software) isn’t aggregating and making available user interaction information, though it is aggregating higher level app specific access auditing type information. However, advanced interaction instrumentation can be accomplished through adding tracking into the content itself using services like hotjar, google analytics, or saving into the log file or pushing into somewhere external.</p>
<ul>
<li>There’s more on the Connect API here: <a href="https://solutions.posit.co/operations/connect-apis/" class="uri">https://solutions.posit.co/operations/connect-apis/</a></li>
<li>Google analytics likely requires adding some JavaScript to your site which you can do with Shiny, <a href="https://shiny.posit.co/r/reference/shiny/latest/builder.html" class="uri">https://shiny.posit.co/r/reference/shiny/latest/builder.html</a></li>
<li>This page in the Shiny docs give a walkthrough as well: <a href="https://shiny.posit.co/r/articles/build/google-analytics/" class="uri">https://shiny.posit.co/r/articles/build/google-analytics/</a></li>
<li>Tracking where within the Shiny app users are spending their time (which tab, etc) is interesting.</li>
<li>Monitoring user behavior with hotjar (paid): <a href="https://www.r-bloggers.com/2022/06/r-shiny-hotjar-how-to-monitor-user-behavior-in-r-shiny-apps/" class="uri">https://www.r-bloggers.com/2022/06/r-shiny-hotjar-how-to-monitor-user-behavior-in-r-shiny-apps/</a></li>
<li>Here’s an article that outlines more free options: <a href="https://www.appsilon.com/post/monitoring-r-shiny-user-adoption" class="uri">https://www.appsilon.com/post/monitoring-r-shiny-user-adoption</a></li>
<li>Javascript might need to be added to your site to support using google analytics: <a href="https://shiny.posit.co/r/reference/shiny/latest/builder.html" class="uri">https://shiny.posit.co/r/reference/shiny/latest/builder.html</a></li>
<li>Various examples for tracking built in to Connect: <a href="https://solutions.rstudio.com/data-science-admin/tracking/" class="uri">https://solutions.rstudio.com/data-science-admin/tracking/</a> and <a href="https://github.com/sol-eng/connect-usage" class="uri">https://github.com/sol-eng/connect-usage</a></li>
<li>Video showing how to use the Connect API: <a href="https://www.youtube.com/watch?v=0iljqY9j64U" class="uri">https://www.youtube.com/watch?v=0iljqY9j64U</a></li>
<li>This heatmap package for seeing where users click I think would be cool to explore: <a href="https://github.com/RinteRface/shinyHeatmap">https://github.com/RinteRface/shinyHeatmap</a></li>
</ul>
<p>You can also add debug messages throughtout your shiny app and then use that with parsing the logs to estimate user interactions.</p>
<ul>
<li>Add debug messages with: <a href="https://github.com/johnmyleswhite/log4r" class="uri">https://github.com/johnmyleswhite/log4r</a></li>
<li>Learn about your user with client data: <a href="https://shiny.rstudio.com/articles/client-data.html" class="uri">https://shiny.rstudio.com/articles/client-data.html</a></li>
</ul>



 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/shiny-apps-and-analytics.html</guid>
  <pubDate>Mon, 29 Apr 2024 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Workplace articles</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/lists/workplace.html</link>
  <description><![CDATA[ 





<p><a href="https://andersoncardoso.github.io/ydd/">Yolo manifesto</a></p>
<p><a href="https://catgirl.ai/log/comfy-software/">Comfy software</a></p>
<p><a href="https://www.theverge.com/ad/21520136/open-source-community-is-building-better-businesses">Open source as the “new normal”</a></p>
<p><a href="https://www.gallup.com/workplace/354935/teams-bosses-overcoming-matrix-madness.aspx">Overcoming matrix madness</a></p>
<p><a href="https://www.pmi.org/learning/library/matrix-organization-structure-reason-evolution-1837">Matrix organizations</a></p>
<p><a href="https://www.gallup.com/workplace/354935/teams-bosses-overcoming-matrix-madness.aspx">Overcoming matrix madness</a></p>
<p><a href="https://www.convoso.com/blog/how-to-overcome-call-center-burnout/">Call center burnout</a></p>
<p><a href="https://medium.com/@StartupBusinesstips/product-led-vs-sales-led-saas-growth-or-both-25bb5e078822">Product led vs sales led organizations</a></p>
<p><a href="https://www.tsia.com/blog/laer-explained-a-new-customer-engagement-model-for-a-new-business-era">LAYER</a></p>
<p><a href="https://noidea.dog/glue">Being glue</a></p>
<p><a href="https://queue.acm.org/detail.cfm?id=3595878">Discussion of cognitive load and how big of a barrier it can be</a></p>
<p><a href="https://github.com/zakirullin/cognitive-load">Cognitive load</a></p>
<p><a href="https://komoroske.com/slime-mold/">How organizations are like slime molds</a></p>
<p><a href="https://www.forbes.com/sites/gautammukunda/2024/02/22/let-the-engineers-lead-america-needs-boeing-to-be-great/?sh=4327814630e1">Forbes - let the engineers lead (boeing)</a></p>
<p><a href="https://www.goodreads.com/book/show/8586375-failure-to-learn">Failure to Learn: the BP refinery disaster</a></p>



 ]]></description>
  <category>datascience</category>
  <category>opinions</category>
  <category>hardware</category>
  <category>software</category>
  <guid>https://questionable.quarto.pub/blog/lists/workplace.html</guid>
  <pubDate>Fri, 19 Apr 2024 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/lists/img/" medium="image"/>
</item>
<item>
  <title>Coding write-ups and resources</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/lists/code.html</link>
  <description><![CDATA[ 





<p><a href="https://news.ycombinator.com/news">Source for good articles</a></p>
<p><a href="https://a16z.com/2021/05/27/cost-of-cloud-paradox-market-cap-cloud-lifecycle-scale-growth-repatriation-optimization/">The true cost of the cloud</a></p>
<p><a href="https://medium.com/8vc-news/the-case-for-professional-services-62b9921c6cd6">The case for professional services</a></p>
<p><a href="https://www.bitecode.dev/p/relieving-your-python-packaging-pain">Opinionated article on Python installations</a></p>
<p><a href="https://www.bitecode.dev/p/why-not-tell-people-to-simply-use">This page addresses poetry and conda</a></p>
<p><a href="https://suzdalnitski.medium.com/oop-will-make-you-suffer-846d072b4dce">Object oriented programming is the biggest mistake of all time</a></p>
<p><a href="https://vicki.substack.com/p/google-drive-is-production">Google drive is production</a></p>
<p><a href="https://cxl.com/blog/does-offering-more-choices-actually-tank-conversions/">Paradox of choice</a></p>
<p><a href="https://world.hey.com/dhh/why-we-re-leaving-the-cloud-654b47e0">Why we’re leaving the cloud</a></p>
<p><a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8085589/">Moving beyond “algorithmic bias is a data problem”</a></p>
<p><a href="https://www.youtube.com/watch?v=ajGX7odA87k">That keynote talk “USENIX Security ’18-Q: Why Do Keynote Speakers Keep Suggesting That Improving Security Is Possible?”</a> : 4:08 is where he talks about ml</p>
<p><a href="https://www.youtube.com/watch?v=AaU6tI2pb3M">Here’s What Ethical AI Really Means - YouTube philosophy tube</a></p>
<p><a href="https://hanselminutes.com/847/engineering-stack-overflow-with-roberta-arcoverde">Podcast on Stackoverflow Architecture</a></p>
<p><a href="https://www.goodreads.com/book/show/51777543-data-feminism?ref=nav_sb_ss_1_8">Data Feminism</a></p>
<p><a href="https://www.goodreads.com/book/show/41104077-invisible-women?ref=nav_sb_ss_1_15">Invisible Women</a></p>
<p><a href="https://www.youtube.com/watch?t=374&amp;v=AS2kuD--z44&amp;feature=youtu.be">Quality Jam 2017: Michael Bolton “A Ridiculously Rapid Introduction to Rapid Software Testing”</a></p>
<p><a href="https://gist.github.com/sharadhr/39b804236c1941e9c30d90af828ad41e">Home not so sweet home gist</a></p>
<ul>
<li>Includes links to pages like <a href="https://utcc.utoronto.ca/~cks/space/blog/sysadmin/ReportConfigFileLocations">Everything that uses configuration files should report where they’re located</a></li>
</ul>
<p><a href="https://www.linuxatemyram.com/">Help linux ate my RAM</a></p>
<p><a href="https://unsplash.com/">Free images for including in presentations</a></p>
<p><a href="https://www.reddit.com/r/devops/comments/vzpqsw/getting_harrassed_by_datadog_rant_suggestions/">Datadog sales people are annoying</a></p>
<p><a href="https://counting.substack.com/p/counting-explosions-at-unity?utm_source=substack&amp;publication_id=27849&amp;post_id=137046759&amp;utm_medium=email&amp;utm_content=share&amp;utm_campaign=email-share&amp;triggerShare=true&amp;isFreemail=true&amp;r=yxnx">Counting explosions at Unity, a data analysts perspective</a></p>
<p><a href="https://resend.com/blog/incident-report-for-february-21-2024">Database rebuild incident</a></p>
<p><a href="https://www.cloudflare.com/learning/ssl/lava-lamp-encryption/">How do lava lamps help with Internet encryption?</a></p>
<p>Free email for testing things: mailtrap</p>
<p><a href="https://www.youtube.com/@robmulla/search?query=pandas">If you haven’t done a Pandas data analysis project in awhile, it’s probably not a bad idea to watch this guy’s vids</a></p>
<p><a href="https://www.troyhunt.com/sending-spammers-to-password-purgatory-with-microsoft-power-automate-and-cloudflare-workers-kv/">Password purgatory</a></p>
<p><a href="https://www.youtube.com/watch?v=Xty-gzzIkBc">Everything I learned about concurrency and reliability I learned at the Waffle House</a></p>
<p><a href="https://youtu.be/ia8Q51ouA_s?si=2xOQGQO-LYvB3fKZ">Positive affirmations for site reliability engineers</a></p>
<p><a href="https://github.com/cobriant/vaporwave.rstheme">vaporwave RStudio theme</a></p>



 ]]></description>
  <category>datascience</category>
  <category>opinions</category>
  <category>hardware</category>
  <category>software</category>
  <guid>https://questionable.quarto.pub/blog/lists/code.html</guid>
  <pubDate>Fri, 19 Apr 2024 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/lists/img/" medium="image"/>
</item>
<item>
  <title>The importance of good programming</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/lists/good-programming.html</link>
  <description><![CDATA[ 





<p>A handful of articles that have stood out over the years as interesting case studies into the importance of good programming, and what that actually means.</p>
<section id="uk-post-office-scandal" class="level2">
<h2 class="anchored" data-anchor-id="uk-post-office-scandal">UK Post Office Scandal</h2>
<ul>
<li><a href="https://www.youtube.com/watch?v=h3UIdGRBGlY">Developers blamed for the post office scandal?</a></li>
<li><a href="https://www.postofficetrial.com/2019/01/victims-testimony.html">Victim testimony</a></li>
<li><a href="https://www.postofficetrial.com/2019/03/the-smoking-gun.html">Remote access and mistakes blamed on post masters, a smoking gun</a></li>
<li><a href="https://www.reddit.com/r/it/s/i5NE3qQgv0">Example of the terrible quality of the code - were they paid by line of code submitted? Does this imply a fauly language conversion? Risks of overflow errors?</a></li>
<li><a href="https://www.postofficetrial.com/2019/12/second-sights-ron-warmington-breaks-his.html?m=1">One of the independent investigators from 2012 breaks silence</a></li>
<li><a href="https://www.postofficetrial.com/2021/07/second-sight-were-told-about-remote.html?m=1">Evidence that back in 2012 the indepent investigators were told about remote access, implying pejury in all later cases</a></li>
<li><a href="https://www.postofficetrial.com/2019/03/horizon-trial-day-4-day-of-two-halves.html?m=1">They Could, And They Did Change Branch Transaction Data</a></li>
<li><a href="https://www.postofficetrial.com/2019/03/miscarriages-of-justice.html?m=1">Miscarriage of justice - the Rose report</a></li>
<li><a href="https://www.postofficescandal.uk/post/current-post-office-horizon-it-issues/">List of current issues / bugs as of 2017? with the software. One can only imagine how much worse it used to be</a></li>
<li><a href="https://www.postofficescandal.uk/post/how-not-to-commission-a-complex-it-project/">Project manager on the original project discusses his impressions - how not to commission a complex project</a> <a href="https://www.postofficescandal.uk/post/inquiry-phase-2-star-witness-dave-gives-it-both-barrels/">Inquiry Phase 2: Star Witness – Dave gives it both barrels</a></li>
<li><a href="https://www.postofficetrial.com/2019/03/horizon-trial-day-5-he-had-loaded-gun.html">Known errors in the software, perjury, and lack of disclosure</a></li>
<li><a href="https://www.postofficetrial.com/2019/06/horizon-trial-day-16-that-surprises-me.html">Interview with IT - throwing coconuts</a></li>
<li><a href="https://www.postofficetrial.com/2019/06/horizon-trial-day-18-dr-robert.html">Interview with the other IT</a></li>
<li><a href="https://www.postofficetrial.com/2019/04/bates-v-post-office-recusal-judgment_9.html">Attempt by the post to recuse the judge - right after a verdict was handed down. Sour grapes, anyone?</a></li>
<li><a href="https://www.postofficetrial.com/2020/07/the-post-office-cover-up-part-2-they.html">The cover up</a></li>
<li><a href="https://www.postofficetrial.com/2019/03/why-did-post-office-accuse-aakash-patny.html">Why did the lawyer for the post office act this way?</a></li>
<li><a href="https://www.civillitigationbrief.com/2015/07/23/thinking-of-alleging-or-pleading-fraud-better-read-this-first/">Thinking of alleging or pleading fraud: better read this first</a></li>
</ul>
</section>
<section id="chinook-crash" class="level1">
<h1>Chinook Crash</h1>
<ul>
<li><a href="https://www.computerweekly.com/blog/Public-Sector-IT/Chinook-Mk2-we-publish-new-evidence-of-computer-problems">New evidence of computer problems</a></li>
</ul>
<blockquote class="blockquote">
<p>Although only 17% of the code has been analysed [EDS, the code’s assessors, stopped work on the code because of the density of anomalies found] 21 category one and 153 category two anomalies have been revealed. One of these, the reliance on an undocumented and unproved feature of the processor [based on an Intel ASM96 chip] is considered to be positively dangerous.</p>
</blockquote>
<blockquote class="blockquote">
<p>EDS was not satisfied with Hawker Siddeley’s assurances. In its report on the Fadec software, EDS said: “Correct operation (of the Fadec) depends on an undocumented feature of the Intel ASM 96 microcomputer. EDS-Scicon’s concern is that a change in the mask or process of the ASM chip at some point in the future may cause incorrect operation of the FADEC.]</p>
</blockquote>
</section>
<section id="bugs-with-the-therac-25-computer-controlled-radiation-therapy-machine" class="level1">
<h1>Bugs with the Therac-25 computer-controlled radiation therapy machine</h1>
<ul>
<li><a href="https://hackaday.com/2015/10/26/killed-by-a-machine-the-therac-25/">Killed by a machine</a></li>
</ul>
<blockquote class="blockquote">
<p>If this story has a hero, it’s [Fritz Hager], the staff physicist at the East Texas Cancer Center in Tyler, Texas. After the second incident at his facility, he was determined to get to the bottom of the problem. In both cases, the Therac-25 displayed a “Malfunction 54” message. The message was not mentioned in the manuals. AECL explained that Malfunction 54 meant that the Therac-25’s computer could not determine if there a underdose OR overdose of radiation.</p>
</blockquote>
<blockquote class="blockquote">
<p>The same radiotherapy technician had been involved in both incidents, so [Fritz] brought her back into the control room to attempt to recreate the problem. The two “locked the doors” NASA style, working into the night and through the weekend trying to reproduce the problem. With the technician running the machine, the two were able to pinpoint the issue. The VT-100 console used to enter Therac-25 prescriptions allowed cursor movement via cursor up and down keys. If the user selected X-ray mode, the machine would begin setting up the machine for high-powered X-rays. This process took about 8 seconds. If the user switched to Electron mode within those 8 seconds, the turntable would not switch over to the correct position, leaving the turntable in an unknown state.</p>
</blockquote>
<blockquote class="blockquote">
<p>As the investigations and lawsuits progressed, the software for the Therac-25 was placed under scrutiny. The Therac-25’s PDP-11 was programmed completely in assembly language. Not only the application, but the underlying executive, which took the place of an operating system. The computer was tasked with handling real-time control of the machine, both its normal operation and safety systems. Today this sort of job could be handled by a microcontroller or two, with a PC running a GUI front end.</p>
</blockquote>
<blockquote class="blockquote">
<p>AECL never publicly released the source code, but several experts including [Nancy Leveson] did obtain access for the investigation. What they found was shocking. The software appeared to have been written by a programmer with little experience coding for real-time systems. There were few comments, and no proof that any timing analysis had been performed. According to AECL, a single programmer had written the software based upon the Therac-6 and 20 code. However, this programmer no longer worked for the company, and could not be found.</p>
</blockquote>
<blockquote class="blockquote">
<p>The lawsuits were settled out of court. It seemed like the problems were solved until January 17th, 1987, when another patient was overdosed at Yakima, Washington. This problem was a new one: A counter overflow. If the operator sent a command at the exact moment the counter overflowed, the machine would skip setting up some of the beam accessories – including moving the stainless steel aiming mirror. The result was once again an unscanned beam, and an overdose. The patient died 3 months later.</p>
</blockquote>
<blockquote class="blockquote">
<p>It’s important to note that while the software was the lynch pin in the Therac-25, it wasn’t the root cause. The entire system design was the real problem. Safety-critical loads were placed upon a computer system that was not designed to control them. Timing analysis wasn’t performed. Unit testing never happened. Fault trees for both hardware and software were not created. These tasks are not only the responsibility of the software engineers, but the systems engineers on the project. Therac-25 is long gone, but its legacy will live on. This was the watershed event that showed how badly things can go wrong when software for life-critical systems is not properly designed and adequately tested.</p>
</blockquote>
</section>
<section id="ai-hype-train" class="level1">
<h1>AI Hype Train</h1>
<p><a href="https://www.youtube.com/watch?v=ajGX7odA87k">That keynote talk “USENIX Security ’18-Q: Why Do Keynote Speakers Keep Suggesting That Improving Security Is Possible?”</a></p>
<p><a href="https://ludic.mataroa.blog/blog/i-will-fucking-piledrive-you-if-you-mention-ai-again/">I Will Fu*king Piledrive You If You Mention AI Again</a></p>
</section>
<section id="others" class="level1">
<h1>Others</h1>
<p><a href="https://blog.grio.com/2021/07/when-small-software-bugs-cause-big-problems.html">WHEN SMALL SOFTWARE BUGS CAUSE BIG PROBLEMS</a></p>
<p><a href="https://arstechnica.com/security/2024/03/backdoor-found-in-widely-used-linux-utility-breaks-encrypted-ssh-connections/">Backdoors into open source package</a></p>
<p><a href="https://resend.com/blog/incident-report-for-february-21-2024">We immediately began the restoration process from a backup, which completed 6 hours later. Unfortunately, once it finished, we found that it failed to restore the data, so we had to start the restoration process a second time with a different backup</a></p>
<p><a href="https://counting.substack.com/p/counting-explosions-at-unity?utm_source=substack&amp;publication_id=27849&amp;post_id=137046759&amp;utm_medium=email&amp;utm_content=share&amp;utm_campaign=email-share&amp;triggerShare=true&amp;isFreemail=true&amp;r=yxnx">Counting explosions at Unity, a data analysts perspective</a></p>


</section>

 ]]></description>
  <category>datascience</category>
  <category>opinions</category>
  <category>hardware</category>
  <category>software</category>
  <guid>https://questionable.quarto.pub/blog/lists/good-programming.html</guid>
  <pubDate>Wed, 24 Jan 2024 07:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/lists/img/" medium="image"/>
</item>
<item>
  <title>Accessing data in Azure Data Lake (delta files)</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/delta-lake-and-azure.html</link>
  <description><![CDATA[ 





<p>This is some work I did exploring how to access the underlying databricks data storage, without having to go through databricks. Wanted to squirrel this away so it’s easy to find in the future!</p>
<section id="azure-data-lake" class="level2">
<h2 class="anchored" data-anchor-id="azure-data-lake">Azure Data Lake</h2>
<section id="set-up" class="level3">
<h3 class="anchored" data-anchor-id="set-up">Set up</h3>
<p>Landing page for Azure: &lt;<a href="https://portal.azure.com/">https://portal.azure.com/</a> &gt;</p>
<p>Follow this article: &lt;<a href="https://learn.microsoft.com/en-us/azure/storage/blobs/create-data-lake-storage-account">https://learn.microsoft.com/en-us/azure/storage/blobs/create-data-lake-storage-account</a> &gt;</p>
<p>The trick: ADL isn’t it’s own separate category, it gets created as part of a storage account.</p>
<p>Steps:</p>
<ol type="1">
<li><p>Go to storage account</p></li>
<li><p>Create and give it a name</p></li>
<li><p>Select: LRS</p></li>
<li><p>Switch to premium: block blobs</p></li>
<li><p>Change to hierarchical blob</p></li>
<li><p>Set tags:</p></li>
</ol>
<ul>
<li><p>rs:owner</p></li>
<li><p>rs:project = soleng</p></li>
<li><p>rs:environment = dev</p></li>
</ul>
<ol start="7" type="1">
<li>Once in just need access keys or shared access signature in order to gain access</li>
</ol>
</section>
<section id="add-data" class="level3">
<h3 class="anchored" data-anchor-id="add-data">Add data</h3>
<p>You can add data manually by creating a container and then using the upload icon.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://gist.github.com/assets/70042237/750bd967-979a-4220-a1f2-9cf5118dfcdd.png" class="lightbox" data-glightbox="description: .lightbox-desc-1" data-gallery="quarto-lightbox-gallery-1" title="image"><img src="https://gist.github.com/assets/70042237/750bd967-979a-4220-a1f2-9cf5118dfcdd.png" class="img-fluid figure-img" alt="image"></a></p>
<figcaption>image</figcaption>
</figure>
</div>
</section>
</section>
<section id="authentication" class="level2">
<h2 class="anchored" data-anchor-id="authentication">Authentication</h2>
<p>Access your authentication details through the Access Keys or Shared Access Signature links on the left. I prefer Access Keys since they are easier to use.</p>
<p>For authentication from an R script we’ll be using <a href="https://github.com/Azure/AzureStor">https://github.com/Azure/AzureStor</a></p>
<p>You’ll need to know:</p>
<ul>
<li><p>The Blob endpoint for your Azure Data Lake storage</p></li>
<li><p>An Access Key (this can also be done with a Shared Access Signature)</p></li>
</ul>
<pre><code>library(AzureStor)

blob_endpoint &lt;- "https://REDACTED.blob.core.windows.net/"

bl_endp_key &lt;- storage_endpoint(blob_endpoint, key="REDACTED")

# List containers and files in containers
list_storage_containers(bl_endp_key)
cont1 &lt;- storage_container(bl_endp_key, "container1")
list_storage_files(cont1)

# Download a file
storage_download(cont1, "/crm_call_center_logs.parquet")

# Upload a file 
storage_upload(cont1, "crm_call_center_logs.parquet", "newdir/crm_call_center_logs.parquet")</code></pre>
<p>You can also create and delete containers:</p>
<pre><code># Create a container
newcont &lt;- create_storage_container(bl_endp_key, "container3")

# Create a directory in the container
cont3 &lt;- storage_container(bl_endp_key, "container3")
create_storage_dir(cont3, "newdir")

# Delete a container
delete_storage_container(newcont)</code></pre>
</section>
<section id="reading-and-writing-delta-files" class="level2">
<h2 class="anchored" data-anchor-id="reading-and-writing-delta-files">Reading and Writing Delta Files</h2>
<p>Delta files can be read by using the sparklyr package: <a href="https://spark.rstudio.com/packages/sparklyr/latest/reference/spark_read_delta.html">https://spark.rstudio.com/packages/sparklyr/latest/reference/spark_read_delta.html</a> Thanks for the help with the magic incantation below!</p>
<p>In order to do this we will need to manage a Spark cluster. We can run it in local mode so that we aren’t connecting to an external cluster with billing:</p>
<pre><code>library(sparklyr)

#Install a local version of Spark
spark_install(version=3.4)

# Set Spark configuration to be able to read delta tables
conf &lt;- spark_config()
conf$`spark.sql.extensions` &lt;- "io.delta.sql.DeltaSparkSessionExtension"
conf$`spark.sql.catalog.spark_catalog` &lt;- "org.apache.spark.sql.delta.catalog.DeltaCatalog"

# For spark 3.4 
conf$sparklyr.defaultPackages &lt;- "io.delta:delta-core_2.12:2.4.0"

# Open a connection
sc &lt;- spark_connect("local", version = 3.4, packages = "delta", conf = conf)

# For this example we will use a built-in dataframe to save example data files, including one for delta tables
tbl_mtcars &lt;- copy_to(sc, mtcars, "spark_mtcars")

# Write spark dataframe to disk
spark_write_csv(tbl_mtcars,  path = "test_file_csv", mode = "overwrite")
spark_write_parquet(tbl_mtcars,  path = "test_file_parquet", mode = "overwrite")
spark_write_delta(tbl_mtcars,  path = "test_file_delta", mode = "overwrite")

# Read dataframes into normal memory
spark_tbl_handle &lt;- spark_read_csv(sc, path = "test_file_csv")
regular_df_csv &lt;- collect(spark_tbl_handle)
spark_tbl_handle &lt;- spark_read_parquet(sc, path = "test_file_parquet")
regular_df_parquet &lt;- collect(spark_tbl_handle)
spark_tbl_handle &lt;- spark_read_delta(sc, path = "test_file_delta")
regular_df_delta &lt;- collect(spark_tbl_handle)

# Disconnect
spark_disconnect(sc)</code></pre>
<p>You should now have normal dataframes in your regular R environment that can be used for further analytics:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://gist.github.com/assets/70042237/52a8fd86-8f58-4688-87a6-7a5433d28aee.png" class="lightbox" data-glightbox="description: .lightbox-desc-2" data-gallery="quarto-lightbox-gallery-2" title="image"><img src="https://gist.github.com/assets/70042237/52a8fd86-8f58-4688-87a6-7a5433d28aee.png" class="img-fluid figure-img" alt="image"></a></p>
<figcaption>image</figcaption>
</figure>
</div>
<p>Note: For Spark 3.5 you might have success with “io.delta:delta-core_2.12:3.0.0”</p>
</section>
<section id="troubleshooting" class="level2">
<h2 class="anchored" data-anchor-id="troubleshooting">Troubleshooting</h2>
<p>From R:</p>
<pre><code># See spark details (troubleshooting)
spark_config()
spark_get_java()
spark_available_versions()
spark_installed_versions()

# See session details
utils::sessionInfo() </code></pre>
<p>From bash:</p>
<pre><code>namei -l /usr/lib/spark</code></pre>
<p>Recommended troubleshooting: <a href="https://spark.rstudio.com/guides/troubleshooting.html">https://spark.rstudio.com/guides/troubleshooting.html</a></p>
</section>
<section id="about" class="level2">
<h2 class="anchored" data-anchor-id="about">About</h2>
<section id="azure-data-lake-azure-data-lake-storage-gen2-introduction---azure-storage" class="level3">
<h3 class="anchored" data-anchor-id="azure-data-lake-azure-data-lake-storage-gen2-introduction---azure-storage">Azure Data Lake: <a href="https://learn.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction">Azure Data Lake Storage Gen2 Introduction - Azure Storage</a></h3>
<blockquote class="blockquote">
<p>Azure Data Lake Storage Gen2 is a set of capabilities dedicated to big data analytics, built on Azure Blob Storage.</p>
</blockquote>
<blockquote class="blockquote">
<p>Data Lake Storage Gen2 converges the capabilities of Azure Data Lake Storage Gen1 with Azure Blob Storage. For example, Data Lake Storage Gen2 provides file system semantics, file-level security, and scale. Because these capabilities are built on Blob storage, you’ll also get low-cost, tiered storage, with high availability/disaster recovery capabilities.</p>
</blockquote>
<blockquote class="blockquote">
<p>A superset of POSIX permissions: The security model for Data Lake Gen2 supports ACL and POSIX permissions along with some extra granularity specific to Data Lake Storage Gen2. Settings may be configured through Storage Explorer or through frameworks like Hive and Spark.</p>
</blockquote>
<p>TLDR: Azure Data Lake is a place where data can be saved (similar to S3 buckets on Amazon).</p>
</section>
<section id="delta-tables-httpsdocs.delta.iolatestdelta-intro.html" class="level3">
<h3 class="anchored" data-anchor-id="delta-tables-httpsdocs.delta.iolatestdelta-intro.html">Delta Tables: <a href="https://docs.delta.io/latest/delta-intro.html">https://docs.delta.io/latest/delta-intro.html</a></h3>
<blockquote class="blockquote">
<p><a href="https://delta.io/">Delta Lake</a> is an <a href="https://github.com/delta-io/delta">open source project</a> that enables building a <a href="https://databricks.com/blog/2020/01/30/what-is-a-data-lakehouse.html">Lakehouse architecture</a> on top of <a href="https://databricks.com/discover/data-lakes/introduction">data lakes</a>. Delta Lake provides <a href="https://docs.delta.io/latest/concurrency-control.html">ACID transactions</a>, scalable metadata handling, and unifies <a href="https://docs.delta.io/latest/delta-streaming.html">streaming</a> and <a href="https://docs.delta.io/latest/delta-batch.html">batch</a> data processing on top of existing data lakes, such as S3, ADLS, GCS, and HDFS.</p>
</blockquote>
<p>You can check Delta Lake releases here: <a href="https://docs.delta.io/latest/releases.html">https://docs.delta.io/latest/releases.html</a></p>
<p>TLDR: Delta tables are a data file format, specifically used with Spark clusters (for example Databricks).</p>



</section>
</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/delta-lake-and-azure.html</guid>
  <pubDate>Thu, 11 Jan 2024 07:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Parallelization in R</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/parallelization.html</link>
  <description><![CDATA[ 





<p>For compute heavy and long running jobs, HPC can come to the rescue!</p>
<ul>
<li>HPC clusters typically have far more compute power than a normal server or a laptop</li>
<li>HPC clusters offer an infrastructure with significant compute power that can be leveraged as needed. So-called “jobs” on HPC have a well-defined start date but even more importantly so an end date.</li>
</ul>
<p>As a user remember though:</p>
<ul>
<li>It is your responsibility to develop performant and fast code since you are working on a shared resource - there is no excuse to not optimize for performance</li>
<li>Parallelization can speed up execution when done right, but there is no guarantee</li>
<li>“With great power comes great responsibility” - Spider Man</li>
</ul>
<section id="expectations" class="level1">
<h1>Expectations</h1>
<p>Pros</p>
<ul>
<li>CAN speed up otherwise long running tasks</li>
<li>CAN optimize and more efficiently use resources</li>
</ul>
<p>Cons</p>
<ul>
<li>CAN hog computing resources delay other scheduled jobs/access requests</li>
<li>CAN prevent others from getting work done (all requested resources are guaranteed and exclusively used by you)</li>
<li>CAN mask bad code design choices</li>
<li>CAN act as a denial-of-service attack to other systems</li>
</ul>
</section>
<section id="getting-started" class="level1">
<h1>Getting started</h1>
<p>Read:</p>
<ul>
<li><p>Learning to write code in parallel: <a href="https://forum.posit.co/t/learning-to-write-code-in-parallel/186992/4" class="uri">https://forum.posit.co/t/learning-to-write-code-in-parallel/186992/4</a></p></li>
<li><p>Depending on how your CPU is being overloaded (a single thread, versus multiple threads), it may be worth using the Parallel package to allow for multi-threading in your application. More information on this can be found here: <a href="https://www.rdocumentation.org/packages/parallel/versions/3.6.2" class="uri">https://www.rdocumentation.org/packages/parallel/versions/3.6.2</a></p></li>
<li><p>Resources in this Article for getting started: <a href="https://dept.stat.lsa.umich.edu/~jerrick/courses/stat701/notes/parallel.html" class="uri">https://dept.stat.lsa.umich.edu/~jerrick/courses/stat701/notes/parallel.html</a></p></li>
<li><p>Workbench and HPC session: <a href="https://github.com/sol-eng/Workbench-HPC-Webinar?tab=readme-ov-file" class="uri">https://github.com/sol-eng/Workbench-HPC-Webinar?tab=readme-ov-file</a></p></li>
<li><p>Parallel: <a href="https://www.davidzeleny.net/wiki/doku.php/recol:parallel" class="uri">https://www.davidzeleny.net/wiki/doku.php/recol:parallel</a></p></li>
<li><p>doparallel: <a href="https://www.r-bloggers.com/2024/01/r-doparallel-a-brain-friendly-introduction-to-parallelism-in-r/" class="uri">https://www.r-bloggers.com/2024/01/r-doparallel-a-brain-friendly-introduction-to-parallelism-in-r/</a></p></li>
<li><p>Parallelization tutorial: <a href="https://berkeley-scf.github.io/tutorial-parallelization/parallel-R.html" class="uri">https://berkeley-scf.github.io/tutorial-parallelization/parallel-R.html</a></p></li>
</ul>
</section>
<section id="when-sessions-are-crashing" class="level1">
<h1>When sessions are crashing</h1>
<p>It would help to see the following outputs run from your Linux server when you experience the issue:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">top</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">free</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-h</span> </span></code></pre></div>
<p>Also, share a copy of your <code>/etc/rstudio/profiles</code> file for review for any inconsistencies.</p>
</section>
<section id="things-to-watch-out-for" class="level1">
<h1>Things to watch out for</h1>
<ul>
<li>Some parts of your code are going to be slow, no matter how many cores! - Roger / Amdahl’s Law</li>
<li>Profile your code in order to understand base performance with <a href="https://rstudio.github.io/profvis/">profvis</a></li>
<li>Unless built-in, often parallelization means subtasks where logs need to be manually captured and passed back (for troubleshooting if things go wrong)</li>
<li>Overhead / house keeping costs - Additional resources and time are needed to manage the parallel execution of a task. ie. coordinating communication between different processing units, syncing access to shared resources, managing the distribution of data, etc.</li>
</ul>
</section>
<section id="making-code-faster" class="level1">
<h1>Making code faster</h1>
<ul>
<li>Make the code better: Assess performance and find bottlenecks</li>
<li>Make the machine better: Add more cores / machines</li>
</ul>
</section>
<section id="terminology" class="level1">
<h1>Terminology</h1>
<ul>
<li>Thread: An execution context</li>
<li>Process: The resources associated with a computation</li>
<li>Core: Independent CPU’s (often discussed as “number of cores”)</li>
<li>Socket: The interface between the CPU and the motherboard (for example with two sockets and 8 cores in each socket there are a total of 16 physical cores on the server)<br>
</li>
<li>CPU: Central Processing Unit</li>
</ul>
<p>Use <code>lscpu</code> or <code>cat /proc/cpuinfo</code> to get your CPU architecture details</p>
<p>Reference: <a href="https://www.golinuxcloud.com/processors-cpu-core-threads-explained/" class="uri">https://www.golinuxcloud.com/processors-cpu-core-threads-explained/</a></p>
</section>
<section id="improve-performance-by-profiling-your-code" class="level1">
<h1>Improve performance by profiling your code</h1>
<section id="profvis" class="level2">
<h2 class="anchored" data-anchor-id="profvis">profvis</h2>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(profvis)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#library(deSolve)</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simple example</span></span>
<span id="cb2-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">profvis</span>({</span>
<span id="cb2-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(diamonds, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggplot2"</span>)</span>
<span id="cb2-9">  </span>
<span id="cb2-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> carat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> diamonds)</span>
<span id="cb2-11">  m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> carat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> diamonds)</span>
<span id="cb2-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abline</span>(m, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb2-13">})</span></code></pre></div>
<p>More complex example:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">profvis</span>({</span>
<span id="cb3-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate a dataset</span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(diamonds, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggplot2"</span>)</span>
<span id="cb3-4">  </span>
<span id="cb3-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># save it </span></span>
<span id="cb3-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write.csv</span>(diamonds, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diamonds.csv"</span>)</span>
<span id="cb3-7">  </span>
<span id="cb3-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load it</span></span>
<span id="cb3-9">  csv_diamonds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diamonds.csv"</span>)</span>
<span id="cb3-10">  </span>
<span id="cb3-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># summarize</span></span>
<span id="cb3-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(diamonds)</span>
<span id="cb3-13">  </span>
<span id="cb3-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot it  </span></span>
<span id="cb3-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> carat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> csv_diamonds)</span>
<span id="cb3-16">  m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> carat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> csv_diamonds)</span>
<span id="cb3-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abline</span>(m, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb3-18">  </span>
<span id="cb3-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#create histogram of values for price</span></span>
<span id="cb3-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data=</span>csv_diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x=</span>price)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"steelblue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Histogram of Price Values"</span>)</span>
<span id="cb3-23">  </span>
<span id="cb3-24">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#create scatterplot of carat vs. price, using cut as color variable</span></span>
<span id="cb3-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data=</span>diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x=</span>carat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y=</span>price, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color=</span>cut)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb3-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span>
<span id="cb3-27">  </span>
<span id="cb3-28">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#create scatterplot of carat vs. price, using cut as color variable</span></span>
<span id="cb3-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data=</span>diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x=</span>carat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y=</span>price, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color=</span>cut)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb3-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span>
<span id="cb3-31">  </span>
<span id="cb3-32">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Examples from: https://www.statology.org/diamonds-dataset-r/#:~:text=The%20diamonds%20dataset%20is%20a,the%20diamonds%20dataset%20in%20R. </span></span>
<span id="cb3-33">})</span></code></pre></div>
<p>Shiny app example:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#profvis({runApp()})</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#profvis({runApp(appDir = "./test_profvis/")})</span></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">profvis</span>({<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runApp</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">appDir =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)})</span></code></pre></div>
</section>
<section id="other-packages" class="level2">
<h2 class="anchored" data-anchor-id="other-packages">Other packages</h2>
<ul>
<li>bench</li>
<li>microbenchmark</li>
</ul>
</section>
</section>
<section id="taking-advantage-of-compute-resources-with-parallelization-in-r" class="level1">
<h1>Taking advantage of compute resources with parallelization in R</h1>
<section id="taking-advantage-of-native-parallelization" class="level2">
<h2 class="anchored" data-anchor-id="taking-advantage-of-native-parallelization">Taking advantage of native parallelization</h2>
<p>Use packages like <a href="https://cran.r-project.org/web/packages/data.table/vignettes/datatable-intro.html">data.table</a> that implement parallelism natively</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getDTthreads</span>()</span>
<span id="cb5-4">DT <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(iris)</span>
<span id="cb5-5">DT[Petal.Width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(Petal.Length), by <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> Species]</span></code></pre></div>
</section>
<section id="explicitly-programming-parallelization" class="level2">
<h2 class="anchored" data-anchor-id="explicitly-programming-parallelization">Explicitly programming parallelization</h2>
<p>Read more: <a href="https://towardsdatascience.com/getting-started-with-parallel-programming-in-r-d5f801d43745" class="uri">https://towardsdatascience.com/getting-started-with-parallel-programming-in-r-d5f801d43745</a></p>
<section id="futureverse" class="level3">
<h3 class="anchored" data-anchor-id="futureverse">futureverse</h3>
<p>Read more: <a href="https://www.futureverse.org/" class="uri">https://www.futureverse.org/</a></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(future)</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plan</span>(multisession)</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Evaluate an R expression sequentially</span></span>
<span id="cb6-5">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slow_fcn</span>(X[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Evaluate it in parallel in the background</span></span>
<span id="cb6-8">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">future</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slow_fcn</span>(X[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span>
<span id="cb6-9">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">value</span>(f)</span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## future.apply: futurized version of base R apply</span></span>
<span id="cb6-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(future.apply)</span>
<span id="cb6-13">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(X, slow_fcn)</span>
<span id="cb6-14">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">future_lapply</span>(X, slow_fcn)</span>
<span id="cb6-15"></span>
<span id="cb6-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## furrr: futurized version of purrr</span></span>
<span id="cb6-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(furrr)</span>
<span id="cb6-18">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> X <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(slow_fcn)</span>
<span id="cb6-19">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> X <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">future_map</span>(slow_fcn)</span>
<span id="cb6-20"></span>
<span id="cb6-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## foreach: futurized version (modern)</span></span>
<span id="cb6-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(foreach)</span>
<span id="cb6-23">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> X) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%do%</span>       <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slow_fcn</span>(x)</span>
<span id="cb6-24">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> X) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%dofuture%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slow_fcn</span>(x)</span>
<span id="cb6-25"></span>
<span id="cb6-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## foreach: futurized version (traditional)</span></span>
<span id="cb6-27"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(foreach)</span>
<span id="cb6-28">doFuture<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">registerDoFuture</span>()</span>
<span id="cb6-29">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> X) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%do%</span>    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slow_fcn</span>(x)</span>
<span id="cb6-30">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> X) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%dopar%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slow_fcn</span>(x)</span></code></pre></div>
</section>
<section id="parallel" class="level3">
<h3 class="anchored" data-anchor-id="parallel">parallel</h3>
<p>Example from: <a href="https://towardsdatascience.com/getting-started-with-parallel-programming-in-r-d5f801d43745" class="uri">https://towardsdatascience.com/getting-started-with-parallel-programming-in-r-d5f801d43745</a></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(parallel)</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate data</span></span>
<span id="cb7-4">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e9</span></span>
<span id="cb7-5">data_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> data,</span>
<span id="cb7-6">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> data,</span>
<span id="cb7-7">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> data,</span>
<span id="cb7-8">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> data)</span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Single core</span></span>
<span id="cb7-11">time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()</span>
<span id="cb7-12"></span>
<span id="cb7-13">time_benchmark <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.time</span>(</span>
<span id="cb7-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(data_list, mean)</span>
<span id="cb7-15">)</span>
<span id="cb7-16">single_core_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">difftime</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>(), time)</span>
<span id="cb7-17"></span>
<span id="cb7-18"></span>
<span id="cb7-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Detect the number of available cores and create cluster</span></span>
<span id="cb7-20">time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()</span>
<span id="cb7-21"></span>
<span id="cb7-22">cores_avail<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">detectCores</span>()</span>
<span id="cb7-23"></span>
<span id="cb7-24">cl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> parallel<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">makeCluster</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">detectCores</span>())</span>
<span id="cb7-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run parallel computation</span></span>
<span id="cb7-26">time_parallel <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.time</span>(</span>
<span id="cb7-27">  parallel<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parLapply</span>(cl,</span>
<span id="cb7-28">                      data_list,</span>
<span id="cb7-29">                      mean)</span>
<span id="cb7-30">)</span>
<span id="cb7-31"></span>
<span id="cb7-32">multiple_core_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">difftime</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>(), time)</span>
<span id="cb7-33"></span>
<span id="cb7-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Close cluster</span></span>
<span id="cb7-35">parallel<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopCluster</span>(cl)</span>
<span id="cb7-36"></span>
<span id="cb7-37"></span>
<span id="cb7-38"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(single_core_time)</span>
<span id="cb7-39"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(multiple_core_time)</span>
<span id="cb7-40"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(cores_avail)</span></code></pre></div>
<p>Running sequentially took 18.33 seconds. Running in parallel shortened that to 4.99 seconds.</p>
</section>
<section id="parallely-part-of-futureverse" class="level3">
<h3 class="anchored" data-anchor-id="parallely-part-of-futureverse">parallely (part of futureverse)</h3>
<p>Read more: <a href="https://parallelly.futureverse.org/" class="uri">https://parallelly.futureverse.org/</a></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(parallelly)</span>
<span id="cb8-2">parallelly<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">availableCores</span>()</span></code></pre></div>
</section>
<section id="foreach-and-futureverse" class="level3">
<h3 class="anchored" data-anchor-id="foreach-and-futureverse">foreach and futureverse</h3>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(foreach)</span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(doFuture)</span>
<span id="cb9-3"></span>
<span id="cb9-4">years <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2024</span></span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plan</span>(multisession, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">workers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb9-7">results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i=</span>years, </span>
<span id="cb9-8">                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.combine =</span> rbind) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%dofuture%</span> {</span>
<span id="cb9-9">                     <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_api_stats</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yr=</span>i, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tmt=</span>tmt, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"litter"</span>)}</span></code></pre></div>
</section>
<section id="future.apply" class="level3">
<h3 class="anchored" data-anchor-id="future.apply">future.apply</h3>
<p>Before:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(okay2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(tab2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {...</span></code></pre></div>
<p>After:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(future.apply)</span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plan</span>(multisession)</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(okay2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">future_apply</span>(tab2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {...</span></code></pre></div>
</section>
<section id="purrr" class="level3">
<h3 class="anchored" data-anchor-id="purrr">purrr</h3>
<p>Before:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb12-2">sales_data_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nest</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(date, value)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(data, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(df) {</span>
<span id="cb12-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">month</span>(date) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(date) <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data=</span>df)</span>
<span id="cb12-6">  })) </span></code></pre></div>
<p>After:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb13-3">sales_data_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nest</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(date, value)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> furrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(data, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(df) {</span>
<span id="cb13-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">month</span>(date) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(date) <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data=</span>df)</span>
<span id="cb13-7">  })) </span></code></pre></div>
</section>
<section id="foreach-and-doparallel" class="level3">
<h3 class="anchored" data-anchor-id="foreach-and-doparallel">foreach and doParallel</h3>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(foreach)</span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(doParallel)</span>
<span id="cb14-3"></span>
<span id="cb14-4">cl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">makeCluster</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb14-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">registerDoParallel</span>(cl)</span>
<span id="cb14-6">results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i=</span>years, </span>
<span id="cb14-7">                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.combine =</span> rbind) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%dopar%</span> {</span>
<span id="cb14-8">                     <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_api_stats</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yr=</span>i, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tmt=</span>tmt, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"litter"</span>)}</span>
<span id="cb14-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopCluster</span>(cl)</span></code></pre></div>
</section>
<section id="clustermq" class="level3">
<h3 class="anchored" data-anchor-id="clustermq">clustermq</h3>
<p>Lifesaver, when working in a HPC environment.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(foreach)</span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(clustermq)</span>
<span id="cb15-3"></span>
<span id="cb15-4">n_cores <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> parallel<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">detectCores</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">clustermq.scheduler=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"multicore"</span>)</span>
<span id="cb15-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getOption</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clustermq.scheduler"</span>)</span>
<span id="cb15-7"></span>
<span id="cb15-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register_dopar_cmq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_jobs =</span> n_cores)</span>
<span id="cb15-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(n_cores)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%dopar%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(i)</span></code></pre></div>
<p>The future of clustermq: crew/mirai/nanonext</p>
</section>
</section>
<section id="but-what-about-python" class="level2">
<h2 class="anchored" data-anchor-id="but-what-about-python">But what about Python?</h2>
<ul>
<li><a href="https://docs.dask.org/en/stable/deploying-hpc.html">dask-jobqueue</a></li>
<li><a href="https://docs.ray.io/en/latest/cluster/vms/user-guides/community/slurm.html">ray</a></li>
</ul>
</section>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ul>
<li>https://colorado.posit.co/rsc/parallel_thinking/Parallel_Thinking.html#/title-slide</li>
<li>https://edavidaja.github.io/parallelooza/#/parallelooza</li>
<li>https://github.com/edavidaja/parallelooza</li>
<li>Shiny apps on Connect that feature long running jobs https://wlandau.github.io/crew/articles/shiny.html</li>
<li>workbench jobs and AWS batch: https://github.com/wlandau/crew.aws.batch</li>
</ul>
</section>
<section id="further-reading" class="level1">
<h1>Further reading</h1>
<ul>
<li>Clustermq example: <a href="https://michaelmayer.quarto.pub/clustermq/example.html">https://michaelmayer.quarto.pub/clustermq/example.html</a></li>
<li>Shiny app with HPC example: <a href="https://github.com/michaelmayer2/penguins-hpc" class="uri">https://github.com/michaelmayer2/penguins-hpc</a> and <a href="https://docs.google.com/presentation/d/1tDGm2Y8emaLXeyNWxScGWHVNWyyjkICsShz5xxc0kLg/edit#slide=id.g25ca9e5dea3_0_25" class="uri">https://docs.google.com/presentation/d/1tDGm2Y8emaLXeyNWxScGWHVNWyyjkICsShz5xxc0kLg/edit#slide=id.g25ca9e5dea3_0_25</a></li>
<li>Slurm GPU training by Michael:</li>
<li>Slides: <a href="https://docs.google.com/presentation/d/1ktldUhNRbMKpo9NOQCWgmJJjgNdCrpcnQ0BSQSP8d3k/edit">https://docs.google.com/presentation/d/1ktldUhNRbMKpo9NOQCWgmJJjgNdCrpcnQ0BSQSP8d3k/edit</a></li>
<li>Git repository: <a href="https://github.com/michaelmayer2/merck-slurm-gpu-training/">https://github.com/michaelmayer2/merck-slurm-gpu-training/</a></li>
<li>Go fastR: High Performance Computing with R Workshop: <a href="https://luwidmer.github.io/fastR-website/">https://luwidmer.github.io/fastR-website/</a></li>
<li>HPC Training: <a href="https://github.com/sol-eng/Workbench-HPC-Webinar" class="uri">https://github.com/sol-eng/Workbench-HPC-Webinar</a> and slides: <a href="https://docs.google.com/presentation/d/1gawEL2cVq7LoktfCjG55pTAYWhy0JYlskZMl5MaYD7I/edit#slide=id.p" class="uri">https://docs.google.com/presentation/d/1gawEL2cVq7LoktfCjG55pTAYWhy0JYlskZMl5MaYD7I/edit#slide=id.p</a></li>
</ul>


</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/parallelization.html</guid>
  <pubDate>Fri, 08 Dec 2023 07:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Problems with git credential persistence when in the cloud</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/git-and-sagemaker.html</link>
  <description><![CDATA[ 





<p>This is a random trick that took me longer than I care to admit to figure out - and wanted to squirrel it away so it’s easy to find in the future!</p>
<section id="problem-when-on-linux" class="level2">
<h2 class="anchored" data-anchor-id="problem-when-on-linux">Problem when on Linux:</h2>
<blockquote class="blockquote">
<p>In general gitcreds doesn’t work well on linux (which has led to this git issue <a href="https://github.com/r-lib/gitcreds/issues/47">(Ship our own credential helper on Linux · Issue #47 · r-lib/gitcreds</a> ). There is an excellent blog post that is very useful that goes deeper into what is going on: <a href="https://blog.djnavarro.net/posts/2021-08-08_git-credential-helpers/">Notes from a data witch - Managing GitHub credentials from R, difficulty level linux</a></p>
</blockquote>
</section>
<section id="problem-when-on-sagemaker" class="level2">
<h2 class="anchored" data-anchor-id="problem-when-on-sagemaker">Problem when on Sagemaker:</h2>
<blockquote class="blockquote">
<p>Additionally, on Sagemaker things like credentials will be by default stored to the ephemeral EC2 instance and lost when the session is closed. A different method needs to be pursued in order for the token to persist.</p>
</blockquote>
</section>
<section id="tldr-solution" class="level2">
<h2 class="anchored" data-anchor-id="tldr-solution">TLDR Solution:</h2>
<p>Configure the global git to cache instead of store the credentials to a local file (from bash/terminal):<br>
<code>git config --global credential.helper 'store --file ~/.my-credentials'</code></p>
</section>
<section id="testing" class="level2">
<h2 class="anchored" data-anchor-id="testing">Testing</h2>
<p>I’ll add a disclaimer that it is similar to the .Renviron approach where the credentials would be stored as plain text, however to a location chosen by the user.</p>
<p>Load libraries:</p>
<pre><code>library(usethis) 
library(gitcreds) 
library(gh) 
library(credentials)</code></pre>
<p>Configure the global git to cache instead of store the credentials to a local file (from bash/terminal):<br>
<code>git config --global credential.helper 'store --file ~/.my-credentials'</code></p>
<p>From the documentation:</p>
<blockquote class="blockquote">
<p>The “store” mode saves the credentials to a plain-text file on disk, and they never expire. This means that until you change your password for the Git host, you won’t ever have to type in your credentials again. The downside of this approach is that your passwords are stored in cleartext in a plain file in your home directory. The other options involve needing to change the root container to include alternative git credential helpers (libsecret or gcm core) which as far as I can tell are not currently available and would be something I’d recommend reaching out to Amazon about as they control that image.</p>
</blockquote>
<p>Generate the PAT:</p>
<p><code>usethis::create_github_token()</code></p>
<p>Copy the generated PAT to your clipboard. Provide the PAT to this function when asked for it:</p>
<p><code>gitcreds::gitcreds_set()</code></p>
<p>Check that it stored with:</p>
<p><code>gitcreds_get()</code></p>
</section>
<section id="alternatives" class="level2">
<h2 class="anchored" data-anchor-id="alternatives">Alternatives</h2>
<p>The old way “store a PAT as the <code>GITHUB_PAT</code> environment variable in <code>.Renviron.</code>” is typically what is recommended as being more compatible with linux if you are able to switch back to it, but it can present a security issue. We’ve also commonly seen folks using the <code>gh</code> package for generating PATs like in <a href="https://gh.r-lib.org/articles/managing-personal-access-tokens.html">Managing Personal Access Tokens</a></p>
<p>Alternatively, there are some git config options from the terminal. See: <a href="https://happygitwithr.com/https-pat.html?q=env#pat-doesnt-persist-on-linux">Chapter 9 Personal access token for HTTPS | Happy Git and GitHub for the useR</a></p>


</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/git-and-sagemaker.html</guid>
  <pubDate>Tue, 29 Aug 2023 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Securing credentials</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/securing-credentials.html</link>
  <description><![CDATA[ 





<section id="the-easiest-method-environment-variables" class="level1">
<h1>The Easiest Method: Environment Variables</h1>
<p>When working with pulling data from secure databases or other sources a developer might find themselves in a situation of needing to provide very sensitive information, such as a password or a token, in order to access the data that is needed or to successfully deploy a project. Handling those secrets in way that doesn’t expose them in the code directly is critical and where using <a href="https://db.rstudio.com/best-practices/deployment/">environmental variable’s for securing sensitive variables</a> is strongly recommended.</p>
<p>Additionally there may be parameters that are often needed that can be accessed as a variable more easily rather than having to type in every time.</p>
<p>For both of these cases knowing how environment variables can be leveraged can be very rewarding and it is surprising how little effort it can to take to set up.</p>
<section id="working-with-the-.renviron-file" class="level2">
<h2 class="anchored" data-anchor-id="working-with-the-.renviron-file">Working with the .Renviron file</h2>
<p>When R starts it loads a bunch of variables, settings, and configs for the user. This is really powerful and some of the magic for how it can work so apparently seamlessly.</p>
<p>However for power users we can leverage these behind the scenes config files so that we can include such things as variables in our project without including it in our code. The .Renviron file is the one most commonly interacted with for adding sensitive variables to a project in order to protect them from being exposed in the code.</p>
<p>With increased use of these behind the scenes config files and the growing direction of arranging code into projects there was the development of giving, on startup, having multiple options for each config file that can be loaded depending on what the user specifies. Broadly speaking there are two levels of config files:</p>
<ul>
<li>User</li>
<li>Project</li>
</ul>
<p>On startup, since R is trying to make things as seamless as possible for the user, it will use some logic to figure out which config to use. It will assume that if a project level config exists it should load that one (and not any others). If that project level config doesn’t exist, then it will default to the user level config. For more details on the different config files and the nuances see <a href="https://support.rstudio.com/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf">Managing R with .Rprofile, .Renviron, Rprofile.site, Renviron.site, rsession.conf, and repos.conf</a>.</p>
<p>Just to re-iterate the key takeaway: When in doubt note that the <strong>project level file is given preference over user level config files</strong>. Only if the project level config file doesn’t exist will the user level file be sourced/pulled in.</p>
<p>There is a really excellent <a href="https://rviews.rstudio.com/2017/04/19/r-for-enterprise-understanding-r-s-startup/">overview of R’s startup process here</a> but in short it can be thought of this way:</p>
<section id="example-with-a-user-level-.renviron-config-file" class="level4">
<h4 class="anchored" data-anchor-id="example-with-a-user-level-.renviron-config-file">Example with a user level .Renviron config file</h4>
<p>usethis has a function for creating and editing the .Renviron file</p>
<pre><code>library(usethis)
usethis::edit_r_environ()</code></pre>
<p>Add the variables to that file in the format <code>variable_name = "variable_value"</code> and save it. Restart the session so the new environment variables will be loaded with ctrl shift f10 or through the RStudio IDE</p>
<p>Saved variables can be accessed with:</p>
<pre><code>variable_name &lt;- Sys.getenv("variable_name")</code></pre>
<p>When working in a more complex environment structure where separate project, site, and user environments are being support <a href="https://support.rstudio.com/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf">this support article has useful information</a> with a <a href="https://rviews.rstudio.com/2017/04/19/r-for-enterprise-understanding-r-s-startup/">deeper dive into R’s startup here</a>.</p>
</section>
<section id="example-with-a-project-level-.renviron-config-file" class="level4">
<h4 class="anchored" data-anchor-id="example-with-a-project-level-.renviron-config-file">Example with a project level .Renviron config file</h4>
<p>Storing secrets securely can be done using the <a href="https://usethis.r-lib.org/reference/edit.html">edit_r_environ function from the usethis package</a>. For more overview see <a href="https://support.rstudio.com/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf">this overview</a>.</p>
<p>Example:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(usethis)</span>
<span id="cb3-2">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edit_r_environ</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scope =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"project"</span>)</span></code></pre></div>
<p>Accessing those stored parameters later can be done using <code>Sys.getenv("DB_NAME")</code>.</p>
<p>Be sure to add the project level .Renviron file to your .gitignore so you aren’t exposing secrets when code is being saved to your git repository. Similarly this can be done with the <code>edit_git_ignore(scope = c("user", "project"))</code> function. For more best practices see <a href="https://db.rstudio.com/best-practices/managing-credentials">securing credentials</a>.</p>
<ul>
<li>While typically explicitly listing the file name is the desired addition, wildcards can be added to exclude a type of file. For example: <code>*.html</code>.</li>
</ul>
<p>After updating these files the project should be closed and re-opened for any additions to be pulled in. One way to do this is through session -&gt; restart R (ctrl-shift-f10).</p>
</section>
<section id="example-with-project-level-github-secrets-for-environment-variables" class="level4">
<h4 class="anchored" data-anchor-id="example-with-project-level-github-secrets-for-environment-variables">Example with project level github secrets for environment variables</h4>
<p>Another approach, particularly useful when automating testing and deployments using github actions, is to include the environment variables as secrets. Once this has been added through the git UI for the project they can then be referenced in the relevant deployment .yaml file with something like <code>CONNECT_ENV_SET_ZD_USER: ${{ secrets.ZD_USER }}</code>. In the R scripts they will be referenced as usual with something like <code>Sys.getenv("DB_NAME")</code>.</p>
</section>
<section id="references-for-adding-environment-variables-through-the-connect-ui" class="level4">
<h4 class="anchored" data-anchor-id="references-for-adding-environment-variables-through-the-connect-ui">References for adding environment variables through the Connect UI</h4>
<p>Starting with version 1.6, RStudio Connect allows <a href="https://docs.rstudio.com/connect/admin/security-and-auditing/#application-environment-variables">Environment Variables</a>. The variables are encrypted on-disk, and in-memory.</p>
<p>This can be done at the project level with <a href="https://db.rstudio.com/best-practices/deployment/">securing deployment</a> through the <a href="https://support.rstudio.com/hc/en-us/articles/228272368-Managing-your-content-in-RStudio-Connect">Connect UI</a>.</p>
<p>Use Connect to manage environment variables through the UI: <a href="https://docs.posit.co/connect/user/content-settings/index.html#content-vars" class="uri">https://docs.posit.co/connect/user/content-settings/index.html#content-vars</a></p>
<p>Have your admin use a supervisor script to add Environment Variables automatically: <a href="https://docs.posit.co/connect/admin/process-management/index.html#example-environment-variables" class="uri">https://docs.posit.co/connect/admin/process-management/index.html#example-environment-variables</a></p>
<p>Securing credentials solutions article: <a href="https://solutions.posit.co/connections/db/best-practices/managing-credentials/" class="uri">https://solutions.posit.co/connections/db/best-practices/managing-credentials/</a></p>


</section>
</section>
</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/securing-credentials.html</guid>
  <pubDate>Wed, 09 Aug 2023 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Microsoft 365 / Sharepoint and R</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/sharepoint-oh-no.html</link>
  <description><![CDATA[ 





<section id="ms365_exploration" class="level1">
<h1>ms365_exploration</h1>
<blockquote class="blockquote">
<p>:warning: This is now outdated. Please refer to <a href="https://solutions.rstudio.com/r/data/microsoft365/">this article</a> and the <a href="https://github.com/Azure/Microsoft365R">Microsoft365R package documentation</a> developed by <a href="https://github.com/hongooi73">Hong Ooi</a> instead for up-to-date information.</p>
</blockquote>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Microsoft 365 is a subscription extension of the Microsoft Office product line with cloud hosting support. Microsoft 365 uses Azure Active Directory (Azure AD) for user authentication and application access through developed APIs. The Microsoft supported method for interfacing with R developed content is with the <a href="https://github.com/Azure/Microsoft365R">Microsoft365R</a> package which was developed by Hong Ooi and has extensive documentation. It supports access to Teams, SharePoint Online, Outlook, and OneDrive.</p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<blockquote class="blockquote">
<p>:warning: Discussion between the developers and the Global Azure Administration team about the content and security requirements within your organization should determine which of the approaches should be supported.</p>
</blockquote>
<p>There are four main authentication approaches supported by <a href="https://github.com/Azure/Microsoft365R">Microsoft365R</a>. Note that multiple approaches can be supported at the same time.</p>
<table class="table">
<colgroup>
<col style="width: 35%">
<col style="width: 20%">
<col style="width: 14%">
<col style="width: 30%">
</colgroup>
<thead>
<tr class="header">
<th><strong>Method</strong></th>
<th><strong>auth_type</strong></th>
<th><strong>Permissions</strong></th>
<th><strong>Capability</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>User sign-in flow: Default</strong></td>
<td>default</td>
<td>User</td>
<td>Interactive only (local IDE and Workbench, interactive Shiny content)</td>
</tr>
<tr class="even">
<td><strong>User sign-in flow: Device Code</strong></td>
<td>device_code</td>
<td>User</td>
<td>Interactive only (local IDE and Workbench)</td>
</tr>
<tr class="odd">
<td><strong>Service principal / Client secret</strong></td>
<td>client_credentials</td>
<td>Application</td>
<td>Interactive and non-interactive (same as above plus scheduled content)</td>
</tr>
<tr class="even">
<td><strong>Embedded credentials</strong></td>
<td>resource_owner</td>
<td>User</td>
<td>Interactive and non-interactive (same as above plus scheduled content)</td>
</tr>
</tbody>
</table>
<p>Authentication for <a href="https://github.com/Azure/Microsoft365R">Microsoft365R</a> is through Microsoft’s Azure cloud platform through a registered <a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/app-objects-and-service-principals">application</a> with <a href="https://github.com/Azure/Microsoft365R/blob/master/inst/app_registration.md">appropriate assigned permissions</a> in order to obtain <a href="https://github.com/Azure/AzureAuth">‘OAuth 2.0’ tokens</a>.</p>
<section id="administration-overview" class="level3">
<h3 class="anchored" data-anchor-id="administration-overview">Administration Overview</h3>
<p>Depending on your organization’s security policy some steps may require support from your Azure Global Administrator.</p>
<p><strong>User Sign-in Flow: Default</strong></p>
<p>A custom app can be created or the default app registration “d44a05d5-c6a5-4bbb-82d2-443123722380” that comes with the <a href="https://github.com/Azure/Microsoft365R">Microsoft365R</a> package can be used. The user permissions will need to be enabled as detailed in <a href="https://github.com/Azure/Microsoft365R/blob/master/inst/app_registration.md">the app registrations page</a>. Depending on your organization’s security policy, access to your tenant may need to be granted by an Azure Global Administrator. Additionally Redirect URLs will need to be added through Azure under <code>App Registrations</code> -&gt; <code>select your app</code> -&gt; <code>Authentication</code> -&gt; <code>Platform configurations</code> -&gt; <code>Mobile and desktop applications</code> -&gt;<code>Add URI</code> as well as also enabling <code>nativeclient</code>.</p>
<p>For adding Redirect URLs, which will give a typical web-app authentication experience for interactive applications:</p>
<ul>
<li>For the desktop RStudio IDE the URL is: <code>http://localhost:1410/</code>.</li>
<li>For content hosted in shinyapps.io this would be of the form <code>https://youraccount.shinyapps.io/appname</code> (including the port number if specified).</li>
<li>A SSL certificate will be required for non-local connections. This means that the Connect and Workbench URLs will need to be HTTPS. A wildcard could be used instead of adding the Redirect URL for each piece of content/user where appropriate for server-wide access.</li>
</ul>
<p><strong>User Sign-in Flow: Device Code</strong></p>
<p>In addition to user level app permissions outlined above the device code workflow option will need to be enabled.</p>
<p>Enabling the device code workflow is through the App Registration dashboard in Azure -&gt; <code>click on the created app</code> -&gt; <code>Authentication</code> -&gt; <code>Allow public client flows</code> and setting <code>Enable the following mobile and desktop flows</code> to <code>yes</code>. The device code workflow does not need Redirect URLs, instead providing a code and a link for the developer to access in a separate browser window (or even on a separate device) for sign-in.</p>
<p><strong>Service Principal / Client Secret</strong></p>
<p>A custom app will need to be registered in Azure with Application permissions. The permissions can be based off of the <a href="https://github.com/Azure/Microsoft365R/blob/master/inst/app_registration.md">user permissions</a> but can be assigned as needed for the application and to comply with any security restrictions.</p>
<p>Application permissions are more powerful than user permissions so it is important to emphasize that exposing the client secret directly should be avoided. As a control using environmental variable’s for storing the client secret is recommended. Starting with version 1.6, RStudio Connect allows <a href="https://docs.rstudio.com/connect/admin/security-and-auditing/#application-environment-variables">Environment Variables</a>. The variables are encrypted on-disk, and in-memory.</p>
<ul>
<li>This can be done at the project level with <a href="https://db.rstudio.com/best-practices/deployment/">securing deployment</a> through the <a href="https://support.rstudio.com/hc/en-us/articles/228272368-Managing-your-content-in-RStudio-Connect">Connect UI</a>.</li>
</ul>
<p><strong>Embedded Credentials</strong></p>
<p>A custom app will need to be registered in Azure with User permissions as specified in <a href="https://github.com/Azure/Microsoft365R/blob/master/inst/app_registration.md">the app registrations page</a>. Depending on your organization’s security policy, access to your tenant may need to be granted by an Azure Global Administrator.</p>
<p>The credentials being embedded can be a user or a service account, as long as access to the desired content inside Microsoft 365 has been granted. Creating service accounts per content is recommended to enable faster troubleshooting and easier collaboration. As a control the Username / Password should never be exposed directly in the code, instead using <a href="https://docs.rstudio.com/connect/admin/security-and-auditing/#application-environment-variables">Environment Variables</a>. The variables are encrypted on-disk, and in-memory.</p>
<ul>
<li>This can be done at the project level with <a href="https://db.rstudio.com/best-practices/deployment/">securing deployment</a> through the <a href="https://support.rstudio.com/hc/en-us/articles/228272368-Managing-your-content-in-RStudio-Connect">Connect UI</a>.</li>
</ul>
</section>
</section>
<section id="authentication-examples" class="level2">
<h2 class="anchored" data-anchor-id="authentication-examples">Authentication Examples</h2>
<section id="user-sign-in-flow-default" class="level3">
<h3 class="anchored" data-anchor-id="user-sign-in-flow-default">User Sign-in Flow: Default</h3>
<p>The user sign-in flow option provides the typical web browser authentication experience. A user will need to be available to interact with the authentication pop-up in order to which makes this an option for interactive applications (such as the local RStudio IDE, Workbench, or an interactive Shiny app), but not applicable for scheduled content. The details are discussed in <a href="https://cran.r-project.org/web/packages/Microsoft365R/vignettes/auth.html">the auth vignette</a>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(Microsoft365R)</span>
<span id="cb1-2"></span>
<span id="cb1-3">site_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> MySharepointSiteURL</span>
<span id="cb1-4">app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> MyApp</span>
<span id="cb1-5"></span>
<span id="cb1-6">site <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_sharepoint_site</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">site_url =</span> site_url, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app =</span> app)</span></code></pre></div>
</section>
<section id="user-sign-in-flow-device-code" class="level3">
<h3 class="anchored" data-anchor-id="user-sign-in-flow-device-code">User Sign-in Flow: Device Code</h3>
<p>In some interactive cases it may be easier to use the device code flow where the user is prompted with a code and a link which is opened in a separate screen for logging in. For example for using a Workbench instance that was deployed without an SSL certificate. This does require interaction from the user and as such will not be applicable for scheduled content nor hosted content. The details are discussed in <a href="https://cran.r-project.org/web/packages/Microsoft365R/vignettes/auth.html">the auth vignette</a>.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(Microsoft365R)</span>
<span id="cb2-2"></span>
<span id="cb2-3">site_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> MySharepointSiteURL</span>
<span id="cb2-4">app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> MyApp</span>
<span id="cb2-5"></span>
<span id="cb2-6">site <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_sharepoint_site</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">site_url =</span> site_url, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app=</span>app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">auth_type=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"device_code"</span>)</span></code></pre></div>
</section>
<section id="service-principal-client-secret" class="level3">
<h3 class="anchored" data-anchor-id="service-principal-client-secret">Service Principal / Client Secret</h3>
<p>Content in a non-interactive context (such as scheduled reports) won’t have a user account available for interactive authentication. There are several approaches outlined in <a href="https://cran.r-project.org/web/packages/Microsoft365R/vignettes/scripted.html">the vignette</a>, with the Service Principal via using a Client Secret discussed in this section being the Microsoft recommended approach.</p>
<ul>
<li>Application permissions are more powerful than user permissions so it is important to emphasize that exposing the client secret directly should be avoided. Instead the recommended approach is to store it as an <a href="https://docs.rstudio.com/connect/admin/security-and-auditing/#application-environment-variables">Environment Variable</a> which can be done through the <a href="https://support.rstudio.com/hc/en-us/articles/228272368-Managing-your-content-in-RStudio-Connect">Connect UI</a>.</li>
<li>Use of the Microsoft developed package <a href="https://github.com/Azure/AzureAuth">AzureAuth</a> may be needed for fully removing console prompt elements so a script can be run in a non-interactive context, for example by explicitly defining the token directory with <code>AzureAuth::create_AzureR_dir()</code>.</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(AzureAuth)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(AzureGraph)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(Microsoft365R)</span>
<span id="cb3-4"></span>
<span id="cb3-5">tenant <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> MyTenant</span>
<span id="cb3-6">site_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> MySharepointSiteURL</span>
<span id="cb3-7">app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> MyApp</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add sensitive variables as environmental variables so they aren't exposed</span></span>
<span id="cb3-10">client_secret <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EXAMPLE_SHINY_CLIENT_SECRET"</span>)</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create auth token cache directory</span></span>
<span id="cb3-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_AzureR_dir</span>()</span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a Microsoft Graph login</span></span>
<span id="cb3-16">gr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_graph_login</span>(tenant, app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">password=</span>client_secret, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">auth_type=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"client_credentials"</span>)</span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># An example of using the Graph login to connect to a Sharepoint site</span></span>
<span id="cb3-19">site <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> gr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_sharepoint_site</span>(site_url)</span></code></pre></div>
</section>
<section id="embedded-credentials" class="level3">
<h3 class="anchored" data-anchor-id="embedded-credentials">Embedded Credentials</h3>
<p>Content in a non-interactive context (such as scheduled reports) won’t have a user account available for interactive authentication. There are several approaches outlined in <a href="https://cran.r-project.org/web/packages/Microsoft365R/vignettes/scripted.html">the vignette</a>. In cases where the additional access that comes with Application level permissions isn’t appropriate for the organization’s security requirements the embedded credentials approach can be used.</p>
<ul>
<li>The credentials embedded will need to be granted access to the desired content and can either be a user or a service account. Working with your Azure Global Administrator to create service accounts per content is recommended to enable fast troubleshooting and easier collaboration.</li>
<li>Sensitive variables such username / password should be embedded as <a href="https://docs.rstudio.com/connect/admin/security-and-auditing/#application-environment-variables">Environment Variables</a> so that they aren’t exposed in the code directly.which can be done through the <a href="https://support.rstudio.com/hc/en-us/articles/228272368-Managing-your-content-in-RStudio-Connect">Connect UI</a>. See the example <a href="https://db.rstudio.com/best-practices/deployment/#credentials-inside-environment-variables-in-rstudio-connect">here</a>.</li>
<li>Use of the Microsoft developed package <a href="https://github.com/Azure/AzureAuth">AzureAuth</a> may be needed for fully removing console prompt elements so a script can be run in a non-interactive context, for example by explicitly defining the token directory with <code>AzureAuth::create_AzureR_dir()</code>.</li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(AzureAuth)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(AzureGraph)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(Microsoft365R)</span>
<span id="cb4-4"></span>
<span id="cb4-5">tenant <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> MyTenant</span>
<span id="cb4-6">site_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> MySharepointSiteURL</span>
<span id="cb4-7">app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> MyApp</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add sensitive variables as environmental variables so they aren't exposed</span></span>
<span id="cb4-10">user <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EXAMPLE_MS365R_SERVICE_USER"</span>)</span>
<span id="cb4-11">pwd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EXAMPLE_MS365R_SERVICE_PASSWORD"</span>)</span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create auth token cache directory, otherwise it will prompt the user on the console for input</span></span>
<span id="cb4-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_AzureR_dir</span>()</span>
<span id="cb4-15"></span>
<span id="cb4-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a Microsoft Graph login</span></span>
<span id="cb4-17">gr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_graph_login</span>(tenant, app, </span>
<span id="cb4-18">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">username =</span> user, </span>
<span id="cb4-19">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">password =</span> pwd,</span>
<span id="cb4-20">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">auth_type=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"resource_owner"</span>)</span>
<span id="cb4-21"></span>
<span id="cb4-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># An example of using the Graph login to connect to a Sharepoint site</span></span>
<span id="cb4-23">site <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> gr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_sharepoint_site</span>(site_url)</span></code></pre></div>
</section>
<section id="troubleshooting-authentication-failures" class="level3">
<h3 class="anchored" data-anchor-id="troubleshooting-authentication-failures">Troubleshooting Authentication Failures</h3>
<p>In the case of authentication failures clearing cached authentication tokens/files can be done with:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(AzureAuth)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(AzureGraph)</span>
<span id="cb5-3"></span>
<span id="cb5-4">tenant <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> MyTenant</span>
<span id="cb5-5"></span>
<span id="cb5-6">AzureAuth<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_token_directory</span>()</span>
<span id="cb5-7">AzureGraph<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">delete_graph_login</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tenant=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mytenant"</span>)</span></code></pre></div>
</section>
</section>
<section id="sharepoint-examples" class="level2">
<h2 class="anchored" data-anchor-id="sharepoint-examples">SharePoint Examples</h2>
<section id="microsoft365r" class="level3">
<h3 class="anchored" data-anchor-id="microsoft365r">Microsoft365R</h3>
<p>The authentication method used in this example could be swapped out for any of the examples shown above. The documentation on <a href="https://github.com/Azure/Microsoft365R">Microsoft365R</a> contains extensive examples beyond what is included below.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(Microsoft365R)</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(AzureGraph)</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(AzureAuth)</span>
<span id="cb6-4"></span>
<span id="cb6-5">site_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> MySharepointSiteURL</span>
<span id="cb6-6">tenant <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> MyTenant</span>
<span id="cb6-7">app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> MyApp</span>
<span id="cb6-8">drive_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> MyDrive <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For example by default this will likely be "Documents"</span></span>
<span id="cb6-9">file_src <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> MyFileName.TheExtension</span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add sensitive variables as environment variables so they aren't exposed</span></span>
<span id="cb6-12">client_secret <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EXAMPLE_SHINY_CLIENT_SECRET"</span>)</span>
<span id="cb6-13"></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create auth token cache directory, otherwise it will prompt the the console for input</span></span>
<span id="cb6-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_AzureR_dir</span>()</span>
<span id="cb6-16"></span>
<span id="cb6-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a Microsoft Graph login</span></span>
<span id="cb6-18">gr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_graph_login</span>(tenant, app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">password=</span>client_secret, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">auth_type=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"client_credentials"</span>)</span>
<span id="cb6-19"></span>
<span id="cb6-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># An example of using the Graph login to connect to a SharePoint site</span></span>
<span id="cb6-21">site <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> gr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_sharepoint_site</span>(site_url)</span>
<span id="cb6-22"></span>
<span id="cb6-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># An example using the SharePoint site to get to a specific drive</span></span>
<span id="cb6-24">drv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> site<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_drive</span>(drive_name)</span>
<span id="cb6-25"></span>
<span id="cb6-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download a specific file</span></span>
<span id="cb6-27">drv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">download_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">src =</span> file_src, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dest =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tmp.csv"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">overwrite =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb6-28"></span>
<span id="cb6-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve lists of the different types of items in our sharepoint site. Documents uploaded under the 'Documents' drive are retrieved with list_files(). </span></span>
<span id="cb6-30">drv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_items</span>()</span>
<span id="cb6-31">drv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_files</span>() </span>
<span id="cb6-32">drv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_shared_files</span>()</span>
<span id="cb6-33">drv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_shared_items</span>()</span>
<span id="cb6-34"></span>
<span id="cb6-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Files can also be uploaded back to SharePoint</span></span>
<span id="cb6-36">drv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">upload_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">src =</span> file_dest, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dest =</span> file_dest)</span></code></pre></div>
</section>
<section id="pins" class="level3">
<h3 class="anchored" data-anchor-id="pins">Pins</h3>
<p>Microsoft resources can be used for hosting data in pins format using <a href="https://pins.rstudio.com/reference/board_ms365.html">board_ms365() from pins</a>. The authentication method used in this example could be swapped out for any of the examples shown above.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(Microsoft365R)</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(pins)</span>
<span id="cb7-3"></span>
<span id="cb7-4">site_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> MySite</span>
<span id="cb7-5">app<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>MyApp</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a Microsoft Graph login</span></span>
<span id="cb7-8">site <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_sharepoint_site</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">site_url =</span> site_url, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">app=</span>app, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">auth_type=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"device_code"</span>)</span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># An example getting the default drive </span></span>
<span id="cb7-11">doclib <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> site<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_drive</span>()</span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect ms365 as a pinned board. If this folder doesn't already exist it will be created on execution. </span></span>
<span id="cb7-14">board <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">board_ms365</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">drive =</span> doclib, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"general/project1/board"</span>)</span>
<span id="cb7-15"></span>
<span id="cb7-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Write a dataset as a pin to Sharepoint</span></span>
<span id="cb7-17">board <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_write</span>(iris, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iris"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">description =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is a test"</span>)</span>
<span id="cb7-18"></span>
<span id="cb7-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the metadata of the pin we just created </span></span>
<span id="cb7-20">board <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_meta</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iris"</span>)</span>
<span id="cb7-21"></span>
<span id="cb7-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the pin</span></span>
<span id="cb7-23">test <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> board <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_read</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iris"</span>)</span></code></pre></div>
</section>
</section>
<section id="other-microsoft-related-resources" class="level2">
<h2 class="anchored" data-anchor-id="other-microsoft-related-resources">Other Microsoft Related Resources</h2>
<p>There are a few cases not covered in this article where the below resources may be useful:</p>
<ul>
<li><p>For user level authentication into servers refer to the <a href="https://azuremarketplace.microsoft.com/en-us/marketplace/apps/aad.rstudioconnect?tab=Overview">Marketplace offering</a> and the <a href="https://docs.rstudio.com/connect/admin/authentication/saml-based/okta-saml/#idp-config">Connect documentation</a>.</p></li>
<li><p>For Python users the <a href="https://github.com/vgrem/Office365-REST-Python-Client">Microsoft REST API</a> is the Microsoft developed method with <a href="https://github.com/vgrem/Office365-REST-Python-Client/tree/master/examples/sharepoint/files">examples</a>.</p></li>
<li><p>As a last resort, mapping SharePoint, OneNote, or other systems as a network drive to the hosting server could be considered, using a program such as <a href="https://www.expandrive.com/onedrive-for-linux/">expandrive</a>.</p></li>
</ul>
</section>
<section id="end" class="level2">
<h2 class="anchored" data-anchor-id="end">End</h2>
<p>On the off chance that anyone makes it to the end this article got a chuckle out of me and may be relatable: <a href="https://www.theregister.com/2022/07/15/on_call/" class="uri">https://www.theregister.com/2022/07/15/on_call/</a></p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/sharepoint-oh-no.html</guid>
  <pubDate>Fri, 14 Jul 2023 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
</channel>
</rss>
