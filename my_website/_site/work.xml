<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Lisa Anders - questionable.quarto</title>
<link>https://questionable.quarto.pub/blog/work.html</link>
<atom:link href="https://questionable.quarto.pub/blog/work.xml" rel="self" type="application/rss+xml"/>
<description>Making the most out of data</description>
<generator>quarto-1.8.23</generator>
<lastBuildDate>Mon, 29 Sep 2025 06:00:00 GMT</lastBuildDate>
<item>
  <title>Setting the package repository on Posit Workbench and Connect for R and Python</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/r-python-repository-settings-workbench-connect.html</link>
  <description><![CDATA[ 






<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>Setting the repository for R and Python package installations is a critical part of having a secure system. Malicious package attacks are a <a href="https://thehackernews.com/2025/04/malicious-python-packages-on-pypi.html">big issue</a>, and domain squatting attacks are a new-ish vector for these to get in the door.</p>
<p>Having a controlled repository with <a href="https://docs.posit.co/rspm/admin/security/package.html#vulnerability-blocking">vulnerable package blocking</a> is critical. But it’s only useful if users are actually using the repository. When using something like Package Manager you’ll want users to install packages from there, rather than the broader internet.</p>
</section>
<section id="at-a-glance" class="level2">
<h2 class="anchored" data-anchor-id="at-a-glance">At a glance</h2>
<section id="r-repository" class="level3">
<h3 class="anchored" data-anchor-id="r-repository">R repository</h3>
<p>The best pattern is to configure the repository across R sessions using R config options, not RStudio configs. A shared site library can be created (leveraging <code>Rprofile.site</code> and <code>Renviron.site</code> for example) or using <code>renv</code> with a shared <code>renv</code> package cache (maintaining reproduceability through the <code>renv.lock</code> file).</p>
<p>The <code>Renviron.site</code> would override the <code>Rprofile.site</code> setting and therefore may be more robust.</p>
<section id="option-1-renviron.site" class="level4">
<h4 class="anchored" data-anchor-id="option-1-renviron.site">Option 1: Renviron.site</h4>
<p>Referencing: <a href="https://github.com/sol-eng/singularity-rstudio/blob/main/data/workbench/scripts/run.R" class="uri">https://github.com/sol-eng/singularity-rstudio/blob/main/data/workbench/scripts/run.R</a></p>
<p>Create a <code>Renviron.site</code> file and define:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/opt/R/Some-R-Version/lib/R/etc/Renviron.site</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" data-filename="/opt/R/Some-R-Version/lib/R/etc/Renviron.site" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">RENV_PATHS_PREFIX_AUTO</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TRUE</span>
<span id="cb1-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">RENV_PATHS_CACHE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/scratch/renv</span>
<span id="cb1-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">R_LIBS_SITE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>R_LIBS_SITE=<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${R_LIBS_SITE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/usr/local/lib/R/site-library:/usr/local/lib/R/library:/usr/lib64/R/library:/usr/share/R/library'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
</div>
</section>
<section id="option-2-.rprofile.site" class="level4">
<h4 class="anchored" data-anchor-id="option-2-.rprofile.site">Option 2: .Rprofile.site</h4>
<p>Set <code>.libPaths()</code> in <code>.Rprofile.site</code>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/opt/R/Some-R-Version/lib/R/etc/Rprofile.site</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" data-filename="/opt/R/Some-R-Version/lib/R/etc/Rprofile.site" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">options</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">repos</span> = c<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CRAN</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://packagemanager.posit.co/all/latest"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">))</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interactive()</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb2-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">options</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">width</span> = 120<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.info()</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sysname"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]]</span> == <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Windows"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb2-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Sys.setenv</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RENV_DOWNLOAD_METHOD</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"curl"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb2-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"folder"</span> %in% tolower<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">list.files</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:/"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)))</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb2-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">!</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rlib"</span> %in% list.files<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:/username/"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">))</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb2-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">print</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Creating Rlib folder"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb2-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">dir.create</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:/username/Rlib"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">,mode</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0777"</span>,recursive = T<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb2-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="cb2-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"\033[0;32;1mSetting local user lib\033[0m\n"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb2-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.libPaths</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">c</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:/username/Rlib"</span> , .libPaths<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb2-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb2-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"\033[0;33;1mYou should consider getting the access right so we can put your local R-lib there, instead of OneDrive.\033[0m\n"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb2-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span></code></pre></div></div>
</div>
</section>
<section id="test" class="level4">
<h4 class="anchored" data-anchor-id="test">Test</h4>
<p>Test this by running and checking the outputs of:</p>
<ul>
<li><code>.libPaths()</code></li>
<li><code>options()$repos</code></li>
</ul>
</section>
</section>
<section id="python-repository" class="level3">
<h3 class="anchored" data-anchor-id="python-repository">Python repository</h3>
<p>Add the following lines to <code>/etc/pip.conf</code>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/pip.conf</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" data-filename="/etc/pip.conf" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[global]</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">timeout</span> = 60</span>
<span id="cb3-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">index-url</span> = https://pkg.demo.posit.team/blocked-python/latest/simple</span>
<span id="cb3-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">trusted-host</span> = pkg.demo.posit.team</span></code></pre></div></div>
</div>
</section>
</section>
<section id="longer-explanation-and-considerations" class="level2">
<h2 class="anchored" data-anchor-id="longer-explanation-and-considerations">Longer explanation and considerations</h2>
<section id="blocking-access-to-cran-andor-pypi" class="level3">
<h3 class="anchored" data-anchor-id="blocking-access-to-cran-andor-pypi">Blocking access to cran and/or pypi</h3>
<p>While not needed in all cases, an admin may want to block direct access to cran or pypi in order to force all package installs to go through the secured repository. This typically only makes sense at the corporate level.</p>
<p>Firewall rules, DNS filtering, and/or web proxy servers can be set to restrict which sites are accessible by users within the network and from specific devices. Configs can also be installed into users machines to access a specific repository URL, for example on windows to use group policies to push environment elements for members of the AD domain.</p>
<p>Regardless of method chosen, having a clear definition of acceptable use that emphasizes why these steps were taken can a long way to getting users onboard.</p>
</section>
<section id="r-repository-1" class="level3">
<h3 class="anchored" data-anchor-id="r-repository-1">R Repository</h3>
<section id="startup-behavior-of-r-when-loading-package-environment-details" class="level4">
<h4 class="anchored" data-anchor-id="startup-behavior-of-r-when-loading-package-environment-details">Startup behavior of R when loading package environment details</h4>
<p>R Startup behavior (funny): <a href="https://rstats.wtf/r-startup.html" class="uri">https://rstats.wtf/r-startup.html</a></p>
<blockquote class="blockquote">
<p>Credit: This section was largely taken from an internal Posit resource of unknown authorship</p>
</blockquote>
<p>From bash it is different than from the editor.</p>
<p>See <a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/Startup.html" title="https://stat.ethz.ch/R-manual/R-devel/library/base/html/Startup.html">here</a> for the official startup docs from R.</p>
<p>R from the command line/bash will take the user’s environment. It will not read any additional bash files during start-up (which the RStudio products will do). It will still read in the R startup files (Renviron/Rprofile).</p>
<p>Prior to loading the R session from the bash shell any commands in this file will be read and execute commands if it exists: <code>/etc/profile</code></p>
<p>Next, the the first of the following files that exists and is readable will have commands executed from (only one of these files will be read and executed):</p>
<ul>
<li><p><code>~/.bash_profile</code></p></li>
<li><p><code>~/.bash_login</code></p></li>
<li><p><code>~/.profile</code></p></li>
</ul>
<p>R then always loads the following (in order):</p>
<ul>
<li><p><code>R_HOME/etc/Renviron.site</code> (set for all users)</p></li>
<li><p><code>.Renviron</code> - user-specific, typically in the user’s home directory, but can be elsewhere (for instance, in a Project folder)</p></li>
<li><p><code>R_HOME/etc/Rprofile.site</code> (set for all users)</p></li>
<li><p><code>.Rprofile</code> - user-specific, typically in the user’s home directory, but can be elsewhere (for instance, in a Project folder)</p></li>
</ul>
<p>Beyond this, what gets put in the environment depends on the product.</p>
<ul>
<li><p>RStudio Server / Workbench: before any of this executes, RStudio Server will first include the contents of /etc/rstudio/rsession-profile if it exists. It will also add anything set in rsession-ld-library-path in rserver.conf to the LD_LIBRARY_PATH environment variable.</p></li>
<li><p>Shiny Server / Connect: you can affect the environment variables for a specific application using program supervisors</p></li>
</ul>
<p>This page in the documentation is the new home for the golden source of info for startup behavior: <a href="https://docs.posit.co/ide/user/ide/guide/environments/r/managing-r.html" class="uri">https://docs.posit.co/ide/user/ide/guide/environments/r/managing-r.html</a></p>
</section>
<section id="r-sessions-across-all-workbench-ides" class="level4">
<h4 class="anchored" data-anchor-id="r-sessions-across-all-workbench-ides">R sessions across all Workbench IDE’s</h4>
<p>Relying on <code>repos.conf</code> for R repository configuration IMHO is a clear anti-pattern which especially large customers with large setups should not use. <code>repos.conf</code> is a relic from a time where there was only RSP.</p>
<p>Configure the repository settings in R directly, rather than through the RStudio settings.</p>
<p>Resources:</p>
<ul>
<li><p>A great resource for setting this up simply is: <a href="https://docs.posit.co/ide/user/ide/guide/environments/r/managing-r.html" class="uri">https://docs.posit.co/ide/user/ide/guide/environments/r/managing-r.html</a></p></li>
<li><p>For a more complex example that could be used in slurm environments refer to: <a href="https://github.com/sol-eng/singularity-rstudio/blob/main/data/workbench/scripts/run.R" class="uri">https://github.com/sol-eng/singularity-rstudio/blob/main/data/workbench/scripts/run.R</a></p></li>
</ul>
<p>The <code>Renviron.site</code> would override the <code>Rprofile.site</code> setting and therefore may be more robust.</p>
<section id="renviron.site" class="level5">
<h5 class="anchored" data-anchor-id="renviron.site">Renviron.site</h5>
<p>Create a <code>Renviron.site</code> file and define:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/opt/R/Some-R-Version/lib/R/etc/Renviron.site</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" data-filename="/opt/R/Some-R-Version/lib/R/etc/Renviron.site" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Key1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>value1</span>
<span id="cb4-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">RENV_PATHS_PREFIX_AUTO</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TRUE</span>
<span id="cb4-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">RENV_PATHS_CACHE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/scratch/renv</span>
<span id="cb4-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">R_LIBS_SITE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>R_LIBS_SITE=<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${R_LIBS_SITE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/usr/local/lib/R/site-library:/usr/local/lib/R/library:/usr/lib64/R/library:/usr/share/R/library'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
</div>
<p>And then <code>Sys.getenv("Key1")</code> will return <code>"value1"</code> in a users R session.</p>
<p>This can be set at the user or system level. Users have the choice between user or project level (project taking preference). The <a href="https://usethis.r-lib.org/">usethis</a> package includes a helper function for editing <code>.Renviron</code> files from an R session with&nbsp;<code>usethis::edit_r_environ()</code>. For a system level install it is placed per R version, for example at <code>/opt/R/4.1.1/lib/R/etc/Renviron.site</code>.</p>
</section>
<section id="rprofile.site" class="level5">
<h5 class="anchored" data-anchor-id="rprofile.site">.Rprofile.site</h5>
<p>Set <code>.libPaths()</code> in <code>.Rprofile.site</code>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/opt/R/Some-R-Version/lib/R/etc/Rprofile.site</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" data-filename="/opt/R/Some-R-Version/lib/R/etc/Rprofile.site" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">options</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">repos</span> = c<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CRAN</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://packagemanager.posit.co/all/latest"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">))</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interactive()</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb5-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">options</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">width</span> = 120<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span></code></pre></div></div>
</div>
<p>Again this file can be se at the user or system level. At the user level the easiest way to edit your <code>.Rprofile</code> file is to use the <code>usethis::edit_r_profile()</code> function from within an R session. You can specify whether you want to edit the user or project level <code>.Rprofile.</code> For a system level install it is placed per R version, for example at <code>/opt/R/4.2.0/lib/R/etc/Rprofile.site</code>.</p>
</section>
<section id="configuring-a-shared-library" class="level5">
<h5 class="anchored" data-anchor-id="configuring-a-shared-library">Configuring a shared library</h5>
<p>Taken from an <a href="https://positpbc.slack.com/archives/C2P7MTJKE/p1738088423395249?thread_ts=1737982807.176319&amp;cid=C2P7MTJKE">internal discussion</a></p>
<p>Set <code>.libPaths()</code> in <code>.Rprofile.site</code>.</p>
<p>There are two main options:</p>
<ul>
<li><p>Install a set of R packages in a shared library. The users here would need to specify which packages they really need and then their IT team could install those into a <code>site-library</code> in each R version, ideally leveraging a time-based snapshot from package manager for reproducibility reason. Users in this case would be limited to a certain package version for some time. They however can update those packages regularly (e.g.&nbsp;quarterly) to lessen the pain here. As mentioned above, do <strong>NOT</strong> use any recommendation from the Posit Admin guide for this setup but follow the standard approach to configure the same in R (leveraging <code>Rprofile.site</code> and <code>Renviron.site</code> for example).</p></li>
<li><p>Educate/train the users to all use <code>renv</code> - then every user would have maximum degree of freedom to choose which packages and which version they want to use for each project. They then would maintain <code>renv.lock</code> files for each project and the admin team can then configure a shared <code>renv</code> package cache to ensure that any given package/version combination is only stored once.</p></li>
</ul>
<p>Both options in their own right also protect the data scientists from producing irreproducible code since in neither case they rely on that melting pot of R package mess that typically piles up in <code>R_LIBS_USER</code> (in particular for systems where R points to latest CRAN which IMHO is another anti-pattern)</p>
<section id="script-for-updating-packages-from-rspm-that-have-changed-to-site-library" class="level6">
<h6 class="anchored" data-anchor-id="script-for-updating-packages-from-rspm-that-have-changed-to-site-library">Script for updating packages from rspm that have changed to site library</h6>
<pre><code># update existing packages
update.packages(lib.loc=&lt;site.library&gt;, repos=&lt;PPM Repo&gt;, ask=FALSE)

# add any new packages
new.packages(lib.loc=&lt;site.library&gt;, repos=&lt;PPM Repo&gt;, ask=FALSE)</code></pre>
</section>
<section id="faster-installs" class="level6">
<h6 class="anchored" data-anchor-id="faster-installs">Faster installs</h6>
<p>Parallelize your package installs (particularly useful for monstrous bioconductor packages) using <code>pak</code> with <code>renv</code>. <code>pak</code> will natively use parallelization for the install, making it significantly faster.</p>
<pre><code>options(renv.config.pak.enabled=TRUE)</code></pre>
</section>
</section>
</section>
<section id="workbench-and-rstudio-sessions-only" class="level4">
<h4 class="anchored" data-anchor-id="workbench-and-rstudio-sessions-only">Workbench and RStudio sessions only</h4>
<p>The oft recommended path is to use the <code>repos.conf</code> or <code>rsession.conf</code> file to configure the repository URL.</p>
<p>This might look like:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/rstudio/rsession.conf</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb8" data-filename="/etc/rstudio/rsession.conf" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">r-cran-repos=http://cran.at.r-project.org/</span></span></code></pre></div></div>
</div>
<p>Or:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/rstudio/repos.conf</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb9" data-filename="/etc/rstudio/repos.conf" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">RSPM</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>https://packagemanager.posit.co/cran/__linux__/jammy/latest</span>
<span id="cb9-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">CRAN</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>https://packagemanager.posit.co/cran/__linux__/jammy/latest</span>
<span id="cb9-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Australia</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>https://cran.ms.unimelb.edu.au/</span>
<span id="cb9-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Austria</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>https://lib.ugent.be/CRAN/</span></code></pre></div></div>
</div>
<p>And adding to <code>rsession.conf</code>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/rstudio/rsession.conf</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb10" data-filename="/etc/rstudio/rsession.conf" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use this to change the location / name of the repos.conf file</span></span>
<span id="cb10-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">r-cran-repos-file=/etc/rstudio/repos.conf</span></span></code></pre></div></div>
</div>
<p>Reference: <a href="https://docs.posit.co/ide/server-pro/rstudio_pro_sessions/package_installation.html" class="uri">https://docs.posit.co/ide/server-pro/rstudio_pro_sessions/package_installation.html</a></p>
</section>
<section id="ld_library_path" class="level4">
<h4 class="anchored" data-anchor-id="ld_library_path">LD_LIBRARY_PATH</h4>
<p>Reference: <a href="https://rstudioide.zendesk.com/agent/tickets/107856" class="uri">https://rstudioide.zendesk.com/agent/tickets/107856</a></p>
<p>There are a few different places the LD_LIBRARY_PATH can be modified within Workbench settings, only some of which will work for packages like <code>rJava</code>. For instance, including the ldpaths script in <code>/etc/rstudio/r-versions</code> can ensure the correct library is set on R session startup. The final step in this support article shows a method of setting this up which should work even on non-containerized Workbench sessions (the mkdir command can be excluded, since that directory should already exist on a server-installed version of Workbench):</p>
<p>We need to force the installed R version to use it’s own ldpaths startup script when it starts inside the container.</p>
<p><code>RUN mkdir -p /etc/rstudio &amp;&amp; printf "Path: /opt/R/${R_VERSION}\nScript: /opt/R/${R_VERSION}/lib/R/etc/ldpaths" &gt; /etc/rstudio/r-versions</code></p>
<p>These steps are good to follow: <a href="https://solutions.posit.co/envs-pkgs/using-rjava/index.html#additional-steps-for-workbench" class="uri">https://solutions.posit.co/envs-pkgs/using-rjava/index.html#additional-steps-for-workbench</a></p>
<p>The additional steps that need to be followed on Workbench are:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/rstudio/r-versions</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb11" data-filename="/etc/rstudio/r-versions" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Path:</span> /opt/R/4.2.0</span>
<span id="cb11-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Script:</span> /opt/R/4.2.0/lib/R/etc/ldpaths</span></code></pre></div></div>
</div>
</section>
<section id="troubleshooting" class="level4">
<h4 class="anchored" data-anchor-id="troubleshooting">Troubleshooting</h4>
<p>To determine the environment details it can be useful to run <code>Sys.getenv()</code> from inside and outside RStudio, to see if the user’s bash files are setting environment variables inappropriately for the system.</p>
<p>If the issue is occurring within RStudio it can be helpful to capture the output of<code>system("ldd /usr/lib/rstudio-server/bin/rsession")</code> from inside and outside RStudio to see which R libraries are being loaded.</p>
<p>Test from a user session the repository details with:</p>
<ul>
<li><code>.libPaths()</code></li>
<li><code>options()$repos</code></li>
</ul>
<p>Permissions on the various configs can cause various issues with soft fails, for example a working permission is: <code>chmod 644</code>, or for the rstudio directory consider <code>chmod 0755 /etc/rstudio</code> or <code>chmod o+x /etc/rstudio</code> to add the <code>x</code> bit for just rstudio-server without opening up the other permissions if it is desired to keep it restricted (may result in odd behavior).</p>
<p>Check permissions with: <code>ls -la /etc/rstudio</code></p>
</section>
</section>
<section id="python-repository-1" class="level3">
<h3 class="anchored" data-anchor-id="python-repository-1">Python repository</h3>
<section id="all-projects-system-wide-for-the-current-user" class="level4">
<h4 class="anchored" data-anchor-id="all-projects-system-wide-for-the-current-user">All projects system wide for the current user</h4>
<p>Set your user-specific pip configuration file to use the desired repository address:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> config set global.index-url https://pkg.demo.posit.team/blocked-python/latest/simple</span>
<span id="cb12-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> config set global.trusted-host pkg.demo.posit.team</span></code></pre></div></div>
</section>
<section id="specific-project-for-the-current-user" class="level4">
<h4 class="anchored" data-anchor-id="specific-project-for-the-current-user">Specific project for the current user</h4>
<p>To associate a Package Manager repository with a specific Python project, configure a repository index URL to be used with a <code>requirements.txt</code> file for the project or virtual environment: Copy and paste the following lines to the top of the <code>requirements.txt</code> file in your project:</p>
<pre><code>--index-url https://pkg.demo.posit.team/blocked-python/latest/simple
--trusted-host pkg.demo.posit.team</code></pre>
</section>
<section id="globally-for-all-users-on-workbench-andor-on-connect" class="level4">
<h4 class="anchored" data-anchor-id="globally-for-all-users-on-workbench-andor-on-connect">Globally for all users, on Workbench, and/or on Connect</h4>
<p>Add the following lines to <code>/etc/pip.conf</code>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>/etc/pip.conf</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb14" data-filename="/etc/pip.conf" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[global]</span></span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">timeout</span> = 60</span>
<span id="cb14-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">index-url</span> = https://pkg.demo.posit.team/blocked-python/latest/simple</span>
<span id="cb14-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">trusted-host</span> = pkg.demo.posit.team</span></code></pre></div></div>
</div>
</section>
<section id="pip-limitations" class="level4">
<h4 class="anchored" data-anchor-id="pip-limitations">Pip limitations</h4>
<p>The current stated config order of priority is SITE &gt; USER &gt; GLOBAL. For example, global values would be overwritten by user values. It will look for files in these locations:</p>
<pre><code>$ pip config list -v
For variant 'global', will try loading '/etc/xdg/pip/pip.conf'
For variant 'global', will try loading '/etc/pip.conf'
For variant 'user', will try loading '~/.pip/pip.conf'
For variant 'user', will try loading '~/.config/pip/pip.conf'
For variant 'site', will try loading '[venv]/pip.conf'</code></pre>
<p>Note that pip does not currently allow or a repository order preference to be respected.</p>
<blockquote class="blockquote">
<p>Packages are expected to be unique up to name and version, so two wheels with the same package name and version are treated as indistinguishable by pip. This is a deliberate feature of the package metadata, and not likely to change.</p>
</blockquote>
<p>References:</p>
<ul>
<li><a href="https://github.com/pypa/pip/issues/5045#issuecomment-369521345" class="uri">https://github.com/pypa/pip/issues/5045#issuecomment-369521345</a></li>
<li><a href="https://discuss.python.org/t/dependency-notation-including-the-index-url/5659" class="uri">https://discuss.python.org/t/dependency-notation-including-the-index-url/5659</a></li>
<li><a href="https://pip.pypa.io/en/stable/cli/pip_config/" class="uri">https://pip.pypa.io/en/stable/cli/pip_config/</a></li>
</ul>


</section>
</section>
</section>

 ]]></description>
  <category>code</category>
  <category>R</category>
  <category>Python</category>
  <category>Posit</category>
  <guid>https://questionable.quarto.pub/blog/work/r-python-repository-settings-workbench-connect.html</guid>
  <pubDate>Mon, 29 Sep 2025 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Sparklyr and UV (to connect to Databricks)</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/databricks-and-uc-and-sparklyr.html</link>
  <description><![CDATA[ 






<section id="the-players" class="level2">
<h2 class="anchored" data-anchor-id="the-players">The players</h2>
<p>There are a bunch of packages and pieces between your R sesson and the databricks environment you want to leverage that are useful to be aware of.</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart LR
    A[Databricks Clusters] --&gt; B{Databricks-Connect Python package};
    B --&gt; C[PySpark Python package];
    C --&gt; D[pysparklyr r package];
    D --&gt; E[sparklyr r package];
    E --&gt; F[reticulate r package];
    F --&gt; G[R session];
    B -- "Must match runtime" --&gt; A;
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>On the databricks side you’ll need to make sure you have:</p>
<ul>
<li>the cluster ID</li>
<li>the cluster runtime environment</li>
<li>the DATABRICKS_PATH found under the datasource -&gt; ⁠Advanced Options &gt; JDBC/ODBC⁠ in the Databricks UI” (typically in the form <code>/sql/1.0/warehouses/somehash</code>)</li>
<li>the DATABRICKS_HOST (typically something like adb-redacted.15.azuredatabricks.net)</li>
</ul>
<p>Note that likely, as a user, you will have access to multiple databricks clusters. You will have a personal one, that is your compute, and could haveshared ones across your team. At the time of creation by default they will use the latest runtime environment, but as they get old they could get harder and harder to connect to. I’d recommend checking the runtime environment, checking that you have a compatible python environment, and if not just spinning up a new cluster instead of dealing with the headache of trying to connect to the old one.</p>
<p>You’ll either need to create a cluster, start a cluster, or use the interface to get your PATH and cluster ID and runtime settings.</p>
<p>If you are using managed credentials on Workbench show the credentials with:</p>
<p><code>env | grep DATABRICKS</code></p>
</section>
<section id="connecting-to-databricks---at-a-glance" class="level2">
<h2 class="anchored" data-anchor-id="connecting-to-databricks---at-a-glance">Connecting to Databricks - at a glance</h2>
<ul>
<li>use the odbc package</li>
<li>use sparklyr</li>
</ul>
<p>Think of odbc as a typical data connection. This method is treating databricks like a database. It won’t use compute, so you won’t see improved performance, but is typically lower cost and easier. odbc could be considered “safer” for that reason.</p>
<p>A typical workflow would be doing analysis on Workbench using spark compute. Pushing that ML model or whatever back to databricks. Then you would call the data from Connect via odbc. In theory someone could automate workflows with sparklyr on Connect but there’s the whole risk when the user is experiencing the “pain” of the big job that they won’t optimize and burn through databricks money needlessly.</p>
</section>
<section id="connecting-to-databricks-from-r-using-odbc" class="level2">
<h2 class="anchored" data-anchor-id="connecting-to-databricks-from-r-using-odbc">Connecting to Databricks from R using odbc</h2>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dbplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DBI)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-5"></span>
<span id="cb1-6">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(</span>
<span id="cb1-7">  odbc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">databricks</span>(),</span>
<span id="cb1-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">httpPath =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/sql/1.0/warehouses/1d700cb4bab6d335"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># azure</span></span>
<span id="cb1-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#httpPath = "/sql/1.0/warehouses/300bd24ba12adf8e" # aws</span></span>
<span id="cb1-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># httpPath = "value found under ⁠Advanced Options &gt; JDBC/ODBC⁠ in the Databricks UI, could also load from environment with = Sys.getenv("DATABRICKS_PATH"),</span></span>
<span id="cb1-11">  )</span>
<span id="cb1-12"></span>
<span id="cb1-13">con</span>
<span id="cb1-14"></span>
<span id="cb1-15">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tbl</span>(con, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Id</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"samples"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nyctaxi"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"trips"</span>))</span>
<span id="cb1-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(data)</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Example connecting to data source from customer</span></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tbl(sc, in_catalog("marvel", "information_schema", "tables")) |&gt; collect()</span></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sc2 &lt;- dbConnect(</span></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   odbc::databricks(),</span></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   HTTPPath = "/sql/protocolv1/o/redacted"</span></span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># )</span></span>
<span id="cb1-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tbl(sc2, in_catalog("marvel", "information_schema", "tables")) # |&gt; collect()</span></span></code></pre></div></div>
</section>
<section id="connecting-to-databricks-from-r-using-a-uv-created-venv" class="level2">
<h2 class="anchored" data-anchor-id="connecting-to-databricks-from-r-using-a-uv-created-venv">Connecting to Databricks from R using a UV created venv</h2>
<p>Sparklyr can use a previously existing environment for python. This is actually my preference (in SE) since it lets you have very explicit control over the contents of your python environment.</p>
<p>The trick here is to rely on sparklyr for the detection. It might be tempting to try to start modifying reticulate, but there is still some maturity to get pain points smoothed out. Sparklyr detecting the environment is a much better experience. For example you’d call the environment like this in order to use a previously created venv (my preference):</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(sparklyr)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dbplyr)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DBI)</span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(reticulate)</span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("pysparklyr")</span></span>
<span id="cb2-8"></span>
<span id="cb2-9">sc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spark_connect</span>(</span>
<span id="cb2-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cluster_id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"redacted"</span>,</span>
<span id="cb2-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"databricks_connect"</span>,</span>
<span id="cb2-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/lisa.anders/demo/databricks_demo-main/.venv/bin/python"</span>,</span>
<span id="cb2-13">)</span></code></pre></div></div>
<p>In that example I created my uv venv with the below, after making sure that I was “cd’d” to the correct directory:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check what python versions you have access to</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-1d</span> /opt/python/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the uv project, this example declares the python version to use explicitly. Make sure this matches a version you have access to.</span></span>
<span id="cb3-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> init <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--app</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--python</span> 3.10.16</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> pip install databricks-connect</span></code></pre></div></div>
<p>If using a specific version of python make sure it is called out both in the <code>.python-versions</code> file and the <code>pyproject.toml</code> file</p>
<p>If using a specific version of databricks-connect then make sure that the version needed is called out in the <code>pyproject.toml</code> file like this:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">dependencies</span> = [</span>
<span id="cb4-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"databricks-connect==14.3.3"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div></div>
<p>After changing anything be sure to run <code>uv sync</code>.</p>
<p>You’ll want to make sure that the version of databricks-connect matches the version for your cluster. Double check the version-python-version requirements here. If it’s really old (think 14.3.3) then there are a bunch of issues with various dependencies and I’d recommend talking to the cluster owner to see if upgrading the runtime is a possibility.</p>
<p>Also note that the command will need to start the cluster - so if it hasn’t already started you are probably looking at it “hanging” until the cluster has successfully started. To prevent this delay consider pre-starting the cluster and then running the spark_connect command.</p>
</section>
<section id="deploying-to-connect" class="level2">
<h2 class="anchored" data-anchor-id="deploying-to-connect">Deploying to Connect</h2>
<p>Follow the excellent cookbook example here: <a href="https://docs.posit.co/connect/cookbook/content/integrations/databricks/viewer/r/" class="uri">https://docs.posit.co/connect/cookbook/content/integrations/databricks/viewer/r/</a></p>
<p>Including a library call to the <code>pysparklyr</code> is the key while deploying so it can create the python environment for you. There is a geat writeup on the sparklyr documentation here: <a href="https://spark.posit.co/deployment/databricks-posit-connect.html" class="uri">https://spark.posit.co/deployment/databricks-posit-connect.html</a></p>
<p>For example your library calls might look like:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(connectapi)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dbplyr)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(gt)</span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(httr2)</span>
<span id="cb5-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(odbc)</span>
<span id="cb5-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb5-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(sparklyr)</span>
<span id="cb5-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb5-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DBI)</span>
<span id="cb5-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb5-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(reticulate)</span>
<span id="cb5-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(pysparklyr) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is the key while deploying, refer to https://spark.posit.co/deployment/databricks-posit-connect.html</span></span>
<span id="cb5-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("pysparklyr")</span></span></code></pre></div></div>
<p>In order to get the example from the cookbook working to use sparklyr instead of odbc I just needed to swap out how the connection is being made:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">spark_connect</span>(</span>
<span id="cb6-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cluster_id = "0606-201802-s75pygqn", # 14.3 &lt;- don't bother using this old cluster, too painful to sort through python version errors</span></span>
<span id="cb6-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cluster_id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0922-141250-qdsi5yjo"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 17.2</span></span>
<span id="cb6-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#serverless = TRUE,</span></span>
<span id="cb6-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">token      =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">databricks_token</span>(session),</span>
<span id="cb6-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"databricks_connect"</span></span>
<span id="cb6-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#envname = "/home/lisa.anders/demo/databricks_demo-main/.venv/bin/python", #only needed this while debugging python environments</span></span>
<span id="cb6-8">  )</span></code></pre></div></div>
<p>As always, it needs host name and path in order to successfully connect as env vars.</p>
<ul>
<li><code>#DATABRICKS_PATH = "/sql/1.0/warehouses/1d700cb4bab6d335" # azure</code></li>
<li><code>#DATABRICKS_PATH = "/sql/1.0/warehouses/300bd24ba12adf8e" # aws</code></li>
<li>For the host this is what you want for Azure: <code>DATABRICKS_HOST =</code> <code>adb-3256282566390055.15.azuredatabricks.net</code></li>
</ul>
<p>There’s a caveat that very rarely would you actually want automated big jobs going to databricks from Connect. Likely using sparklyr for deployed pieces of content is a sign of an antipattern, since it can lead to losing focus on optimizing and can lead to large databricks bills.</p>
</section>
<section id="troubleshooting" class="level2">
<h2 class="anchored" data-anchor-id="troubleshooting">Troubleshooting</h2>
<section id="venv" class="level3">
<h3 class="anchored" data-anchor-id="venv">Venv</h3>
<p>This is the page you should read: <a href="https://spark.posit.co/deployment/databricks-connect.html#environments" class="uri">https://spark.posit.co/deployment/databricks-connect.html#environments</a></p>
</section>
<section id="python" class="level3">
<h3 class="anchored" data-anchor-id="python">Python</h3>
<p>Next we’ll want to make sure that python is set up correctly, since sparklyr wraps pyspark.</p>
<p>Make sure you have the right python version. It will need to be compatible with the version of databricks-connect that you need: <a href="https://docs.databricks.com/aws/en/dev-tools/databricks-connect/python/install#version-support-matrix" class="uri">https://docs.databricks.com/aws/en/dev-tools/databricks-connect/python/install#version-support-matrix</a> and <a href="https://docs.databricks.com/aws/en/dev-tools/databricks-connect/requirements" class="uri">https://docs.databricks.com/aws/en/dev-tools/databricks-connect/requirements</a></p>
<p>Check what version of python reticulate is using: <code>reticulate::py_config()</code> and <code>ls -l /home/lisa.anders/.virtualenvs/r-reticulate/bin</code> and <code>ls -1d /opt/python/*</code></p>
<p>Figure out what python I have access to, we could also use py_discover_config() <code>ls -1d /opt/python/*</code> and which versions are available through uv with <code>uv python list --only-installed</code></p>
<p>Set the symlink: <code>ln -sf /opt/python/3.10.16/bin/python3.10 /home/lisa.anders/.virtualenvs/r-reticulate/bin/python3.10</code></p>
<p>Set up the folder as a uv project: <code>uv init</code> or we could declare the python version explicitly: <code>uv init --app --python 3.10.16</code></p>
<p>We might find that the version of databricks-connect that we need is only support on an older version of python. In that case we should use uv to install the version of python that we need. For example for databricks-connect 14.3.3 we need python 3.10. <code>uv python install 3.10</code> and then <code>uv python pin 3.10.16</code> (or edit .python-version) and then <code>uv sync</code></p>
<p>Make sure it’s called out in the uv pyproject.toml file:</p>
<pre><code>dependencies = [
    "databricks-connect==14.3.3",
]</code></pre>
<p>And then make sure everything matches with <code>uv sync</code> (or install the packages directly with: <code>uv pip install databricks-connect</code>)</p>
<p>You can create env for a version of python that matches the cluster python version with <code>pysparklyr::install_databricks()</code>.</p>
<p>Something like…</p>
<pre><code>install_databricks(version = "15.3", python_version = "3.11.9", envname = "r-sparklyr-databricks-15.4-3.11.9") 
sc &lt;- spark_connect( cluster_id = "redacted", version = "15.3", method = "databricks_connect", envname = "r-sparklyr-databricks-15.4-3.11.9" )</code></pre>
</section>
<section id="move-packages-from-one-python-virtual-environment-to-another" class="level3">
<h3 class="anchored" data-anchor-id="move-packages-from-one-python-virtual-environment-to-another">Move packages from one python virtual environment to another</h3>
<p>You could also try moving all the packages from one python virtual environment to another with:</p>
<pre><code>library(reticulate)

envname &lt;- "r-reticulate"

# backup list of packages and versions
packages &lt;- py_list_packages(envname = envname)

# delete existing virtualenv
virtualenv_remove(envname = envname)

# recreate it with packages
virtualenv_create(envname = envname, python = "/opt/python/3.12.11/bin/python", packages = packages$requirement)</code></pre>
</section>
<section id="reticulate" class="level3">
<h3 class="anchored" data-anchor-id="reticulate">Reticulate</h3>
<p>Run <code>reticulate::py_last_error()</code> for more details on any error messages.</p>
<p>If you want a dev version of reticulate use: <code>pak::pak("rstudio/reticulate")</code> or this is what someone else used: <code>pak::pkg_install("rstudio/reticulate", dependencies = FALSE)</code></p>
<p>Or with:</p>
<pre><code>install.packages("remotes")
remotes::install_github("rstudio/reticulate")</code></pre>
<p>Or if you add it as a git runner to your package manager use <code>install.packages("reticulate", repos="my-repo-for-git-runners)</code></p>
<p>See the available virtualenv’s with: <code>reticulate::virtualenv_list()</code>.</p>
<p>Remove a virtualenv created by reticulate with <code>virtualenv_remove("r-sparklyr-databricks-14.3")</code>.</p>
<p>In order for a created venv to be picked up by reticulate we need to set the RETICULATE_PYTHON variable to “.venv/bin/activate” in the project’s .Renviron file (from <a href="https://ryjohnson09.quarto.pub/stepping-stones/docs/R/reticulate/proj-settings.html">here</a>). Like: <code>RETICULATE_PYTHON=".venv/bin/activate"</code>. That can also cause issues though so you might want to unset it with <code>Sys.unsetenv("RETICULATE_PYTHON")</code>.</p>
</section>
<section id="databricks-runtime" class="level3">
<h3 class="anchored" data-anchor-id="databricks-runtime">Databricks runtime</h3>
<p>To successfully connect to a Databricks cluster, you will need to match the proper version of the <a href="https://pypi.org/project/databricks-connect/">databricks-connect</a> Python library to the Databricks Runtime (DBR) version in the cluster.</p>
<p>If you get an error message like:</p>
<blockquote class="blockquote">
<p>Error in py_call_impl(callable, call_args<img src="https://latex.codecogs.com/png.latex?unnamed,%20call_args">named) : Exception: Unsupported combination of Databricks Runtime &amp; Databricks Connect versions: 14.3 (Databricks Runtime) &lt; 16.1.6 (Databricks Connect).</p>
</blockquote>
<p>This is because the version of databricks-connect on your databricks environment doesn’t match what you have locally. Read through the python section above and follow those recommendations to make sure that you have (1) a python version that supports the databricks-connect version you need (2) the correct version of databricks-connect and (3) that the correct virtual environment is being pulled with the <code>envname</code> parameter.</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/databricks-and-uc-and-sparklyr.html</guid>
  <pubDate>Thu, 11 Sep 2025 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Improving the performance of R package installation on Workbench</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/R package installation improvements on Workbench.html</link>
  <description><![CDATA[ 






<section id="motivation" class="level2">
<h2 class="anchored" data-anchor-id="motivation">Motivation</h2>
<p>I wanted to take a moment to write up some notes on the package installation process in R that might be useful for troubleshooting slow package install times and implementing a workaround. This is coming out of a very great conversation I had with a colleague that I hope is useful for you too.</p>
</section>
<section id="package-installation-process-in-r" class="level2">
<h2 class="anchored" data-anchor-id="package-installation-process-in-r">Package Installation Process in R</h2>
<p>When a user runs install.packages it can go in a couple locations: - System library (global, only happens when run by an administrator) - Site library (optional, requires admin set up) - User libary - Project library (optional, requires specific renv setup)</p>
<p>Let’s start with a non renv example - if we have, say, 2 projects then the first time (when the user has a clean directory) the install for the packages for that 1st project could take awhile. This is particularly noticeable with bioconductor packages because the bioconductor repository doesn’t provide binaries and every package has to be compiled as source. After that, however, for the seconod project (if it is using the same packages) it will feed from the same library in the same user home directory, thus feeling faster. It won’t reinstall the packages.</p>
<p>However, in general relying on the user library is a bad thing. Take this example - imagine two projects that start out using the same package. If in project two that package is upgraded when we go back to the first project there is a risk the code isn’t working because the package was upgraded. This is where renv comes in.</p>
</section>
<section id="renv" class="level2">
<h2 class="anchored" data-anchor-id="renv">Renv</h2>
<p>Renv will operate very similarly to the typical process for installing packages. Except that when two projects need different versions of the same package it will install and maintain those two versions separately. By default it creates a project specific folder but it is linking to a package cache that is by default global for a given user. Same experience here where the first time a package is downloaded and compiled it will take awhile. But after that it will be fast, assuming the same package. Now if the renv is using different package versions then that will trigger the package reinstall and that could take a long time. Aligning the renv.lock files to use the same package versions would greatly speed up the process.</p>
<section id="magic-trick" class="level3">
<h3 class="anchored" data-anchor-id="magic-trick">Magic Trick</h3>
<p>Now here is a magic trick. If using a recent version of renv they could enable it to use pak: options(renv.config.pak.enabled=TRUE)</p>
<p>This would be either run inside every user session (risky since that is easy to forget) or could be put in the users rprofile file before running renv::restore. This would make the install, download, build, packages in parallel using pak. You can find the location of your rprofile file with the usethis package.</p>
</section>
</section>
<section id="other-options" class="level2">
<h2 class="anchored" data-anchor-id="other-options">Other Options</h2>
<p>If want to move beyond the per user renv cacheing then we could consider a system global package cache. IT would need to set up a directory with fairly wide permissions to make this happen. Example: <a href="https://github.com/sol-eng/singularity-rstudio?tab=readme-ov-file#what-does-renv-actually-do-" class="uri">https://github.com/sol-eng/singularity-rstudio?tab=readme-ov-file#what-does-renv-actually-do-</a></p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>So to summarize some possible solutions to improving the install time for packages:</p>
<ul>
<li>Use pak with renv to enable paralellized package installs with options(renv.config.pak.enabled=TRUE) (my colleague called this a “magic trick” and would be my choice for what to try)</li>
<li>Align the renv.lock files to use the same package versions where possible</li>
<li>Consider moving to a global package cache, but this would require IT overhead</li>
</ul>


</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/R package installation improvements on Workbench.html</guid>
  <pubDate>Wed, 09 Jul 2025 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Fun with LLM’s</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/LLMs.html</link>
  <description><![CDATA[ 






<section id="intro" class="level2">
<h2 class="anchored" data-anchor-id="intro">Intro</h2>
<p>I’ve heard LLM’s described as a revolutionary search engine, which feels pretty on the nose. Definitely the way we interact with the internet is vastly different when leveraging any LLM technology. I wanted to squirrel away some thoughts and experiments from my own exploration into various LLM technologies.</p>
</section>
<section id="what-llms-cant-do" class="level2">
<h2 class="anchored" data-anchor-id="what-llms-cant-do">What LLM’s can’t do</h2>
<p>As appealing as it may be, at the end of the day the burden is still on you figuring out how to articulate what you want. I think this is where a lot of the hype has gone off the rails - this idea of an LLM completely releasing you from any thought is never going to happen. Having skills in articulate a plan and coming up with ideas is always going to matter - as eloquently put in this xkcd (also proving that there really is an xkcd for anything).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/clarity-of-ideas-xkcd.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Pertinent XKCD"><img src="https://questionable.quarto.pub/blog/work/img/clarity-of-ideas-xkcd.jpg" class="img-fluid figure-img" style="width:60.0%" alt="Pertinent XKCD"></a></p>
<figcaption>Pertinent XKCD</figcaption>
</figure>
</div>
</section>
<section id="setting-up-claude-code-in-aws" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-claude-code-in-aws">Setting up Claude Code in AWS</h2>
<p>Install npm</p>
<pre><code>sudo apt install npm  
npm config set os linux

npm config set prefix ~/.npm-global
export PATH=~/.npm-global/bin:$PATH</code></pre>
<p>Make sure your aws credentials are set up. Create credential files in <code>~/.aws/credentials</code> and <code>~/.aws/config</code></p>
<p>Install Claude code:</p>
<pre><code>npm install -g @anthropic-ai/claude-code --force --no-os-check</code></pre>
<p>If needed, uninstall it:</p>
<pre><code>sudo apt-get remove npm
npm uninstall -g @anthropic-ai/claude-code</code></pre>
<p>Update your bashrc and add</p>
<pre><code>sudo nano  ~/.bashrc

export AWS_REGION=us-east-2 
export CLAUDE_CODE_USE_BEDROCK=1 
export ANTHROPIC_MODEL='us.anthropic.claude-sonnet-4-20250514-v1:0'</code></pre>
<p>You will need to set environment variables with the relevant parameters. In my case it is the following. I’m updating zhrc / .bashrc which is in my home directory as a hidden file so it will persist across sessions:</p>
<pre><code>export AWS_REGION=us-east-2
export CLAUDE_CODE_USE_BEDROCK=1
export ANTHROPIC_MODEL='us.anthropic.claude-sonnet-4-20250514-v1:0'

source ~/.profile
source ~/.bashrc</code></pre>
<p>If I did this as a sudo user I should also add it to my /etc/environment file:</p>
<pre><code>sudo nano /etc/environment 

PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"


export AWS_REGION=&lt;your region&gt;
export CLAUDE_CODE_USE_BEDROCK=1 
export ANTHROPIC_MODEL='us.anthropic.claude-sonnet-4-20250514-v1:0'</code></pre>
<pre><code>source ~/.bashrc
source /etc/environment </code></pre>
<p>Check that they set with:</p>
<pre><code>env | grep CLAUDE
sudo env | grep CLAUDE
env | grep AWS
env | grep ANTHROPIC</code></pre>
<p>To use it first cd into your project directory, log in to aws, and then you can do things with claude:</p>
<pre><code>cd soleng-book
aws sso login</code></pre>
<p>You’ll want to create an instruction file named <code>CLAUDE.md</code>, something like:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>CLAUDE.md</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb10" data-filename="CLAUDE.md" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Project - Guide</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Project Overview</span></span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">This</span> project is a set of pages documenting various topics around server infrastructure, software installation, integrations, and maintenance. It provides the following topics:</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Storage </span>
<span id="cb10-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> SSL </span>
<span id="cb10-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Networking </span>
<span id="cb10-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Slurm </span>
<span id="cb10-11"></span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Important Considerations</span></span>
<span id="cb10-13"></span>
<span id="cb10-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">**Always</span> run code quality checks before committing<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">**</span>. This includes linting, type checking, and running tests to ensure code quality and functionality.</span>
<span id="cb10-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">**Prefer</span> readable and maintainable code<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">**</span>. Avoid complex one-liners or overly clever solutions that reduce code clarity.</span>
<span id="cb10-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">**Always</span> document code and configurations<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">**</span>. Use docstrings for functions and classes, and comments where necessary to explain complex logic or decisions.</span>
<span id="cb10-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">**When</span> in doubt, ask for help<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">**</span>. If you<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'re unsure about how to implement something or how to fix an error, don'</span>t hesitate to reach out to the team for assistance.</span>
<span id="cb10-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">**Less</span> is more<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">**</span>. Avoid unnecessary complexity in code and configurations. Aim for simplicity and clarity in your solutions.</span>
<span id="cb10-19"></span>
<span id="cb10-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Documentation Quality Standards</span></span>
<span id="cb10-21"></span>
<span id="cb10-22"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Accuracy: Information is correct and up-to-date.</span>
<span id="cb10-23"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Clarity: Language is precise, unambiguous, and easy to understand.</span>
<span id="cb10-24"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Completeness: All necessary information is present<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">no</span> critical steps or explanations are missing.</span>
<span id="cb10-25"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Consistency: Terminology, formatting, and style are uniform throughout.</span>
<span id="cb10-26"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Conciseness: Information is presented efficiently without unnecessary words or repetition.</span>
<span id="cb10-27"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Relevance: Content directly addresses the needs and questions of the target audience.</span>
<span id="cb10-28"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Accessibility: Documentation is easy to navigate, search, and consume <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">e.g.,</span> clear headings, index, TOC<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">.</span></span>
<span id="cb10-29"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Examples/Illustrations: Sufficient and relevant code examples, diagrams, or screenshots are provided.</span>
<span id="cb10-30"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Audience Appropriateness: Language and technical depth are tailored to the intended readers.</span>
<span id="cb10-31"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Maintainability: Structure and content facilitate future updates and revisions.</span>
<span id="cb10-32"></span>
<span id="cb10-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Contributing</span></span>
<span id="cb10-34"></span>
<span id="cb10-35"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1.</span> Plan the changes carefully, considering the overall architecture and existing patterns.</span>
<span id="cb10-36"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2.</span> Write sections following existing code patterns and type hints</span>
<span id="cb10-37"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">3.</span> Add more detail where necessary</span>
<span id="cb10-38"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">4.</span> Once everything is working, make a commit and request human review.</span></code></pre></div></div>
</div>
<p>You can then use the claude command to be off to the races:</p>
<pre><code>claude</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/claude.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Off to the races!"><img src="https://questionable.quarto.pub/blog/work/img/claude.png" class="img-fluid figure-img" alt="Off to the races!"></a></p>
<figcaption>Off to the races!</figcaption>
</figure>
</div>
</section>
<section id="self-hosting-with-ollama" class="level2">
<h2 class="anchored" data-anchor-id="self-hosting-with-ollama">Self hosting with Ollama</h2>
<p>[Ollama] is a LLM model that you can self-host. You would want to place it on its own server (because it can an will consume all resources) and then access it through that IP address, like this:</p>
<pre><code>server_ip_address &lt;- "&lt;ADD YOUR SERVER'S IP ADDRESS HERE&gt;"

library(ellmer)

chat &lt;- chat_ollama(
  system_prompt = "Answer questions using the R programming language. ",
  base_url = paste0("http://", server_ip_address, ":11434"),
  model = "gemma3:1b",
)</code></pre>
<p>(Credit to Isabella)</p>
</section>
<section id="security" class="level2">
<h2 class="anchored" data-anchor-id="security">Security</h2>
<p>Large Language Models (LLMs) are revolutionizing everything from code generation to data analysis and customer interactions.&nbsp; However, their rapid adoption also introduces significant security concerns.&nbsp; From data privacy risks to potential misuse - such as generating malicious code or spreading misinformation - organizations must take a proactive approach to LLM security.</p>
<p>This section is tailored for IT administrators and security professionals who oversee LLM adoption, providing actionable insights on risk mitigation, access control, and enterprise-level security measures.</p>
<section id="the-security-challenges-of-llms" class="level3">
<h3 class="anchored" data-anchor-id="the-security-challenges-of-llms">The Security Challenges of LLMs</h3>
<p>LLMs present unique security risks that administrators must proactively address:</p>
<ul>
<li>Data Privacy &amp; Protection: LLMs process vast amounts of information, including proprietary and sensitive data.</li>
<li>Unauthorized access: Vulnerabilities like prompt injection and model poisoning can compromise entire enterprise systems.</li>
<li>Misinformation &amp; Compliance Risks: AI-generated content can introduce inaccuracies, requiring monitoring and governance.</li>
</ul>
<p>A well-defined enterprise LLM strategy is crucial to maintaining security while leveraging AI’s full potential.</p>
</section>
<section id="choosing-the-right-llm-deployment-model" class="level3">
<h3 class="anchored" data-anchor-id="choosing-the-right-llm-deployment-model">Choosing the Right LLM Deployment Model</h3>
<p>Administrators must select an LLM deployment model that aligns with organizational security policies and data governance requirements balanced against model capability. The three primary options include:</p>
<ol type="1">
<li><p>Self-Hosted (Highest Security): Models are deployed internally, ensuring full control over data and security policies (e.g., Ollama).</p></li>
<li><p>Trusted Cloud Providers (Balanced Security &amp; Scalability): Models hosted by vetted providers with strong security guarantees (e.g., Databricks, Snowflake, AWS Bedrock).</p></li>
<li><p>Unvetted Public Models (High Risk, Not recommended):&nbsp; Free or open-access LLMs with uncertain security and data retention policies (e.g., free-tier ChatGPT).</p></li>
</ol>
<blockquote class="blockquote">
<p>Administrator Tip: Always involve IT security teams in LLM vetting.&nbsp; Ensure that providers adhere to your organization’s data protection standards and contractual safeguards, such as NDAs and service-level agreements (SLAs).&nbsp; “Free” LLMs often come at the cost of your data.</p>
</blockquote>
</section>
<section id="best-practices-for-secure-llm-usage" class="level3">
<h3 class="anchored" data-anchor-id="best-practices-for-secure-llm-usage">Best Practices for Secure LLM Usage</h3>
<ol type="1">
<li>Code Assistance &amp; Completion (IDE Integration)</li>
</ol>
<p>Many developers integrate LLMs into their coding workflows for ghost text, inline chat, and code completion. To ensure security:</p>
<ul>
<li><p>Use IT-approved LLMs within the IDE-integrated editors.</p></li>
<li><p>Select solutions that protect data and have an active community responding to vulnerabilities.</p></li>
<li><p>Centralize access via Posit Workbench to eliminate the need for individual API Key management.</p></li>
</ul>
<ol start="2" type="1">
<li>Programmatic LLM Access (Proprietary Data Analysis)</li>
</ol>
<p>Developers often use LLMs for workflows like exploratory data analysis, requiring API access from code. Security measures should include:</p>
<ul>
<li><p>Using only IT-approved LLMs.</p></li>
<li><p>Choosing secure R and Python packages for LLM development, such as ellmer (R), chatlas (Python), which allow model switching.</p></li>
<li><p>Ensuring libraries come from trusted sources like Posit Package Manager to prevent vulnerability exploitation.</p></li>
<li><p>Verifying code snippets from LLM outputs to track drift and hallucinations over time.</p></li>
<li><p>Protecting authentication credentials using Managed Credentials in Posit Workbench instead of storing API keys manually</p></li>
</ul>
<ol start="3" type="1">
<li>Embedded LLMs in Applications &amp; Chat UIs</li>
</ol>
<p>When deploying applications with LLM-powered interactions:</p>
<ul>
<li><p>Use only IT-approved LLMs with secure access packages like shinychat for Shiny applications</p></li>
<li><p>Centralize application hosting and enforce strict access controls with Posit Connect</p></li>
<li><p>Protect authentication credentials with Managed Credentials to prevent exposure.</p></li>
<li><p>Monitor LLM contributions and ensure transparency, as some jurisdictions require explicit disclosure of AI-generated content.</p></li>
</ul>
</section>
<section id="case-study-how-posit-built-a-secure-chatbot" class="level3">
<h3 class="anchored" data-anchor-id="case-study-how-posit-built-a-secure-chatbot">Case Study: How Posit Built a Secure Chatbot</h3>
<p>One of the most common enterprise use cases for LLMs is chatbot development.&nbsp; At Posit, we applied the above best practices when building an internal chatbot for support assistance. Here’s what we learned:</p>
<ul>
<li><p>Risk Modeling is Crucial: We identified risks like data exposure, hallucinations, and unauthorized access before deployment.</p></li>
<li><p>LLM Vetting Pays Off: By selecting a trusted provider that was self-hosted instead of a free-tier model, we ensured contractual protections and security measures were in place.</p></li>
<li><p>Package Selection: We selected the package chatlas to be the backbone for our chatbot for its ease of use and ability to be hosted from our trusted Posit Package Manager repository.</p></li>
<li><p>Strict Access Controls Prevent Misuse: Our chatbot was hosted via Posit Connect, ensuring only authorized users had access.</p></li>
<li><p>Monitoring and Verification: We implemented verification for URL’s provided by the chatbot and a feedback mechanism by users to monitor performance over time.</p></li>
<li><p>Credential Management Simplified Security: We relied on Managed Credentials to securely connect to the chatbot’s LLM backend instead of exposing API keys.</p></li>
<li><p>Proactive Prompt Security: We fortified against prompt injection attacks by explicitly instructing it to refuse disclosure of its system prompt, preventing unauthorized manipulation and information leakage.</p></li>
</ul>
<p>These lessons reinforced the importance of security-first LLM implementations, whether for chatbot development or broader enterprise use cases.</p>
</section>
<section id="security-best-practices-a-shared-responsibility" class="level3">
<h3 class="anchored" data-anchor-id="security-best-practices-a-shared-responsibility">Security Best Practices: A Shared Responsibility</h3>
<p>For Developers:</p>
<p>✅ Define LLM usage requirements.</p>
<p>✅ Use only IT-approved LLMs.</p>
<p>✅ Verify outputs for consistency and track model performance.</p>
<p>✅ Choose rigorously maintained packages through Posit Package Manager.</p>
<p>✅ Protect Secrets - opt for Managed Credentials over API keys.</p>
<p>✅ Be transparent about AI-generated contributions.</p>
<p>For IT &amp; Admins</p>
<p>✅ Select LLM deployment models that align with security policies.</p>
<p>✅ Implement robust access controls and credential management.</p>
<p>✅ Develop a thread model and conduct regular audits.</p>
<p>✅ Provide clear usage guidelines and approved access methods.</p>
<p>✅ Centralize LLM access management to prevent unauthorized usage.</p>
<p>Enterprise-Wide Security Measures:</p>
<p>✅ Minimize data shared with LLMs.</p>
<p>✅ Define and enforce guardrails to prevent unauthorized responses.</p>
<p>✅ Implement monitoring to detect and mitigate prompt injection attacks.</p>
<p>✅ Use access controls to secure deployed LLM content.</p>
</section>
<section id="final-thoughts-llm-security-is-a-non-negotiable" class="level3">
<h3 class="anchored" data-anchor-id="final-thoughts-llm-security-is-a-non-negotiable">Final Thoughts: LLM Security is a Non-Negotiable</h3>
<p>LLMs are game-changers, but security must be a top priority. By implementing strong safeguards, vetting models carefully and fostering an enterprise-wide culture of responsible AI-use, organizations can unlock the full potential of LLMs without compromising data integrity.</p>
<p>Next Steps:</p>
<p>📌 Consult your LLM provider for additional best practices.</p>
<p>📌 Stay updated on key AI concepts like tokens, RAG, and prompt engineering.</p>
<p>📌 Explore secure deployment options with Posit Workbench and Posit Connect.</p>
<p>📌 Learn from real-world chatbot implementations and apply best practices to your own enterprise use cases.</p>
<p>By staying proactive, enterprises can confidently navigate the evolving LLM landscape while maintaining security and compliance.</p>
</section>
</section>
<section id="prompt-tips" class="level2">
<h2 class="anchored" data-anchor-id="prompt-tips">Prompt tips</h2>
<ol type="1">
<li>Be specific and descriptive</li>
<li>Define the output format</li>
<li>Add context by adding data, including the conversation history, RAG, etc</li>
<li>Give examples</li>
<li>Format the prompt with clear headlines and sections</li>
<li>Have it check its result</li>
</ol>
</section>
<section id="prompt-examples" class="level2">
<h2 class="anchored" data-anchor-id="prompt-examples">Prompt examples</h2>
<section id="default-prompt-usually-auto-included" class="level3">
<h3 class="anchored" data-anchor-id="default-prompt-usually-auto-included">Default prompt, usually auto included</h3>
<pre><code>You are a helpful assistant.</code></pre>
<p>often we don’t want this because then it can’t tell us when it is wrong.</p>
</section>
<section id="concise-answers" class="level3">
<h3 class="anchored" data-anchor-id="concise-answers">Concise answers</h3>
<pre><code>Answer questions directly and with no preamble. Do not use sections.</code></pre>
<pre><code>Answer this is as a terse technical consultant, 4 sentences max.</code></pre>
</section>
<section id="tell-it-to-tell-you-when-it-doesnt-know" class="level3">
<h3 class="anchored" data-anchor-id="tell-it-to-tell-you-when-it-doesnt-know">Tell it to tell you when it doesn’t know</h3>
<pre><code>If you can't answer the question based on the provided context, tell the user that you can't. </code></pre>
<pre><code>If you're unsure about any aspect of the project, make a reasonable decision and explain your choice in a comment.</code></pre>
<pre><code>It's important that you get clear, unambiguous instructions from the user, so if the user's request is unclear in any way, you should ask for clarification. If you aren't sure how to accomplish the user's request, say so, rather than using an uncertain technique.</code></pre>
<pre><code>Can you find the “set” in this photo? If you’re not able to answer this question reliably, tell me.</code></pre>
</section>
<section id="explain-itself" class="level3">
<h3 class="anchored" data-anchor-id="explain-itself">Explain itself</h3>
<pre><code>The response should not only contain the answer to the question, but also, a comprehensive explanation of how you came up with the answer.</code></pre>
</section>
<section id="limit-scope" class="level3">
<h3 class="anchored" data-anchor-id="limit-scope">Limit scope</h3>
<pre><code>Discuss only the R programming language and provide code examples in the R programming language. Friendly refuse to chat on something else." </code></pre>
<pre><code>Only answer questions related to Shiny, or R or Python. Don't answer any questions related to anything else.</code></pre>
<pre><code>You are a chatbot that is displayed on a web page next to a data dashboard. You will be asked to filter, sort, and answer questions on the data. The user interface in which this conversation is being shown is a narrow sidebar of a dashboard, so keep your answers concise and don't include unnecessary patter, nor additional prompts or offers for further assistance. For security reasons, you may only query this specific table. Always use SQL to count, sum, average, or otherwise aggregate the data. Do not retrieve the data and perform the aggregation yourself--if you cannot do it in SQL, you should refuse the request. </code></pre>
<pre><code>Edge cases that should be refused. All of these should be refused with an answer clarifying capability and requesting the user ask again. 
- Off-topic questions
- Questions that are on the topic, but are vageuly worded. 
- Questions where more information is needed from the user.
- Harassment / toxic language</code></pre>
</section>
<section id="dont-assume-the-user-has-asked-the-right-question" class="level3">
<h3 class="anchored" data-anchor-id="dont-assume-the-user-has-asked-the-right-question">Don’t assume the user has asked the right question</h3>
<pre><code>If the user provides a vague help request, like "Help" or "Show me instructions", describe your own capabilities in a helpful way, including examples of questions they can ask. Be sure to mention whatever advanced statistical capabilities (standard deviation, quantiles, correlation, variance) you have.</code></pre>
<pre><code>Don't assume the user asked the right question. Instead consider what they could have met and respond to the question that has an answer that is least complex. </code></pre>
</section>
<section id="detail-the-desired-output-format" class="level3">
<h3 class="anchored" data-anchor-id="detail-the-desired-output-format">Detail the desired output format</h3>
<pre><code>List the three most successful science fiction novels that have been turned into movies. 
Desired output format: A JSON with the keys novel, novel_year_of_publication, movie, movie_year_of_publication. </code></pre>
</section>
<section id="lead-the-witness" class="level3">
<h3 class="anchored" data-anchor-id="lead-the-witness">“Lead the witness”</h3>
<pre><code>I am creating a git issue to improve the documentation of our on prem software. Can you give this issue a once over, improving accuracy, tone, and making a more compelling argument? Please include as much of the original content as possible and stay concise. This is slightly controversial because the scope of our documentation for this product is constantly under tension over what we should document versus what should be documented in the respective editors that our product is making available via a web browser. There have been discussions to remove the "using git" sections entirely. Take this into account and strengthen the argument for why it is needed. Here is my first pass:
"first pass text"</code></pre>
<p>The “keep as much of the original content as possible” has really helped it keep my tone while being instructional for places where it’s able to catch technical misunderstandings. Doing a “leading the witness” approach helps you get the output you want, which I then try to run by humans for an actual value gut feel, since otherwise it’s just giving me an echo chamber.</p>
<pre><code>here is what I have as a short paragraph to intro a section in a documentation guide for a software on how to set up JIT. Can you please improve it's accuracy and make its message clearer? Keep it as similar to the original paragraph as possible. "JIT provisioning has the distinct advantages of (1) being on-demand and eliminating the need for pre-provisioning users without (2) needing the additional up front maintenance of managing a SCIM integration. These are advantages over other  methods of user provisioning like manual, LDAP/SSSD/Active Directory, or SCIM. If you already have one of those other methods and are happy with it, then likely there isn't a main driver for wanting to change. If you have need for pre-provisioning or a more robust role mapping than another method for user provisioning should be considered."</code></pre>
</section>
<section id="give-it-examples-of-good-and-bad" class="level3">
<h3 class="anchored" data-anchor-id="give-it-examples-of-good-and-bad">Give it examples of good and bad</h3>
<p>If I wanted to go a step further I might give it an example of “good” or callout “bad”.</p>
<pre><code>Here is what a good issue is like &lt;text&gt;, it should always include (1) (2) (3), make sure that it does. Don't include (A) (B) or (C), check that these aren't included before responding</code></pre>
</section>
<section id="follow-a-process-and-ask-for-feedback-before-continuing" class="level3">
<h3 class="anchored" data-anchor-id="follow-a-process-and-ask-for-feedback-before-continuing">Follow a process and ask for feedback before continuing</h3>
<pre><code>Answer questions thinking through step by step. </code></pre>
<pre><code>## Process to follow

1. Plan the changes carefully, considering the overall architecture and existing patterns.
2. Write the code follow existing code patterns and type hints
3. Add documentation where necessary
4. Run `just dev-format`
5. Ensure `just dev-check docker` or `just dev-check podman` passes
6. Consider adding or updating e2e tests in `app/tests/e2e/`. Add if needed.
7. Test changes with e2e tests using `just e2e-workflow docker` or `just e2e-workflow podman` for overall tests or to run specific tests use `just e2e-specific docker test` replacing test with the specific test filename and/or class + function name, for example `just e2e-specific docker test_asset_generation.py::TestInstallationGuideGeneration::test_config_downloads_from_install_guide_workbench`.
8. Once everything is working, make a commit and request human review.</code></pre>
<pre><code>Review these steps carefully and follow them to create the Shiny for {language} app. It is very important that your app follows these guidelines, so think about them before you start writing code:

- Analyze the user prompt carefully. Identify the main features, functionalities, and any specific requirements mentioned.

- Plan the structure of the app, including:
   - UI components (input widgets, output displays)
   - Server logic (data processing, reactive elements)
   - Any necessary data sources or external libraries

- Create the app code following these guidelines:
   - Use proper Shiny for {language} syntax and structure
   - Include necessary import statements at the beginning
   - Implement both the UI and server components
   - Ensure all features mentioned in the user prompt are included
   - Use cards for the UI layout
   - If the app contains a few input controls, default to using `page_sidebar` with the inputs in the sidebar and the outputs in the main panel--but if the user prompt specifies a different layout, follow that instead

- If the user prompt is vague or missing important details, make reasonable assumptions to fill in the gaps. Mention these assumptions in comments within the code.

- Ensure the app is complete and runnable. Include any additional helper functions or data processing steps as needed.</code></pre>
<pre><code>Write a blog post about climate change and include recent statistics following these steps: 
Gather facts: "List recent climate change statistics from 2023."
Plan the content: "Create an outline for a climate change blog post."
Write in parts: "Write an engaging introduction for a climate change blog post."
Expand each section separately.
Breaking down the task ensures each part is handled properly before moving to the next.</code></pre>
</section>
<section id="rendering-mermaid-diagrams" class="level3">
<h3 class="anchored" data-anchor-id="rendering-mermaid-diagrams">Rendering mermaid diagrams</h3>
<pre><code>Make a simple game application that displays the output of a mermaid diagram. The mermaid diagram illustrates the the difference between userprovisioning methods JIT and SCIM. show JIT and SCIM side by side, not together. </code></pre>
<p>Then once you’ve tweaked it to how you like it</p>
<pre><code>convert back into a mermaid diagram format</code></pre>
</section>
<section id="making-shiny-apps" class="level3">
<h3 class="anchored" data-anchor-id="making-shiny-apps">Making Shiny apps</h3>
<p>From: <a href="https://github.com/posit-dev/shiny-assistant/blob/main/shinyapp/app_prompt.md" class="uri">https://github.com/posit-dev/shiny-assistant/blob/main/shinyapp/app_prompt.md</a></p>
<pre><code>You are an AI assistant specialized in helping users with Shiny for {language}.
Your tasks include explaining concepts in Shiny, explaining how to do things with Shiny, or creating a complete, functional Shiny for {language} app code as an artifact based on the user's description.
Only answer questions related to Shiny, or R or Python. Don't answer any questions related to anything else.

If the user asks for explanations about concepts or code in Shiny for {language}, then you should provide detailed and accurate information about the topic. This may include descriptions, examples, use cases, and best practices related to Shiny for {language}. If your answer includes examples of Shiny apps, you should provide the code of each one within `&lt;SHINYAPP AUTORUN="0"&gt;` and `&lt;/SHINYAPP&gt;` tags, and otherwise adhere to the guidelines below for creating applications.

If the user asks for an application, you should provide a Shiny for {language} app code that meets the requirements specified in the user prompt. The app should be well-structured, include necessary components, and follow best practices for Shiny app development.

Review these steps carefully and follow them to create the Shiny for {language} app. It is very important that your app follows these guidelines, so think about them before you start writing code:

- Analyze the user prompt carefully. Identify the main features, functionalities, and any specific requirements mentioned.

- Plan the structure of the app, including:
   - UI components (input widgets, output displays)
   - Server logic (data processing, reactive elements)
   - Any necessary data sources or external libraries

- Create the app code following these guidelines:
   - Use proper Shiny for {language} syntax and structure
   - Include necessary import statements at the beginning
   - Implement both the UI and server components
   - Ensure all features mentioned in the user prompt are included
   - Use cards for the UI layout
   - If the app contains a few input controls, default to using `page_sidebar` with the inputs in the sidebar and the outputs in the main panel--but if the user prompt specifies a different layout, follow that instead

- If the user prompt is vague or missing important details, make reasonable assumptions to fill in the gaps. Mention these assumptions in comments within the code.

- Ensure the app is complete and runnable. Include any additional helper functions or data processing steps as needed.

- Output the entire app code within `&lt;SHINYAPP AUTORUN="1"&gt;` and `&lt;/SHINYAPP&gt;` tags. Inside those tags, each file should be within `&lt;FILE NAME="..."&gt;` and `&lt;/FILE&gt;` tags, where the `...` is replaced with the filename.

- Only put it in those tags if it is a complete app. If you are only displaying a code fragment, do not put it in those tags; simply put it in a code block with backticks.

- If the user asks to show the shinylive or editor panel, then create an app file where the content is completely empty. Do not put anything else in the file at all. Also, do not explain why you are doing this. Just do it.

{language_specific_prompt}

Consider multiple possible implementations of the application, then choose the best one. Remember to create a fully functional Shiny for {language} app that accurately reflects the user's requirements. If you're unsure about any aspect of the app, make a reasonable decision and explain your choice in a comment.

{verbosity}</code></pre>
</section>
<section id="making-r-shiny-apps" class="level3">
<h3 class="anchored" data-anchor-id="making-r-shiny-apps">Making R Shiny apps</h3>
<p>From: <a href="https://github.com/posit-dev/shiny-assistant/blob/main/shinyapp/app_prompt_r.md" class="uri">https://github.com/posit-dev/shiny-assistant/blob/main/shinyapp/app_prompt_r.md</a></p>
<pre><code>- Use the bslib package for styling and layout.</code></pre>
</section>
<section id="making-python-shiny-apps" class="level3">
<h3 class="anchored" data-anchor-id="making-python-shiny-apps">Making Python Shiny apps</h3>
<p>From: <a href="https://github.com/posit-dev/shiny-assistant/blob/main/shinyapp/app_prompt_python.md" class="uri">https://github.com/posit-dev/shiny-assistant/blob/main/shinyapp/app_prompt_python.md</a></p>
<pre><code>- Try not to import big packages like scipy.

- Prefer using matplotlib instead of plotly for plotting. A matplotlib plot should not return `plt`. It does not need to return anything, but if necessary, can return `fig`.

- Don't mix Shiny Core and Shiny Express syntax. Just use one. Use Core by default, and if the user asks for Express, then use Express.

- Do not use the captilized functions `reactive.Calc`, `reactive.Value`, or `reactive.Effect`. Instead, use the lowercase versions: `reactive.calc`, `reactive.value`, and `reactive.effect`.

- Do not use `ui.panel_sidebar()` because it no longer exists. Instead ,use `ui.sidebar()`.

- Do not use `panel_main()` because it no longer exists. Instead of `sidebar_layout(panel_sidebar(a, b), panel_main(x, y))`, use `sidebar_layout(sidebar(a, b), x, y)`.

- Never use the `@output` decorator, as it is deprecated. Instead, only use the `@render.xx` decorator.

- Avoid using `@render.image`. Prefer to use `@render.ui` instead and return a `ui.img()` object.

- If you have dynamic UI returning a `ui.img()`, use `@render.ui`, not `@render.image`, and use `ui.output_ui()` instead of `ui.output_image()`.

- For the qrcode package, when calling `img.save(buf)`, do not use the `format="PNG"` parameter. Just do `img.save(buf)`.

- Do not define the UI as a function. Instead use `app_ui = ...`, where the `...` is a static UI definition.

- If the app makes HTTP requests, use the `urllib3` library.

- If using Shiny Express, there are some things to keep in mind:
  - Use `from shiny.express import input, ui, ...`, where the `...` represents other necessary components.
  - Do not try to import `reactive` from `shiny.express`. It is imported from `shiny`.
  - For nestable UI components, like `ui.card()`, it should be used as `with ui.card(): ...`, instead of `ui.card(...)`

- If using Shiny Core, end with the `app = App(...)` call.

- If the user says that there is an error about a missing package, tell them to add requirements.txt with that package.

- Put all required packages in a `requirements.txt` file, and present that file inside of the `&lt;SHINYAPP&gt;` tags.

## Examples

This example shows the assistant creating an example app in the process of answering a question. Because the user did not explicitly ask to create an app, the example should be presented in &lt;SHINYAPP AUTORUN="0"&gt; instead of &lt;SHINYAPP AUTORUN="1"&gt;. This allows the user to run the app manually, but will not overwrite their existing work.

[Example]
[User]
How do I reset a `ui.input_text` to be empty?
[/User]
[Assistant]
To reset a `ui.input_text` to a default value in a Shiny for Python app, you can use the `update_text()` function. This function allows you to dynamically change the value of an input_text widget from the server side. Here's an explanation of how to do it:

1. First, you need to create an `input_text` widget in your UI with an ID.
2. In your server function, you can use the `@reactive.Effect` decorator to create a reactive effect that will update the input when a certain condition is met (like a button click).
3. Inside this effect, you use the `ui.update_text()` function to reset the value.

Here's a simple example that demonstrates this:

&lt;SHINYAPP AUTORUN="0"&gt;
&lt;FILE NAME="app.py"&gt;
from shiny import App, reactive, render, ui

app_ui = ui.page_fluid(
    ui.input_text("name", "Enter your name", value=""),
    ui.output_text("greeting"),
    ui.input_action_button("reset", "Reset"),
)

def server(input, output, session):
    @output
    @render.text
    def greeting():
        return f"Hello, {input.name()}!"

    @reactive.Effect
    @reactive.event(input.reset)
    def _():
        ui.update_text("name", value="")

app = App(app_ui, server)
&lt;/FILE&gt;
&lt;/SHINYAPP&gt;

In this example:

1. We have an `input_text` widget with the ID "name".
2. We have a button with the ID "reset".
3. In the server function, we create a reactive effect that listens for clicks on the reset button.
4. When the reset button is clicked, `ui.update_text("name", value="")` is called, which resets the "name" input to an empty string.

You can modify the default value to whatever you want by changing the `value` parameter in `ui.update_text()`. For example, if you want to reset it to "Default Name", you would use:

```python
ui.update_text("name", value="Default Name")
```

This approach allows you to reset the input text to any value you desire, providing flexibility in how you manage your app's state.
[/Assistant]
[/Example]

## Anti-Examples

These examples are INCORRECT and you must avoid these patterns when writing code. Look at these carefully and consider them before writing your own code.

### Use of nonexistent sidebar panel functions

The following code is INCORRECT because ui.panel_sidebar and ui.panel_main do not exist.

```
app_ui = ui.page_sidebar(
    ui.panel_sidebar(
        ui.input_action_button("generate", "Generate New Plot")
    ),
    ui.panel_main(
      ui.output_plot("plot")
    ),
)
```

Instead, sidebar page and sidebar layout code should look like this:

```
app_ui = ui.page_sidebar(
    ui.sidebar(
        ui.input_action_button("generate", "Generate New Plot")
    ),
    ui.output_plot("plot")
)
```

or:

```
app_ui = ui.page_fillable(
    ui.layout_sidebar(
        ui.sidebar(
            ui.input_action_button("generate", "Generate New Plot")
        ),
        ui.output_plot("plot")
    )
)
```

### Failure to import necessary modules, especially shiny.reactive

```
from shiny import App, render, ui
import numpy as np
import matplotlib.pyplot as plt

app_ui = ... # Elided for brevity

def server(input, output, session):

    @render.plot
    @reactive.event(input.generate)
    def regression_plot():
        n = input.num_points()
        noise_level = input.noise()

        # Elided for brevity

app = App(app_ui, server)
```

In this example, the code is missing the import statement for `reactive` from `shiny`. This will cause the code to fail when trying to use the `@reactive.event` decorator. The correct import statement should be:

```
from shiny import App, render, ui, reactive
```

### Incorrect import of reactive and req

The module shiny.express does not have `reactive` or `req` modules. The correct import should be from shiny.

Incorrect:

```
from shiny.express import input, ui, render, reactive, req
```

Correct:

```
from shiny import req, reactive
from shiny.express import input, ui, render
```

### `reactive.value` and a function with the same name

A reactive value must not have the same name as another object, like a function. In this example,

Incorrect, with the same name:

```
foo = reactive.value("1")

@render.text
def foo():
    ...
```

Correct, with different names:

```
foo_v = reactive.value("1")

@render.text
def foo():
    ...
```</code></pre>
</section>
<section id="references" class="level3">
<h3 class="anchored" data-anchor-id="references">References</h3>
<ul>
<li><a href="https://github.com/jcheng5/r-sidebot" class="uri">https://github.com/jcheng5/r-sidebot</a></li>
<li><a href="https://github.com/posit-dev/shiny-assistant" class="uri">https://github.com/posit-dev/shiny-assistant</a> and <a href="https://gallery.shinyapps.io/assistant/" class="uri">https://gallery.shinyapps.io/assistant/</a></li>
<li><a href="https://github.com/posit-dev/shiny-assistant/blob/main/shinyapp/app_prompt_python.md" class="uri">https://github.com/posit-dev/shiny-assistant/blob/main/shinyapp/app_prompt_python.md</a></li>
<li><a href="https://github.com/sol-eng/pharos/blob/main/CLAUDE.md" class="uri">https://github.com/sol-eng/pharos/blob/main/CLAUDE.md</a></li>
<li><a href="https://github.com/search?q=path%3A%2F%5ECLAUDE%5C.md%2F+OR+path%3A%2F%5Ellms%5C.txt%2F+OR+path%3A%2F%5E%5C.github%5C%2Fcopilot-instructions%5C.md%2F&amp;type=code" class="uri">https://github.com/search?q=path%3A%2F%5ECLAUDE%5C.md%2F+OR+path%3A%2F%5Ellms%5C.txt%2F+OR+path%3A%2F%5E%5C.github%5C%2Fcopilot-instructions%5C.md%2F&amp;type=code</a></li>
<li><a href="https://github.com/posit-dev/demobot" class="uri">https://github.com/posit-dev/demobot</a> (internal)</li>
</ul>
</section>
</section>
<section id="recommended-further-learningwatching" class="level2">
<h2 class="anchored" data-anchor-id="recommended-further-learningwatching">Recommended further learning/watching</h2>
<ul>
<li>Recommended video on AI from JJ: <a href="https://www.youtube.com/watch?v=LCEmiRjPEtQ" class="uri">https://www.youtube.com/watch?v=LCEmiRjPEtQ</a></li>
<li>New package for benchmarking LLM apps in R: <a href="https://github.com/tidyverse/vitals" class="uri">https://github.com/tidyverse/vitals</a></li>
<li>AWS Code Whisperer: <a href="https://open-vsx.org/extension/amazonwebservices/aws-toolkit-vscode" class="uri">https://open-vsx.org/extension/amazonwebservices/aws-toolkit-vscode</a></li>
<li>RStudio Copilot Integration: <a href="https://docs.posit.co/ide/user/ide/guide/tools/copilot.html" class="uri">https://docs.posit.co/ide/user/ide/guide/tools/copilot.html</a></li>
<li>Investigating truthfulness: <a href="https://transluce.org/investigating-o3-truthfulness" class="uri">https://transluce.org/investigating-o3-truthfulness</a></li>
<li>Joe’s LLM workshop:<a href="https://jcheng5.github.io/llm-quickstart/quickstart.html#/title-slide">https://jcheng5.github.io/llm-quickstart/quickstart.html#/title-slide</a></li>
<li>Security conference talk about the dangers of ML (4:08 is where he talks about ml): <a href="https://www.youtube.com/watch?v=ajGX7odA87k">https://www.youtube.com/watch?v=ajGX7odA87k</a></li>
<li>Moving beyond “algorithmic bias is a data problem”: <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8085589/" class="uri">https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8085589/</a></li>
<li>Here’s What Ethical AI Really Means - YouTube philosophy tube: <a href="https://www.youtube.com/watch?v=AaU6tI2pb3M" class="uri">https://www.youtube.com/watch?v=AaU6tI2pb3M</a></li>
<li>i-will-fucking-piledrive-you-if-you-mention-ai-again: <a href="https://ludic.mataroa.blog/blog/i-will-fucking-piledrive-you-if-you-mention-ai-again/" class="uri">https://ludic.mataroa.blog/blog/i-will-fucking-piledrive-you-if-you-mention-ai-again/</a></li>
<li>Podcast about AI, from tech will not save you: <a href="https://techwontsave.us/episode/277_generative_ai_is_not_inevitable_w_emily_m_bender_and_alex_hanna" class="uri">https://techwontsave.us/episode/277_generative_ai_is_not_inevitable_w_emily_m_bender_and_alex_hanna</a></li>
<li>Remove AI from from your google search: <a href="https://udm14.com/" class="uri">https://udm14.com/</a></li>
<li>AI reddit post watching microsoft employees go insane: <a href="https://old.reddit.com/r/ExperiencedDevs/comments/1krttqo/my_new_hobby_watching_ai_slowly_drive_microsoft/" class="uri">https://old.reddit.com/r/ExperiencedDevs/comments/1krttqo/my_new_hobby_watching_ai_slowly_drive_microsoft/</a></li>
<li>The who cares era and the contribution by AI: <a href="https://dansinker.com/posts/2025-05-23-who-cares/" class="uri">https://dansinker.com/posts/2025-05-23-who-cares/</a></li>
<li>AI hiring leak from McHire that was built by an AI company: <a href="https://www.wired.com/story/mcdonalds-ai-hiring-chat-bot-paradoxai/" class="uri">https://www.wired.com/story/mcdonalds-ai-hiring-chat-bot-paradoxai/</a></li>
<li>AWS CEO says replacing workers is short sided: <a href="https://www.theregister.com/2025/08/21/aws_ceo_entry_level_jobs_opinion/" class="uri">https://www.theregister.com/2025/08/21/aws_ceo_entry_level_jobs_opinion/</a></li>
<li>Wikipedia: Signs of AI Writing: <a href="https://en.wikipedia.org/wiki/Wikipedia:Signs_of_AI_writing" class="uri">https://en.wikipedia.org/wiki/Wikipedia:Signs_of_AI_writing</a></li>
<li>Vibe coding is legacy code: <a href="https://blog.val.town/vibe-code" class="uri">https://blog.val.town/vibe-code</a></li>
<li>Indirect prompt injection: <a href="https://simonwillison.net/2025/Aug/25/agentic-browser-security/" class="uri">https://simonwillison.net/2025/Aug/25/agentic-browser-security/</a></li>
<li>Where’s the Shovelware? Why AI Coding Claims Don’t Add Up: <a href="https://substack.com/inbox/post/172538377#_" class="uri">https://substack.com/inbox/post/172538377#_</a></li>
</ul>


</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/LLMs.html</guid>
  <pubDate>Thu, 03 Jul 2025 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Creating a custom Workbench login page</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/workbench-custom-login.html</link>
  <description><![CDATA[ 






<section id="why-would-someone-want-to-do-this" class="level2">
<h2 class="anchored" data-anchor-id="why-would-someone-want-to-do-this">Why would someone want to do this?</h2>
<p>Login can be a challenging process for many users and having the admin provide additional details can be very handy to point folks in the right direction. Also, being able to include your own branding isn’t just a nice jazzy thing but can be a security requirement for some teams to help provide another layer of protection via visual indicators.</p>
</section>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>A customer requested that this page be made clearer: <a href="https://docs.posit.co/ide/server-pro/admin/authenticating_users/customizing_signin.html" class="uri">https://docs.posit.co/ide/server-pro/admin/authenticating_users/customizing_signin.html</a></p>
<p>They were confused that an example wasn’t built for them at the called out location <code>/opt/config/rstudio-login.html</code>.</p>
<p>This support article has some useful examples that are useful: <a href="https://support.posit.co/hc/en-us/articles/231327847-Customizing-the-Posit-Workbench-RStudio-Server-Pro-Login-Page" class="uri">https://support.posit.co/hc/en-us/articles/231327847-Customizing-the-Posit-Workbench-RStudio-Server-Pro-Login-Page</a></p>
<p>There are also some templates in this folder that might be useful to reference: <code>/usr/lib/rstudio-server/www/templates/encrypted-sign-in.html</code></p>
</section>
<section id="plain-html" class="level2">
<h2 class="anchored" data-anchor-id="plain-html">Plain html</h2>
<p>For this particular customer request I’ve been working on their goal is to modify that actual contents of the login information pane. Here is some (hopefully) useful exploration -</p>
<p>Modifying the config&nbsp;<code>/etc/rstudio/rserver.conf</code>&nbsp;with:</p>
<pre><code>auth-login-page-html=/etc/rstudio/login.html</code></pre>
<p>And then creating that file&nbsp;<code>/etc/rstudio/login.html</code>&nbsp;with contents like:</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Requesting access&lt;/h1&gt;
    &lt;p&gt;In order to get access to this software a ticket will need to be submitted through IT.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>This results in a login page with the information appended at the bottom:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/workbench-custom-login-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Workbench login page"><img src="https://questionable.quarto.pub/blog/work/img/workbench-custom-login-1.png" class="img-fluid figure-img" alt="Workbench login page"></a></p>
<figcaption>Workbench login page</figcaption>
</figure>
</div>
</section>
<section id="with-more-jazz" class="level2">
<h2 class="anchored" data-anchor-id="with-more-jazz">With more jazz</h2>
<p>If we append the instructions on the support article and add a logo to <code>/usr/lib/rstudio-server/www/images</code> then we can jazz things up further.</p>
<p>Note there are already files/images in <code>/usr/lib/rstudio-server/www/images</code> and in this example instead of using <code>logo.png</code> we made a custom image called <code>frog.png</code> by downloading an image from the internet with: <code>wget http://images.clipartpanda.com/frog-clip-art-frog_green.png -O /usr/lib/rstudio-server/www/images/logo.png</code></p>
<p><code>/etc/rstudio/login.html</code>:</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Requesting access&lt;/h1&gt;
    &lt;p&gt;In order to get access to this software a ticket will need to be submitted through IT.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;

&lt;script type="text/javascript"&gt;
window.onload=function(){

var logo = document.createElement("img");
logo.setAttribute("src","images/frog.png");
logo.setAttribute("height", "36px");
logo.setAttribute("width", "36px");
logo.setAttribute("style", "float: right;");
document.getElementById("banner").appendChild(logo);

var cap = document.getElementById("caption_header");
cap.innerHTML = "This is a message added by your admin. Sign into Posit with your assigned credentials credentials";    
}
&lt;/script&gt;

&lt;style&gt;
#banner {background-color: #4682b4;}
#caption {border-bottom-color: #4682b4;}
&lt;/style&gt;</code></pre>
<p>This results in a login page with information appended at the bottom as well as custom coloring and a logo and the header for the login blurb changed:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="img/workbench-custom-login-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Workbench login page"><img src="https://questionable.quarto.pub/blog/work/img/workbench-custom-login-2.png" class="img-fluid figure-img" alt="Workbench login page"></a></p>
<figcaption>Workbench login page</figcaption>
</figure>
</div>
</section>
<section id="reference" class="level2">
<h2 class="anchored" data-anchor-id="reference">Reference</h2>
<p><a href="https://github.com/rstudio/rstudio-pro/issues/8378">Git issue</a></p>


</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/workbench-custom-login.html</guid>
  <pubDate>Wed, 18 Jun 2025 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Exploring Positron</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/Positron.html</link>
  <description><![CDATA[ 






<p>Positron is a new IDE developed by Posit. I’ve been putting off giving it a deep dive. I love RStudio. Maybe it’s the green icons, or the simple 4 box layout, or even just that it’s what I’ve been using for so long but it really feels like a happy place to me.</p>
<p>I was the same way with RMarkdown. You could have torn it from my cold dead hands, but eventually that feature comes along that makes going through the process of changing worth it. And for me with Quarto that was <code>lightbox</code> with its ability to magically resize images. Such a simple thing, such a challenging thing to do outside of Quarto.</p>
<section id="positron-in-wsl" class="level2">
<h2 class="anchored" data-anchor-id="positron-in-wsl">Positron in WSL</h2>
<p>Check your linux version with <code>uname -m</code> and then install the correct one from : <a href="https://positron.posit.co/download.html" class="uri">https://positron.posit.co/download.html</a></p>
<p>I’m on Ubuntu Noble so I had a couple hoops to jump through for one of the system dependencies.</p>
<pre><code>wget https://cdn.posit.co/positron/releases/deb/x86_64/Positron-2025.08.0-130-x64.deb

sudo apt --fix-broken install
sudo apt install libasound2t64

sudo dpkg -i Positron-2025.08.0-130-x64.deb</code></pre>
<p>Open it with: <code>Positron</code>.</p>
<div class="quarto-video"><video id="video_shortcode_videojs_video1" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="Screen"></video></div>
<p>Pure magic - opens and works like a dream. Was expecting to have to do more setup with something to get it to open the GUI and am just over the moon at how easy and great the experience was.</p>
</section>
<section id="first-impressions" class="level2">
<h2 class="anchored" data-anchor-id="first-impressions">First impressions</h2>
<p>Changing the theme made it feel like less of a sterile and “other” place. I’m a big fan of dark modes and I actually really liked the built in dark mode.</p>
<p>gear -&gt; theme -&gt; positron dark</p>
<p>There are some good resources for porting your own theme also: <a href="https://www.r-bloggers.com/2025/05/porting-my-favorite-rstudio-color-theme-to-positron/" class="uri">https://www.r-bloggers.com/2025/05/porting-my-favorite-rstudio-color-theme-to-positron/</a></p>
</section>
<section id="viewing-data" class="level2">
<h2 class="anchored" data-anchor-id="viewing-data">Viewing data</h2>
<div id="fig-elephants" class="quarto-layout-panel">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-elephants-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="quarto-layout-row">
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-elephants" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-light-theme" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-light-theme-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="img/positron-theme-light.png" class="lightbox" data-gallery="fig-elephants" title="Figure&nbsp;1&nbsp;(a): Light theme"><img src="https://questionable.quarto.pub/blog/work/img/positron-theme-light.png" class="img-fluid figure-img" data-ref-parent="fig-elephants"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-light-theme-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Light theme
</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-elephants" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-dark-theme" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-dark-theme-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="img/positron-data.png" class="lightbox" data-gallery="fig-elephants" title="Figure&nbsp;1&nbsp;(b): dark theme"><img src="https://questionable.quarto.pub/blog/work/img/positron-data.png" class="img-fluid figure-img" data-ref-parent="fig-elephants"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-dark-theme-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(b) dark theme
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-elephants-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Data Previewer now shows distributions!
</figcaption>
</figure>
</div>
</section>
<section id="my-extensions" class="level2">
<h2 class="anchored" data-anchor-id="my-extensions">My extensions</h2>
<p>Since Positron is a fork of VS Code it relies on extensions for adding various features. Here are some of my favorites:</p>
<ul>
<li>Air (R Language Support)</li>
<li>Posit Publisher</li>
<li>Black Formatter</li>
<li>Gitlive</li>
<li>Pyright</li>
<li>Jupyter</li>
<li>Jupter Cell Tags</li>
<li>Jupyter Keymap</li>
<li>Jupyter Slide Show</li>
<li>Project Manager</li>
<li>Python Debugger</li>
<li>Quarto</li>
<li>Ruff</li>
<li>Shiny</li>
<li>Scope to this</li>
<li>vscode-pets</li>
</ul>
<!--
Soon: 

- [databot](https://positpbc.atlassian.net/wiki/spaces/POSITRON/pages/1613365269/Databot+Getting+Started#Installation)
- [Positron Assistant](https://connect.posit.it/positron-wiki/positron-assistant.html)
-->
</section>
<section id="remote-connections-with-ssh" class="level2">
<h2 class="anchored" data-anchor-id="remote-connections-with-ssh">Remote connections with SSH</h2>
<p>This is bundled with Positron and there’s no need to install anything.</p>
<p>Resource: <a href="https://positron.posit.co/remote-ssh.html" class="uri">https://positron.posit.co/remote-ssh.html</a></p>
</section>
<section id="llm-integrations" class="level2">
<h2 class="anchored" data-anchor-id="llm-integrations">LLM integrations</h2>
<p>This was a focus topic during Posit::Conf 2025!</p>
<div id="fig-dark-theme" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-dark-theme-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="img/positron-assistant.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Figure&nbsp;2: Positron Assistant"><img src="https://questionable.quarto.pub/blog/work/img/positron-assistant.png" class="img-fluid figure-img"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dark-theme-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Positron Assistant
</figcaption>
</figure>
</div>
<p>To use a LLM that isn’t supported yet you’ll need to go in and modify a couple parameters as described <a href="https://connect.posit.it/positron-wiki/positron-assistant.html#aws-bedrock">here</a>. You’ll want to hit the keys command-shift-p to open the settings menu and then click on <code>open user preference (json)</code> and update it to have the appropriate settings, which might look like this:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>settings.json</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" data-filename="settings.json" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb2-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"extensions.autoCheckUpdates"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"false"</span>,</span>
<span id="cb2-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"extensions.autoUpdate"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"false"</span>,</span>
<span id="cb2-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"positron.environment.enabled"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"false"</span>,</span>
<span id="cb2-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"python.environmentProviders.enable"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"map[Conda:false]"</span>,</span>
<span id="cb2-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"python.interpreters.exclude"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[/usr/bin /bin]"</span>,</span>
<span id="cb2-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quarto.path"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/usr/lib/rstudio-server/bin/quarto/bin/quarto"</span>,</span>
<span id="cb2-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"terminal.integrated.defaultProfile.linux"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bash"</span>,</span>
<span id="cb2-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"remote.autoForwardPorts"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> false,</span>
<span id="cb2-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"posit.workbench.showWorkbenchHint"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> false,</span>
<span id="cb2-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"workbench.colorTheme"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Default Positron Dark"</span>,</span>
<span id="cb2-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"files.associations"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb2-13">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"renv.lock"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"json"</span></span>
<span id="cb2-14">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb2-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"positron.assistant.enable"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> true,</span>
<span id="cb2-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"positron.assistant.testModels"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> true,</span>
<span id="cb2-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"positron.assistant.copilot.enable"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> true,</span>
<span id="cb2-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"positron.assistant.enabledProviders"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"amazon-bedrock"</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb2-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span></code></pre></div></div>
</div>
</section>
<section id="running-a-python-project" class="level2">
<h2 class="anchored" data-anchor-id="running-a-python-project">Running a python project</h2>
<p>Reference: <a href="https://positron.posit.co/start.html" class="uri">https://positron.posit.co/start.html</a></p>
<p>I’m a big fan of using the git integration to clone down a project, for example this set of <a href="https://github.com/rstudio/posit-demo-assets">demo examples</a>.</p>
<p>We’ll want to make sure that <code>ipykernel</code> is installed:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip install ipykernel</span></code></pre></div></div>
<p>We can discover which python versions we have access to with:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> /opt/python/</span></code></pre></div></div>
<section id="positron-and-r" class="level3">
<h3 class="anchored" data-anchor-id="positron-and-r">Positron and R</h3>
<p>In Positron <code>cmd shift 0</code> will restart your r session</p>
</section>
<section id="select-the-python-interpreter" class="level3">
<h3 class="anchored" data-anchor-id="select-the-python-interpreter">Select the python interpreter</h3>
<p>Manage the interpreter in the session (virtual environment) through the top right icon:</p>
<div id="fig-python-interp" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-python-interp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="img/python-interpreter.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="Figure&nbsp;3: Python interpreter selection"><img src="https://questionable.quarto.pub/blog/work/img/python-interpreter.png" class="img-fluid figure-img"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-python-interp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: Python interpreter selection
</figcaption>
</figure>
</div>
<p>Reference: <a href="https://positron.posit.co/managing-interpreters.html" class="uri">https://positron.posit.co/managing-interpreters.html</a></p>
<p>You can also manually select the python interpreter with <code>ctrl-shift-p</code> and then <code>Python: Select Interpreter</code> command and select the <code>Enter interpreter path...</code> option.</p>
<p>This gives you the ability to refresh the visible interpreters with the circle arrow symbol.</p>
<div id="fig-python-interp-manually" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-python-interp-manually-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="img/select-interpreter-manually.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5" title="Figure&nbsp;4: Python interpreter manual selection"><img src="https://questionable.quarto.pub/blog/work/img/select-interpreter-manually.png" class="img-fluid figure-img"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-python-interp-manually-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: Python interpreter manual selection
</figcaption>
</figure>
</div>
<p>We can create a new interpreter (and then select it through the dropdown) either with uv or pip.</p>
<section id="the-uv-way" class="level4">
<h4 class="anchored" data-anchor-id="the-uv-way">The uv way</h4>
<p>Use <a href="https://github.com/astral-sh/uv">uv</a>. It will detect that this is a project and create the venv for us when we go to run the application.</p>
<p>Install uv:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-qO-</span> https://astral.sh/uv/install.sh <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sh</span></span></code></pre></div></div>
<p>Create the uv project:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check what python versions you have access to</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-1d</span> /opt/python/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the uv project, this example declares the python version to use explicitly. Make sure this matches a version you have access to.</span></span>
<span id="cb6-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> init <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--app</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--python</span> 3.10.16</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the venv</span></span>
<span id="cb6-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> venv</span>
<span id="cb6-9"></span>
<span id="cb6-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> pip install databricks-connect</span></code></pre></div></div>
<p>If using a specific version of python make sure it is called out both in the <code>.python-versions</code> file and the <code>pyproject.toml</code> file</p>
<p>If using a specific version of databricks-connect then make sure that the version needed is called out in the <code>pyproject.toml</code> file like this:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">dependencies</span> = [</span>
<span id="cb7-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"databricks-connect==14.3.3"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div></div>
<p>You can also use uv to install a particular version of python:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> python install 3.12</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> init <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--app</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--python</span> 3.12.10</span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># view available python versions </span></span>
<span id="cb8-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> python list</span></code></pre></div></div>
<p>After changing anything be sure to run <code>uv sync</code>.</p>
<p>Activate the virtual environment</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> .venv/bin/activate</span></code></pre></div></div>
<p>Run the application:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> run app.py</span>
<span id="cb10-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> run shiny run <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--reload</span> app.py</span></code></pre></div></div>
<p>From inside vs code to open the python as a console that’s using your venv click the plus symbol -&gt; start antoher -&gt; click on your venv</p>
</section>
<section id="the-pip-way" class="level4">
<h4 class="anchored" data-anchor-id="the-pip-way">The pip way</h4>
<p>Setup the <code>venv</code> environment:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv env</span>
<span id="cb11-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">.</span> env/bin/activate</span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># source env/bin/activate</span></span>
<span id="cb11-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span> pip</span>
<span id="cb11-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> requirements.txt</span></code></pre></div></div>
<p>I recommend using <code>env</code> instead of <code>.venv</code> because quarto will automatically pick it up.</p>
<p>Run the application:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">shiny</span> run <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--reload</span> app.py</span></code></pre></div></div>
</section>
<section id="register-new-interpreter-as-kernel-likely-optional" class="level4">
<h4 class="anchored" data-anchor-id="register-new-interpreter-as-kernel-likely-optional">Register new interpreter as kernel (likely optional)</h4>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Register as kernel</span></span>
<span id="cb13-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install ipykernel jupyter</span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># python -m ipykernel install --name "my-new-project_venv" --user </span></span>
<span id="cb13-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> ipykernel install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shiny-income-share"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--user</span></span></code></pre></div></div>
</section>
</section>
<section id="running-and-previewing-an-app" class="level3">
<h3 class="anchored" data-anchor-id="running-and-previewing-an-app">Running and previewing an app</h3>
<p>Open the folder so that the root directory is the content example you want to run.</p>
<p>Make sure the appropriate virtual environment has been created (following the steps above) and selected as the interpreter.</p>
<p>Click the play button to launch the application.</p>
<div id="fig-python-app" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-python-app-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<a href="img/running-shiny-python-app.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6" title="Figure&nbsp;5: Python Shiny App"><img src="https://questionable.quarto.pub/blog/work/img/running-shiny-python-app.png" class="img-fluid figure-img"></a>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-python-app-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;5: Python Shiny App
</figcaption>
</figure>
</div>
</section>
<section id="creating-a-new-project" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-new-project">Creating a new project</h3>
<section id="the-pip-way-1" class="level4">
<h4 class="anchored" data-anchor-id="the-pip-way-1">The pip way</h4>
<p>Create a <code>venv</code> to isolate environments and generate a <code>requirements.txt</code> file so that only the minimum packages needed to support your project are included. Read <a href="https://docs.posit.co/connect/admin/python/package-management/index.html">this</a> for more on Python package management.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip freeze <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> requirements.txt</span>
<span id="cb14-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> requirements.txt</span></code></pre></div></div>
</section>
<section id="the-uv-way-1" class="level4">
<h4 class="anchored" data-anchor-id="the-uv-way-1">The uv way</h4>
<p>Create a <a href="https://docs.posit.co/connect/user/publishing-cli-notebook/index.html#creating-a-manifest-for-future-deployment"><code>manifest.json</code> file</a> to support git-backed publishing</p>
<p>For uv projects, they can be initialized and updated with (change format and packages as needed):</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> init <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--app</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--python</span> 3.12.6</span>
<span id="cb15-2">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> add numpy matplotlib jupyter</span>
<span id="cb15-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> sync <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span></span>
<span id="cb15-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> export <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> requirements.txt <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-hashes</span></span>
<span id="cb15-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> run rsconnect write-manifest api .</span>
<span id="cb15-6"></span>
<span id="cb15-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dev dependencies may need to be added </span></span>
<span id="cb15-8">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> add <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--dev</span> uv ipykernel</span></code></pre></div></div>
</section>
</section>
<section id="deploying" class="level3">
<h3 class="anchored" data-anchor-id="deploying">Deploying</h3>
<p>Reference the <a href="https://docs.posit.co/connect/user/shiny-python/">Posit Connect User Guide: Shiny for Python</a></p>
<section id="using-posit-publisher" class="level4">
<h4 class="anchored" data-anchor-id="using-posit-publisher">Using Posit Publisher</h4>
<p>Make sure the Posit Publisher extension is installed.</p>
<p>Click <code>new deployment</code> and follow the screens to add your developer information and an API key.</p>
<p>Make sure to add any files that need to be included in the bundle to (1) the .toml file (2) the project files list.</p>
<p>For example, the .toml file might look like:</p>
<pre><code># Configuration file generated by Posit Publisher.
# Please review and modify as needed. See the documentation for more options:
# https://github.com/posit-dev/publisher/blob/main/docs/configuration.md
'$schema' = 'https://cdn.posit.co/publisher/schemas/posit-publishing-schema-v3.json'
type = 'python-shiny'
entrypoint = 'app.py'
validate = true
files = [
  '/app.py',
  '/data,csv',
  '/requirements.txt',
  '/.posit/publish/shiny-income-share-positron-FLKH.toml',
  '/.posit/publish/deployments/deployment-NVOJ.toml',
  '/data.csv'
]
title = 'shiny-income-share-positron'

[python]
version = "3.11.9"
package_file = "requirements.txt"
package_manager = "pip"
</code></pre>
<p>Reference: <a href="https://github.com/posit-dev/publisher/blob/main/docs/configuration.md" class="uri">https://github.com/posit-dev/publisher/blob/main/docs/configuration.md</a></p>
</section>
<section id="rsconnect-python-cli" class="level4">
<h4 class="anchored" data-anchor-id="rsconnect-python-cli">rsconnect-python CLI</h4>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># With uv</span></span>
<span id="cb17-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> run rsconnect deploy shiny .</span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Without uv</span></span>
<span id="cb17-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rsconnect</span> deploy shiny .</span></code></pre></div></div>
</section>
<section id="git-backed" class="level4">
<h4 class="anchored" data-anchor-id="git-backed">Git-backed</h4>
<p>Update the code, and then run:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># With uv</span></span>
<span id="cb18-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> export <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> requirements.txt <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-hashes</span></span>
<span id="cb18-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> run rsconnect write-manifest shiny <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--overwrite</span> .</span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Without uv</span></span>
<span id="cb18-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> freeze <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> requirements.txt </span>
<span id="cb18-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rsconnect</span> write-manifest shiny <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--overwrite</span> .</span></code></pre></div></div>
<p>Commit the new <code>manifest.json</code> file to the git repo along with the code.</p>
</section>
</section>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<p>Inspired by: <a href="https://www.andrewheiss.com/blog/2024/07/08/fun-with-positron/" class="uri">https://www.andrewheiss.com/blog/2024/07/08/fun-with-positron/</a></p>
<p>Also useful: <a href="https://blog.phle.dev/posts/python-setup-2024/index.html" class="uri">https://blog.phle.dev/posts/python-setup-2024/index.html</a></p>


</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/Positron.html</guid>
  <pubDate>Tue, 03 Jun 2025 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Finding R System Dependencies</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/system-dependencies-r.html</link>
  <description><![CDATA[ 






<section id="using-pak-and-renv-to-find-r-system-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="using-pak-and-renv-to-find-r-system-dependencies">Using pak and renv to find R system dependencies</h2>
<p>Let’s try to get an environment of packages and understand the system dependencies. This would be useful for fresh installs into a new environment.</p>
</section>
<section id="a-note-on-methodology" class="level2">
<h2 class="anchored" data-anchor-id="a-note-on-methodology">A note on methodology</h2>
<p>In an ideal world a user will be able to identify what packages they are using. Do you really need that package from 3 years ago that you installed but ended up not using? Technology doesn’t solve all problems! Sometimes the “soft” method is the best way to solve a problem.</p>
</section>
<section id="steps" class="level2">
<h2 class="anchored" data-anchor-id="steps">Steps</h2>
<section id="create-the-current-environment-as-a-renv-project-and-snapshot-it" class="level3">
<h3 class="anchored" data-anchor-id="create-the-current-environment-as-a-renv-project-and-snapshot-it">Create the current environment as a renv project and snapshot it</h3>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(pak)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(renv)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Or restore a project with renv::restore() if using a pre-existing projectd</span></span>
<span id="cb1-5">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">init</span>()</span>
<span id="cb1-6">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">snapshot</span>()</span></code></pre></div></div>
</section>
<section id="find-what-os-we-are-on" class="level3">
<h3 class="anchored" data-anchor-id="find-what-os-we-are-on">Find what OS we are on</h3>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># R.version # Nope</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># version # Nope</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .Platform # nope</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .Platform$OS.type # nope</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sys.info() # nope</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sys.info()["sysname"] # nope</span></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># system("cat /etc/*release") # closer</span></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># system("lsb_release -a") # closer</span></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pak::system_r_platform_data()$distribution # this is the one!</span></span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(.Platform<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>OS.type <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unix"</span>){</span>
<span id="cb2-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.setenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PKG_SYSREQS_PLATFORM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>pak<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system_r_platform_data</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>distribution)</span>
<span id="cb2-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PKG_SYSREQS_PLATFORM"</span>))</span>
<span id="cb2-14">} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> { <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## windows</span></span>
<span id="cb2-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.setenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PKG_SYSREQS_PLATFORM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"windows"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># supported by pak</span></span>
<span id="cb2-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PKG_SYSREQS_PLATFORM"</span>))</span>
<span id="cb2-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warning</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Windows is not support by pak"</span>)</span>
<span id="cb2-18">}</span></code></pre></div></div>
</section>
<section id="optionally-recreate-the-environment-on-another-server-using-renv-and-pak" class="level3">
<h3 class="anchored" data-anchor-id="optionally-recreate-the-environment-on-another-server-using-renv-and-pak">Optionally, recreate the environment on another server using renv and pak</h3>
<pre><code>cp rserver/renv.lock /new-location 

cd /new-location &amp;&amp; \
    echo -e 'options(renv.config.pak.enabled=TRUE)\noptions(repos=c(CRAN="https://packagemanager.posit.co/cran/__linux__/rhel9/2025-03-10")) Sys.getenv("PKG_SYSREQS_PLATFORM" &gt; .Rprofile &amp;&amp; \
    R -q -e 'install.packages(c("renv"))' &amp;&amp; \
    R -q -e 'renv::activate()' &amp;&amp; \
    R -q -e 'renv::restore()'</code></pre>
</section>
<section id="find-the-installed-packages" class="level3">
<h3 class="anchored" data-anchor-id="find-the-installed-packages">Find the installed packages</h3>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(jsonlite)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb4-3">my_renvlock <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromJSON</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"renv.lock"</span>)</span>
<span id="cb4-4"></span>
<span id="cb4-5">pkgs_df<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(my_renvlock<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Packages, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enframe</span>(.) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Version"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(value)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>())</span></code></pre></div></div>
</section>
<section id="find-the-system-dependencies-for-those-installed-packages" class="level3">
<h3 class="anchored" data-anchor-id="find-the-system-dependencies-for-those-installed-packages">Find the system dependencies for those installed packages</h3>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">deps<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>pak<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_sysreqs</span>(pkgs_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Package, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">upgrade =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sysreqs_platform=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PKG_SYSREQS_PLATFORM"</span>))</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the commands to run to install system deps to support the package environment</span></span>
<span id="cb5-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(deps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pre_install,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(deps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pre_install),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(deps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>install_scripts,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(deps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>install_scripts,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(deps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>post_install,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(deps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>post_install),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div></div>
</section>
<section id="alternatively-find-the-most-common-package-downloaded-from-package-manager-and-support-those" class="level3">
<h3 class="anchored" data-anchor-id="alternatively-find-the-most-common-package-downloaded-from-package-manager-and-support-those">Alternatively, find the most common package downloaded from package manager and support those</h3>
<p>Credit: <a href="https://github.com/rstudio/rstudio-pro/issues/6536#issuecomment-2694317773" class="uri">https://github.com/rstudio/rstudio-pro/issues/6536#issuecomment-2694317773</a></p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(httr)</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(jsonlite)</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(pak)</span>
<span id="cb6-4"></span>
<span id="cb6-5">base_url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://packagemanager.posit.co/__api__/metrics/packages"</span></span>
<span id="cb6-6">query_params <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb6-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_sort"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"count"</span>,</span>
<span id="cb6-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_order"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"desc"</span>,</span>
<span id="cb6-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_days"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>,</span>
<span id="cb6-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_sourceType"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>,</span>
<span id="cb6-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_limit"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb6-12">)</span>
<span id="cb6-13"></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make the GET request</span></span>
<span id="cb6-15">response <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GET</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> base_url, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">query =</span> query_params)</span>
<span id="cb6-16"></span>
<span id="cb6-17"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">status_code</span>(response) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>) {</span>
<span id="cb6-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse the JSON content</span></span>
<span id="cb6-19">  content <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">content</span>(response, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>)</span>
<span id="cb6-20">  data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromJSON</span>(content)</span>
<span id="cb6-21">  </span>
<span id="cb6-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set platform name ()</span></span>
<span id="cb6-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.setenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PKG_SYSREQS_PLATFORM"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rockylinux-9"</span>)</span>
<span id="cb6-24">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># extract system reqs using pak</span></span>
<span id="cb6-25">  deps<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>pak<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pkg_sysreqs</span>(data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name)</span>
<span id="cb6-26">  </span>
<span id="cb6-27">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print commands</span></span>
<span id="cb6-28">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(deps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pre_install,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(deps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pre_install),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-29">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(deps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>install_scripts,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(deps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>install_scripts,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-30">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(deps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>post_install,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(deps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>post_install),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-31">  </span>
<span id="cb6-32">} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb6-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error: Unable to fetch data from P3M. Status code:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">status_code</span>(response), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-34">}</span></code></pre></div></div>


</section>
</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/system-dependencies-r.html</guid>
  <pubDate>Wed, 21 May 2025 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Using SAML and SCIM with EntraID with Posit Team</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/saml-entraid-posit-team.html</link>
  <description><![CDATA[ 






<section id="configuring-azure-entraid-for-saml-auth-in-workbench-with-scim-for-user-provisioning-and-connect-no-user-provisioning-ui-access-only" class="level1">
<h1>Configuring Azure EntraID for SAML Auth in Workbench (with SCIM for user provisioning) and Connect (no user provisioning, UI access only)</h1>
<p>To configure Microsoft Entra ID for SAML, both the software address and an additional path, if being used, must be known. If there is not an additional path being served from then omit that from the below instructions. In addition Azure requires a secure connection, and so a valid SSL certificate (cannot be self-signed) is needed.</p>
<section id="networking-requirements" class="level2">
<h2 class="anchored" data-anchor-id="networking-requirements">Networking requirements</h2>
<p>Relevant cheat sheet in docs: <a href="https://docs.posit.co/getting-started/networking.html">https://docs.posit.co/getting-started/networking.html</a></p>
<p>Getting info from azure is on a push basis for SCIM provisioning, so we need connectivity open on port 443 via the express route or however so there is access. In order for authentication via SAML and Azure to work these ports need to be enabled:</p>
<ul>
<li>443 (for https)</li>
</ul>
<p>Networking access is needed between the Connect and Workbench servers and the Azure service.</p>
<p>Connect will also need web sockets enabled. Will be needed for each of the redirects (as detailed in the lower section).</p>
</section>
<section id="system-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="system-dependencies">System dependencies</h2>
<p>On Rhel9:</p>
<pre><code>yum install -y oddjob oddjob-mkhomedir</code></pre>
</section>
<section id="ssl-requirements" class="level2">
<h2 class="anchored" data-anchor-id="ssl-requirements">SSL requirements</h2>
<p>Azure restricts to only using https addresses, not http, for doing redirects and authentication via API. A SSL certificate must be installed on each server. This SSL cert must be recognizable by Azure, meaning that it can’t be an internal CA.</p>
<p>Does the cert need to be installed on the server, or does installing it for the prox work? It just needs the “front door” address to have HTTPS, if running with an App gateway, then you only need SSL on that load balancer/proxy.</p>
<section id="workbench" class="level3">
<h3 class="anchored" data-anchor-id="workbench">Workbench</h3>
<pre><code>openssl req -new -key $URL.key -out $URL.csr -config $URL.cnf
openssl genrsa -out $URL.key 2048</code></pre>
<pre><code>#-----------------------------------------------------------------------------------------#
# HTTPS Configuration Section
#
# The certificate key should be owned by rstudio and have perms: sudo chmod 600 /var/certs/rstudio.key
# Unfortunately at this time, RStudio doesn't support a passphrase on the SSL cert.
ssl-enabled=1
ssl-certificate-key=/path/to/key/posit.key
ssl-certificate=/path/to/certificate/posit.crt
ssl-protocols=TLSv1.2 TLSv1.3</code></pre>
<pre><code>openssl x509 -noout -modulus -in /etc/rstudio/fullchain.cer | openssl md5
openssl rsa -noout -modulus -in /etc/rstudio/fullchain.key | openssl md5</code></pre>
</section>
<section id="connect" class="level3">
<h3 class="anchored" data-anchor-id="connect">Connect</h3>
<pre><code>nano root.crt ← paste contents of root certificate 
sudo cp root.crt /etc/pki/ca-trust/source/anchors/
sudo update-ca-trust
trust list | grep -i &lt;name&gt;</code></pre>
<pre><code>[HTTPS]
; https://docs.posit.co/connect/admin/appendix/configuration/#HTTPS
; RStudio Connect will listen on this network address for HTTPS connections.
Listen = :443
;Path to a PEM encoded TLS certificate file. If the certificate is signed by a certificate authority,
;the certificate file should be the concatenation of the server's certificate followed by the CA's certificate
Certificate =  /path/to/certificate/connect.crt
;Path to a PEM encoded private key file corresponding to the certificate specified with
Key = /path/to/key/connect.key
; Force HTTPS
; https://docs.posit.co/connect/admin/security/#guaranteeing-https
;Permanent = True
MinimumTLS = 1.2</code></pre>
</section>
</section>
<section id="create-the-azure-applications" class="level2">
<h2 class="anchored" data-anchor-id="create-the-azure-applications">Create the Azure applications</h2>
<p>Two separate applications inside Azure need to be created to support authentication on Connect and Workbench (different reply url assertion consumer service url’s).</p>
<ul>
<li><p>Through the marketplace: Manage → enterprise apps → add a new one → search for rstudio</p></li>
<li><p><strong>Rstudio-server-pro SAML authentication</strong> - is what you want for Workbench (refer to <a href="https://docs.posit.co/ide/server-pro/authenticating_users/integrated_providers/azure_ad_saml.html">here</a>)</p></li>
<li><p><strong>Rstudio Connect SAML authentication</strong> - is what you want for Connect (refer to <a href="https://docs.posit.co/ide/server-pro/authenticating_users/integrated_providers/azure_ad_saml.html">here</a>)</p></li>
</ul>
<p>See the <a href="https://learn.microsoft.com/en-us/entra/identity/app-provisioning/customize-application-attributes">Customize user provisioning attribute mappings tutorial</a> in Microsoft’s documentation for more information on adding custom user attributes in Microsoft Entra ID.</p>
<section id="create-the-azure-application-for-workbench" class="level3">
<h3 class="anchored" data-anchor-id="create-the-azure-application-for-workbench">Create the Azure application for Workbench</h3>
<p>Refer to <a href="https://docs.posit.co/ide/server-pro/authenticating_users/integrated_providers/azure_ad_saml.html">here</a></p>
<p>For the URL’s if there is an additional path that Workbench is being served from then it should be added in the <code>&lt;path&gt;</code> field, otherwise that can be omitted. For example, the URL would be&nbsp;<code>https://&lt;RSW-SERVER&gt;/saml/metadataif</code> there isn’t an additional path.&nbsp;</p>
<p>In the&nbsp;Identifier (Entity ID)&nbsp;section, click&nbsp;Add identifier&nbsp;and in the&nbsp;Enter an identifier&nbsp;text box, type a URL using the following pattern: <code>https://&lt;RSW-SERVER&gt;/&lt;PATH&gt;/saml/metadata.</code></p>
<p>In the&nbsp;Reply URL (Assertion Consumer Server URL)&nbsp;section, click&nbsp;Add reply URL&nbsp;and type the URL using the following pattern: <code>https://&lt;RSW-SERVER&gt;/&lt;PATH&gt;/saml/acs.</code></p>
</section>
<section id="configure-workbench-with-saml" class="level3">
<h3 class="anchored" data-anchor-id="configure-workbench-with-saml">Configure Workbench with SAML</h3>
<p>Relevant page in docs: <a href="https://docs.posit.co/ide/server-pro/authenticating_users/saml_sso.html">https://docs.posit.co/ide/server-pro/authenticating_users/saml_sso.html</a> and <a href="https://docs.posit.co/ide/server-pro/authenticating_users/integrated_providers/azure_ad_saml.html">https://docs.posit.co/ide/server-pro/authenticating_users/integrated_providers/azure_ad_saml.html</a></p>
<p>Enable SAML auth:</p>
<pre><code>#/etc/rstudio/rserver.conf
auth-saml=1</code></pre>
<p>Complete the SAML section in the config to match the user attributes from EntraID:</p>
<pre><code>#/etc/rstudio/rserver.conf
auth-saml=1
auth-saml-metadata-url=&lt;federation-metadata-URI&gt;
auth-saml-sp-name-id-format=emailaddress
auth-saml-sp-attribute-username=NameID
auth-saml-sp-base-uri=&lt;RStudio-Server-URI&gt;
auth-saml-idp-post-binding=1</code></pre>
<p>Create the auth profile:</p>
<pre><code>sudo authselect create-profile pwb --base-on=minimal</code></pre>
<p>Edit the /etc/authselect/custom/pwb/nsswitch.conf file and add the pwb entry:</p>
<pre><code>#/etc/authselect/custom/pwb/nsswitch.conf
passwd:     files {if "with-altfiles":altfiles }systemd pwb {exclude if "with-custom-passwd"}
group:      files {if "with-altfiles":altfiles }systemd pwb {exclude if "with-custom-group"}
shadow:     files pwb                                       {exclude if "with-custom-shadow"}</code></pre>
<p>Enable the profile:</p>
<pre><code>authselect select custom/pwb --with-mkhomedir --force</code></pre>
<p>Note: At this time the docs aren’t accurate and say to run <code>sudo authselect select pwb --with-mkhomedir</code> instead of <code>authselect select custom/pwb --with-mkhomedir --force</code></p>
<p>Make sure the odd job service is active:</p>
<pre><code>systemctl enable --now oddjobd.service</code></pre>
<p>Prevent NSCD from caching information:</p>
<pre><code>vi /etc/nscd.conf
enable-cache passwd no
enable-cache group no
sudo systemctl restart nscd
ps -ef | grep nsc</code></pre>
</section>
<section id="configure-scim-provisioning-for-workbench" class="level3">
<h3 class="anchored" data-anchor-id="configure-scim-provisioning-for-workbench">Configure SCIM Provisioning for Workbench</h3>
<p>Relevant page in docs: <a href="https://docs.posit.co/ide/server-pro/user_provisioning/azure.html">https://docs.posit.co/ide/server-pro/user_provisioning/azure.html</a></p>
<p>Complete the user provisioning section in the config to match the user attributes from EntraID (modify the user-provisioning-start-uidas needed, might not matter and can be left off) :</p>
<pre><code>#/etc/rstudio/rserver.conf
user-provisioning-enabled=1
user-provisioning-start-uid=2000</code></pre>
</section>
<section id="configuring-the-scim-provisioning-token-for-workbench" class="level3">
<h3 class="anchored" data-anchor-id="configuring-the-scim-provisioning-token-for-workbench">Configuring the SCIM Provisioning token for Workbench</h3>
<p>Relevant page in docs: <a href="https://docs.posit.co/ide/server-pro/user_provisioning/managing_tokens.html">https://docs.posit.co/ide/server-pro/user_provisioning/managing_tokens.html</a></p>
<p>For SCIM provisioning&nbsp;and the token, I believe you will also need user provisioning turned on. You can do this with:&nbsp;</p>
<pre><code>#rserver.conf
user-provisioning-enabled=1</code></pre>
<p>Create a token:</p>
<pre><code>sudo rstudio-server user-service generate-token "My Token"</code></pre>
<p>Input the token through the Azure profile.</p>
<p>Provision a user by having a user log all the way in to Workbench.</p>
<p>Test it from command line:</p>
<pre><code>/usr/lib/rstudio-server/bin/pamtester --verbose rstudio &lt;user&gt; authenticate acct_mgmt setcred open_session close_session</code></pre>
</section>
<section id="create-the-azure-application-for-connect" class="level3">
<h3 class="anchored" data-anchor-id="create-the-azure-application-for-connect">Create the Azure application for Connect</h3>
<p>Refer to <a href="https://docs.posit.co/ide/server-pro/authenticating_users/integrated_providers/azure_ad_saml.html">here</a></p>
</section>
<section id="configure-connect-with-saml" class="level3">
<h3 class="anchored" data-anchor-id="configure-connect-with-saml">Configure Connect with SAML</h3>
<p>Relevant page in docs: <a href="https://docs.posit.co/connect/admin/authentication/saml-based/entra-id-saml/">https://docs.posit.co/connect/admin/authentication/saml-based/entra-id-saml/</a></p>
<pre><code>#; /etc/rstudio-connect/rstudio-connect.gcfg

[Server]
Address = https://posit.company.com

[Authentication]
Provider = "saml"

[SAML]
IdPMetaDataURL = "https://login.microsoftonline.com/{tenantid}/federationmetadata/2007-06/federationmetadata.xml?appid={appid}"
IdPAttributeProfile = azure
; Enable this for a better user experience, unless
; managing a large number of groups is a concern:
;GroupsAutoProvision = true
; When troubleshooting a SAML problem, more verbose logging
; is produced by uncommenting the following line:
;Logging = true</code></pre>
<p>EntraID limits group membership to 150. If a user is a member of more than 150 groups than their group list will be concatenated, potentially missing important ones that are needed inside Connect.</p>
<p>Register on first login can be disabled with:</p>
<pre><code>#; /etc/rstudio-connect/rstudio-connect.gcfg
[SAML]
RegisterOnFirstLogin = false</code></pre>
<p>In that case, users need to be created via the Connect API: <a href="https://docs.posit.co/connect/api/#post-/v1/users">https://docs.posit.co/connect/api/#post-/v1/users</a></p>
<pre><code>#!/bin/bash

API_KEY="your api key"

DATA='{
  "email": "john_doe@posit.co",
  "first_name": "John",
  "last_name": "Doe",
  "password": "",
  "unique_id": "string",
  "user_must_set_password": false,
  "user_role": "viewer",
  "username": "john_doe"
}'

curl --silent --show-error -L --max-redirs 0 --fail \
    -X POST \
    -H "Authorization: Key ${API_KEY}" \
    --data-raw "${DATA}" \
    "https://connect.example.com/__api__/v1/users"</code></pre>
</section>
</section>
<section id="restart" class="level2">
<h2 class="anchored" data-anchor-id="restart">Restart</h2>
<section id="workbench-1" class="level3">
<h3 class="anchored" data-anchor-id="workbench-1">Workbench</h3>
<pre><code>sudo rstudio-server restart</code></pre>
</section>
<section id="connect-1" class="level3">
<h3 class="anchored" data-anchor-id="connect-1">Connect</h3>
<pre><code>sudo systemctl restart rstudio-connect</code></pre>
</section>
</section>
<section id="assertions" class="level2">
<h2 class="anchored" data-anchor-id="assertions">Assertions</h2>
<p>This image shows the needed assertions on the left, and the assertions associated with a test user on the right. Test user is failing to log into Workbench due to missing assertions. Once the last name and email were added logins were successful.</p>
<p>The list of assertions expected by Connect are documented <a href="https://docs.posit.co/connect/admin/authentication/saml-based/entra-id-saml/#the-azure-profile">here</a>:</p>
<pre><code>; /etc/rstudio-connect/rstudio-connect.gcfg
[SAML]
UniqueIdAttribute = NameID
NameIDFormat = persistent
UsernameAttribute = http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name
FirstNameAttribute = http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname
LastNameAttribute = http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname
EmailAttribute = http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress
GroupsAttribute = http://schemas.microsoft.com/ws/2008/06/identity/claims/groups</code></pre>
</section>
<section id="troubleshooting" class="level2">
<h2 class="anchored" data-anchor-id="troubleshooting">Troubleshooting</h2>
<p>If no useful messages are showing in the Connect or Workbench logs, it could be an issue with the auth provider configuration, URL’s, or network access. Turning on debug logging may help with errors outside of the auth provider configuration.</p>
</section>
<section id="but-what-about-proxies" class="level2">
<h2 class="anchored" data-anchor-id="but-what-about-proxies">But what about proxies?</h2>
<p>Example endpoint for app: whole host name including proxy information scim v2, for example <a href="https://workbench-hostname">https://workbench-hostname</a>&gt;/scim/v2. Example in the case they are running with a proxy at root wb: <a href="https://%3CWorkbench%20URL%3E/%3CPATH%3E/scim/v2">https://<workbench url="">/<path>/scim/v2</path></workbench></a></p>
<section id="workbench-2" class="level3">
<h3 class="anchored" data-anchor-id="workbench-2">Workbench</h3>
<p>Relevant page in docs: <a href="https://docs.posit.co/ide/server-pro/access_and_security/running_with_a_proxy.html">https://docs.posit.co/ide/server-pro/access_and_security/running_with_a_proxy.html</a> and <a href="https://docs.posit.co/ide/server-pro/authenticating_users/saml_sso.html#proxy-considerations">https://docs.posit.co/ide/server-pro/authenticating_users/saml_sso.html#proxy-considerations</a></p>
<p>The reverse proxy should be correctly forwarding the connection and the certificate on the proxy is publicly trusted. Workbench needs to know it’s running on HTTPS however. Generally that’s done by the proxy forwarding the X-Forward-Proto header as https.</p>
<p>We have an example here showing setting the X-Forward-Proto&nbsp;headers, an example without SSL is described as “If the Nginx proxy is using SSL and Workbench has ssl-enabled=0” :&nbsp;<a href="https://docs.posit.co/ide/server-pro/access_and_security/running_with_a_proxy.html#nginx-configuration">https://docs.posit.co/ide/server-pro/access_and_security/running_with_a_proxy.html#nginx-configuration</a> &nbsp;</p>
<p>The documentation default is:&nbsp;</p>
<pre><code>#/etc/rstudio/rserver.conf
www-root-path=/rstudio</code></pre>
<p>However, in the proxy configuration you are actually being hosted on /wb not rstudio so I believe it should look like:&nbsp;</p>
<pre><code>#/etc/rstudio/rserver.conf
www-root-path=/wb</code></pre>
<p>I believe in your URL to your tenant that it will need the /wb prefix as well, IE instead of &lt;https://<workbench url="">/scim/v2&gt; it should be&nbsp;&lt;https://<workbench url="">/<path>/scim/v2&gt;</path></workbench></workbench></p>
<p>The path prefix will need to be propagated throughout, what comes to mind is also the ACS URL configuration in the Enterprise App which is currently pointing to&nbsp;&lt;https://<workbench url="">/saml/acs&gt;but should be &lt;https://<workbench url="">/<path>/saml/acs&gt;</path></workbench></workbench></p>
</section>
<section id="connect-2" class="level3">
<h3 class="anchored" data-anchor-id="connect-2">Connect</h3>
<p>Relevant page in docs: <a href="https://docs.posit.co/connect/admin/proxy/">https://docs.posit.co/connect/admin/proxy/</a> and <a href="https://docs.posit.co/connect/admin/authentication/saml-based/entra-id-saml/index.html#authenticating-with-saml-using-multiple-network-aliases">https://docs.posit.co/connect/admin/authentication/saml-based/entra-id-saml/index.html#authenticating-with-saml-using-multiple-network-aliases</a></p>
<p>Connect needs web sockets to be enabled.</p>
<pre><code># Support proxying of web-socket connections
map $http_upgrade $connection_upgrade {
  default upgrade;
  ''      close;
}</code></pre>
</section>
</section>
<section id="what-happens-when-users-leave-the-organization" class="level2">
<h2 class="anchored" data-anchor-id="what-happens-when-users-leave-the-organization">What happens when users leave the organization?</h2>
<p>When users leave the organization, or removed from the application, than their account will be locked. This is the advantage of configuring it with SCIM / integrating directly with the authentication provider. Any home directories, deployed content, etc will remain on the server and can be cleaned up using any internal policies.</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/saml-entraid-posit-team.html</guid>
  <pubDate>Wed, 07 May 2025 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Validation</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/validation.html</link>
  <description><![CDATA[ 






<section id="frame-of-mind" class="level2">
<h2 class="anchored" data-anchor-id="frame-of-mind">Frame of mind</h2>
<p>My colleagues recommendation while reading these resources:</p>
<blockquote class="blockquote">
<p>Put yourself in a mental model that you are at a certain company and you want to build a whole new IT system that’s addressing certain unmet needs. Due to the nature of the use case you need to use this CSV (Computer System Validation) approach. Your goal is to meet user requirements while keeping risks under control.</p>
</blockquote>
<blockquote class="blockquote">
<p>As an exercise, think about can you come up with some guiding principles on how to set up Posit Team to make it GXP compliant. For example, what happens if deploy a shiny app and what part of processes are happening there when it comes to GXP, CSV, and such. The icing on the cake is how can we change the Connect configuration to make it compliant.</p>
</blockquote>
</section>
<section id="definitions" class="level2">
<h2 class="anchored" data-anchor-id="definitions">Definitions</h2>
<p><strong>DQ</strong> Design Qualification - a design is assessed and documented to make sure it meets user requirements and regulatory standards (typically doesn’t apply to Posit software)</p>
<p><strong>IQ</strong> Installation Qualification - verifies that equipment and systems are installed correctly according to the manufacturers instructions</p>
<p><strong>OQ</strong> Operational Qualification - verifies that a system performs as required over time, typically requires implementation of control systems, alarms, and testing of functions under different conditions</p>
<p><strong>PQ</strong> Performance Qualification - verifies the system performance while operating under normal operating conditions, typically involves real production environments or batches and monitors quality outcomes</p>
<p><strong>CSV</strong> Computer System Validation is a form of software validation to ensure that a regulated computerized system is as safe, secure, and reliable as paper based records.</p>
<p><strong>URD/URS</strong> User Requirements Document or User Requirements Specification specifies what the user expects the software to be able to do.</p>
<p><strong>GXP</strong> A set of principles that govern the use of various systems and recommend the implementation of strict controls</p>
<p><strong>GMP</strong> Good Manufacturing Practices, guidelines that govern the manufacture and sale of food, beverages, cosmetics, pharmaceuticals, dietary supplements, and medical devices</p>
<p><strong>SCE</strong> Statistical Compute Environment - typically computerized systems where late-stage clinical development workloads run</p>
<p><strong>SOP</strong> Standard Operating Procedure is a set of repeatable steps and instructions that an organization can follow in order to achieve a common activity.</p>
<p><strong>Production</strong> Day to day system for productive use. Change control for system-wide changes is in place.</p>
<p><strong>Development</strong> Small replica of the production system. No change control. Used for IT internal testing of new features/changes.</p>
<p><strong>Test/Staging/QA</strong> Small replica of the production system. Fully change controlled. Used to allow for business testing before rolling out the change to Production.</p>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<section id="start-here" class="level3">
<h3 class="anchored" data-anchor-id="start-here">Start here</h3>
<p>Internal to Posit resources:</p>
<ul>
<li><p>Computerized system validation - google this - Michael uploaded in the pharma task force github a summarized csv - <a href="https://github.com/rstudio/pharma-taskforce/blob/main/doc/Overview/CSV.md" class="uri">https://github.com/rstudio/pharma-taskforce/blob/main/doc/Overview/CSV.md</a></p></li>
<li><p>Michael had a post in the Life science and healthcare channel - posted pdf document - <a href="https://positpbc.slack.com/archives/CQ55EG3U7/p1742983108413489" class="uri">https://positpbc.slack.com/archives/CQ55EG3U7/p1742983108413489</a></p></li>
<li><p>This post from MichaelM is useful about validated environments: <a href="https://positpbc.slack.com/archives/C2P7MTJKE/p1746448154247119?thread_ts=1746118620.637929&amp;cid=C2P7MTJKE" class="uri">https://positpbc.slack.com/archives/C2P7MTJKE/p1746448154247119?thread_ts=1746118620.637929&amp;cid=C2P7MTJKE</a></p></li>
<li><p>Another internal post about the limitations of renv - <a href="https://positpbc.slack.com/archives/C2P7MTJKE/p1746653854586919?thread_ts=1746118620.637929&amp;cid=C2P7MTJKE" class="uri">https://positpbc.slack.com/archives/C2P7MTJKE/p1746653854586919?thread_ts=1746118620.637929&amp;cid=C2P7MTJKE</a></p></li>
</ul>
</section>
<section id="as-a-vendor---disclaimer" class="level3">
<h3 class="anchored" data-anchor-id="as-a-vendor---disclaimer">As a vendor - disclaimer</h3>
<p>We as posit are not in the business of validating packages. We can talk about how to do it high level but its up to them to build such a process or point them at Atorus OpenVal (which doesn’t use Package Manager), or Jumping Rivers Litmus system.</p>
</section>
<section id="now-add-some-more-documents" class="level3">
<h3 class="anchored" data-anchor-id="now-add-some-more-documents">Now add some more documents</h3>
<p>Phil resources: (See Trevor chat)</p>
<p>Posit pro products (still says Rstudio everything): <a href="https://posit.co/wp-content/uploads/2024/11/rstudio_compliance_validation.pdf?_gl=1*1nenc0g*_ga*MTI1ODM3MDExLjE3MzY2MTk0MTQ.*_ga_2C0WZ1JHG0*MTc0NjIwNDQyOC4zNjQuMC4xNzQ2MjA0NDM1LjAuMC4w" class="uri">https://posit.co/wp-content/uploads/2024/11/rstudio_compliance_validation.pdf?_gl=1*1nenc0g*_ga*MTI1ODM3MDExLjE3MzY2MTk0MTQ.*_ga_2C0WZ1JHG0*MTc0NjIwNDQyOC4zNjQuMC4xNzQ2MjA0NDM1LjAuMC4w</a></p>
<p>R validation: <a href="https://www.r-project.org/doc/R-FDA.pdf" class="uri">https://www.r-project.org/doc/R-FDA.pdf</a></p>
<p>Tidyverse, tidymodels: <a href="https://posit.co/wp-content/uploads/2024/11/validation-tidy.pdf?_gl=1*1rog1io*_ga*MTI1ODM3MDExLjE3MzY2MTk0MTQ.*_ga_2C0WZ1JHG0*MTc0NjIwNDQyOC4zNjQuMC4xNzQ2MjA0NDI4LjAuMC4w" class="uri">https://posit.co/wp-content/uploads/2024/11/validation-tidy.pdf?_gl=1*1rog1io*_ga*MTI1ODM3MDExLjE3MzY2MTk0MTQ.*_ga_2C0WZ1JHG0*MTc0NjIwNDQyOC4zNjQuMC4xNzQ2MjA0NDI4LjAuMC4w</a></p>
<p>Shiny and rmarkdown:<a href="https://posit.co/wp-content/uploads/2024/11/validation-shiny-rmd.pdf?_gl=1*1nenc0g*_ga*MTI1ODM3MDExLjE3MzY2MTk0MTQ.*_ga_2C0WZ1JHG0*MTc0NjIwNDQyOC4zNjQuMC4xNzQ2MjA0NDM1LjAuMC4w" class="uri">https://posit.co/wp-content/uploads/2024/11/validation-shiny-rmd.pdf?_gl=1*1nenc0g*_ga*MTI1ODM3MDExLjE3MzY2MTk0MTQ.*_ga_2C0WZ1JHG0*MTc0NjIwNDQyOC4zNjQuMC4xNzQ2MjA0NDM1LjAuMC4w</a></p>
</section>
<section id="finally-lets-check-out-the-stories-on-the-posit-blog" class="level3">
<h3 class="anchored" data-anchor-id="finally-lets-check-out-the-stories-on-the-posit-blog">Finally lets check out the stories on the Posit blog</h3>
<p><a href="https://posit.co/blog/publishing-a-shiny-app-in-r-with-clinical-trial-data-to-posit-connect/">Deploying a Shiny App in R using clinical trial data with Posit Connect</a></p>
<p><a href="https://posit.co/blog/team-101-posit-workbench/">Securing Workbench for Clinical Workflows, with JnJ</a></p>
<p><a href="https://posit.co/blog/jnj-posit-live-event-march-2025-qa/">Johnson &amp; Johnson x Posit Live Event March 2025 Q&amp;A</a></p>
<p><a href="https://posit.co/blog/roche-posit-live-event-sept-2024-qa/">Roche x Posit Live Event Sept 2024 Q&amp;A</a></p>
<p><a href="https://posit.co/blog/roches-first-end-to-end-r-journey-to-submission/">Roche’s end-to-end R submission for a new drug application</a></p>
<p><a href="https://posit.co/blog/webr-fda-pilot/">How pharma is pioneering WebAssembly with webR &amp; Shiny for FDA clinical trial submissions</a></p>
</section>
<section id="tools-that-will-help-make-this-easier" class="level3">
<h3 class="anchored" data-anchor-id="tools-that-will-help-make-this-easier">Tools that will help make this easier</h3>
<ul>
<li><a href="https://posit.co/products/enterprise/package-manager/">Posit Package Manager</a></li>
<li>R package <a href="https://www.jumpingrivers.com/blog/should-i-use-your-r-pkg/">litmus</a> by Jumping Rivers and service</li>
<li>R package <a href="https://sonatype-nexus-community.github.io/oysteR/">oysteR</a> by Sonatype Nexus for checking package vulnerabilities against the OSS index</li>
<li>R package <a href="https://pak.r-lib.org/">pak</a></li>
<li>R package <a href="https://pharmar.github.io/riskmetric/">riskmetric</a></li>
<li><a href="https://www.atorusresearch.com/openval/">Atorus OpenVal</a></li>
<li><a href="https://insightsengineering.github.io/teal.logger/latest-tag/index.html">teal.logger</a> for logging actions taken inside a shiny app</li>
</ul>
</section>
</section>
<section id="take-aways" class="level2">
<h2 class="anchored" data-anchor-id="take-aways">Take aways</h2>
<section id="what-has-worked-in-the-past" class="level3">
<h3 class="anchored" data-anchor-id="what-has-worked-in-the-past">What has worked in the past?</h3>
<p>There has been one successfully submission of a shiny app to the FDA and it was stripped down so that there weren’t any interactive elements and it ran via WASM. While aditional monitoring and logging is really exciting, and I hope is something we can see in the future, at the moment it may be worth being grounded that what a validated output may look like will be more like a compendium of static documents that are navigated via a shiny app rather than a true interactive application.</p>
</section>
<section id="what-are-the-guiding-principles" class="level3">
<h3 class="anchored" data-anchor-id="what-are-the-guiding-principles">What are the guiding principles?</h3>
<p>They key guiding principle is to understand what your use case is and where risks could be introduced.</p>
<p>Common risk areas:</p>
<ul>
<li>Was it installed correctly?</li>
<li>When changes are made, IE upgrades to packages or software, how would any newly introduced risks be detected?</li>
<li>Is the way users will use the system understood and can be turned into tests in order to validate the system?</li>
<li>How is data or code being handled so that things like patient data are handled securely?</li>
</ul>
<p>Whenever there is a change to the system it needs to through either a full validation or mini-validation</p>
</section>
<section id="developing-a-sop" class="level3">
<h3 class="anchored" data-anchor-id="developing-a-sop">Developing a SOP</h3>
<ul>
<li>New system is identified for CSV based on a risk assessment (collaboration between QA, Business and IT)</li>
<li>URS (USer Requirement Specifications) are drafted (typically in the form of user stories) (business)</li>
<li>Design specifications are produced where technical design and identified business needs are aligned (IT)</li>
<li>The Validation plan is created that documents the overall solution and how the system will be validated (IT)</li>
<li></li>
</ul>
<section id="managing-installations" class="level4">
<h4 class="anchored" data-anchor-id="managing-installations">Managing installations</h4>
<p>The name of the game here is transparency, security, and reproducability. Whether using docker, singularity, k8s, slurm, a load balanced servers, or a single server it doesn’t really matter as long as all steps are followed and documented.</p>
</section>
<section id="upgrades" class="level4">
<h4 class="anchored" data-anchor-id="upgrades">Upgrades</h4>
<p>When upgrade, security risks with old OS, then need to understand where the risks are and have tests and re-validate to make sure same results before and after the upgrade. Qualification documentation will allow you to replicate the system the same as it was back then when you are asked years later to re-do some piece of the data analysis from a health authority. Your documentation needs to be in a state where you can replicate it. Money at that point is no object because the risk of losing a submissions is monumental.</p>
</section>
<section id="managing-packages" class="level4">
<h4 class="anchored" data-anchor-id="managing-packages">Managing packages</h4>
<p>Sophisticated math libraries for linear algebra like BLAS then those things are so performance optimized that they use different code for diff OS’s. You could get different results.</p>
<p>Need a process that gives assurance that a package is ready for use - use atorus openval, preinstall packages and test them in their respective locations, or if you allow the users to allow packages then every user is responsible for testing, validating their stuff each and every time.</p>
<p>Strong misconception - that technology can solve all the problems. People will always try to find loopholes, no matter how clever you configure it. That’s the important thing with business processes. If they follow the processes then they will be compliant, otherwise they will be out of compliance and there is nothing IT can do about it.</p>
<p>Docker images are acting as a site library in a way - installing packages into a direct instance where deploying packages. Could have been an EC2 just the same. Using a site library. Pre-install all the needed packages and dependencies, run testing on those packages and document that.</p>
<p>current is tested-r package repositories that has meta data - intentionally called tested not validated because it is all automated but wouldn’t recommend all to do because some of the packages have a higher risk, if serious about risk mitigation you would want to a different level of testing for high risk packages than low risk packages. In a real world not possible to automate everything. A human being still needs to accept those.</p>
<p>Litmus is 30+ different risk numbers weighted together</p>
<p>Testing needs to be done every time you install the package with that given version. Any change needs to be documented. Need to do an impact analysis, will inform how many other things need to be tested again. Site library with 100 packages and install 1 more then need to asses how other packages will be impacted, do we need to upgrade the other packages, test and so on and so forth.</p>
<p>When user installs would need to rerun test suite, produce suite of documentation, if allowed to install directly otherwise site library is a huge pro because do the tests and documentation once for all users.</p>
<p>Code is a change to the system also, need to justify the changes too. Critical analyses sometimes also have two different teams that are segregated and do the same analysis independently to make sure risk of making wrong decision is mitigated - double programming.</p>
<p>This is leaning on the cautious side of things.</p>
<p>Need repository that you can rely on in 3-5 maybe 10 years, if trust local package manager more than cran mirrors then useful for that purpose. meta data is cosmetics.</p>
<section id="why-not-renv-or-just-installing-packages-into-user-home-directories" class="level5">
<h5 class="anchored" data-anchor-id="why-not-renv-or-just-installing-packages-into-user-home-directories">Why not renv? Or just installing packages into user home directories?</h5>
<p><a href="https://rstudio.github.io/renv">renv</a> is a very common and useful R package that helps users maintain project specific package environments. It is very similar in function to Python <code>venv</code> environments.</p>
<p><code>renv</code> gives you a snapshot in time for your project for which packages you had and what their versions were. This is very useful and an important part of reproduceability.</p>
<p>Unfortunately using <code>renv</code> on its own without other pieces for how packages are installaed can lead to breaking qualification requirements. Re-downloading packages would introduce risk. Every time a package is downloaded that constitutes a change in the system and needs to go through a validation process to ensure that no new risks have been introduced. If that is done once and periodically after, to install packages in a site library, that can be a manageable level of effort. But to do that for every user every time they install a package would be an unreasonable amount of effort.</p>
<p>renv is the answer for knowledge of what packges you used, some level of reproduceability, but if you think about what learned with the CSV stuff. Any package installation on the system constitutes a change, any change needs to be documented tested and approved.</p>
</section>
</section>
</section>
<section id="shiny-application-submissions-to-the-fda" class="level3">
<h3 class="anchored" data-anchor-id="shiny-application-submissions-to-the-fda">Shiny application submissions to the FDA</h3>
<p>The first every shiny submission was done in such a way the FDA was only accepting the app once the team had removed all the interactive elements so it was more like a clickable document in the end.</p>
</section>
<section id="workbench-config-settings" class="level3">
<h3 class="anchored" data-anchor-id="workbench-config-settings">Workbench config settings</h3>
</section>
<section id="connect-config-settings" class="level3">
<h3 class="anchored" data-anchor-id="connect-config-settings">Connect config settings</h3>
</section>
<section id="package-manager-config-settings" class="level3">
<h3 class="anchored" data-anchor-id="package-manager-config-settings">Package Manager config settings</h3>
</section>
</section>
<section id="but-what-about-python" class="level2">
<h2 class="anchored" data-anchor-id="but-what-about-python">But what about Python?</h2>
<ul>
<li><code>pak</code> -&gt; <code>uv</code></li>
<li><code>riskmetric</code> -&gt; no equivalent today</li>
<li><code>renv</code> -&gt; <code>venv</code> (note taken that this is useful for recording package versions, a risk if used to install packages)</li>
<li>Package Manager -&gt; Package Manager</li>
</ul>
<p>I’ve been eyeing:</p>
<ol type="1">
<li><a href="https://pypi.org/project/pip-audit/">pip-audit</a> (uses the data from <a href="https://github.com/pypa/advisory-database">advisory database</a>)</li>
<li>googles <a href="https://github.com/google/osv-scanner">osv-scanner</a> (that uses the data from <a href="http://osv.dev/">osv.dev</a>)</li>
</ol>
<p>But those are just very surface level tools that check if a vulnerability has been detected</p>


</section>

 ]]></description>
  <category>code</category>
  <guid>https://questionable.quarto.pub/blog/work/validation.html</guid>
  <pubDate>Mon, 05 May 2025 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
<item>
  <title>Configuring Jupyter for use with Posit Workbench</title>
  <dc:creator>Lisa </dc:creator>
  <link>https://questionable.quarto.pub/blog/work/Configuring Jupyter.html</link>
  <description><![CDATA[ 






<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>Configuring Jupyter to work on Posit Workbench is very doable, but there are a couple gotchas. Hopefully these steps are useful!</p>
</section>
<section id="install-steps" class="level2">
<h2 class="anchored" data-anchor-id="install-steps">Install steps</h2>
<p>Try following these steps for installing jupyter: <a href="https://docs.posit.co/ide/server-pro/integration/jupyter-standalone.html" class="uri">https://docs.posit.co/ide/server-pro/integration/jupyter-standalone.html</a></p>
<p>This may look like:</p>
<pre><code>## Set variables 
export JUPYTER_PYTHON_VERSION=3.12.4
export JUPYTERLAB_VERSION=4.2.5
export WORKBENCH_JUPYTERLAB_VERSION=1.0

## Install Jupyter 
sudo /opt/python/"${JUPYTER_PYTHON_VERSION}"/bin/pip install jupyterlab=="${JUPYTERLAB_VERSION}" notebook pwb_jupyterlab~="${WORKBENCH_JUPYTERLAB_VERSION}"

## Set the jupyter.conf to the jupyter-exe location
# jupyter.conf
cat &gt; /etc/rstudio/jupyter.conf &lt;&lt;EOF
jupyter-exe=/opt/python/${JUPYTER_PYTHON_VERSION}/bin/jupyter
labs-enabled=1
notebooks-enabled=1
default-session-cluster=Local

EOF</code></pre>
<p>Jupyter ports for HA: FromPort=8888,ToPort=8898</p>
</section>
<section id="troubleshooting" class="level2">
<h2 class="anchored" data-anchor-id="troubleshooting">Troubleshooting</h2>
<p>Uninstall the current version of Jupyter Notebook: <code>pip uninstall jupyter</code></p>
<p>Restart RStudio Server: Restart the RStudio Server to apply the changes:</p>
<p><code>sudo rstudio-server restart</code></p>
<p>Restart Launcher: If you are using the Launcher, restart it as well:</p>
<p><code>sudo rstudio-launcher restart</code></p>
<p>Can you also try to start a notebook manually by running the following from the Linux shell? <code>/opt/python/3.9.14/bin/jupyter notebook</code>. Does that complete as an unprivileged user? What about with sudo? <code>sudo /opt/python/3.9.14/bin/jupyter notebook</code></p>
<p>Similarly, <code>sudo /opt/python/3.9.14/bin/jupyter lab</code></p>
<p>Umask in STIG systems is typically set to <code>0077</code> (on rhel9) which will make the libraries installed under the python version unable to be used by normal users. Set umask to <code>0022</code> and then reinstall python and jupyter to fix this. Alternatively could try to fix the file permissions with the -exec flag and chmod, for example with <code>chmod -R o+rx /opt/python/&lt;version&gt;</code> which would set the permissions to 755 or <code>chmod -R og+rX /opt/python/&lt;version&gt;</code> which gives read permissions to all files but only execute permissions to those that already had execute permissions (typically the owner).</p>
<p>Uninstall Python: <a href="https://docs.posit.co/resources/install-python.html#uninstall" class="uri">https://docs.posit.co/resources/install-python.html#uninstall</a></p>
<p>Re-install Python: <a href="https://docs.posit.co/resources/install-python.html#install-required-dependencies" class="uri">https://docs.posit.co/resources/install-python.html#install-required-dependencies</a></p>
<p>Add Python to the path:</p>
<pre><code># add this to your .bashrc
export PATH=/opt/python/3.11.9/bin:$PATH</code></pre>
<p>Manage kernels: <a href="https://docs.posit.co/ide/server-pro/user/jupyter-lab/guide/jupyter-kernel-management.html" class="uri">https://docs.posit.co/ide/server-pro/user/jupyter-lab/guide/jupyter-kernel-management.html</a></p>
<p>Users can register their own virtual kernel with the ipykernel package running the command (within an activated environment on the CLI/terminal):</p>
<pre><code>python -m ipykernel install --user --name short-name --display-name "Long Name"</code></pre>
<p>Upon launching a new jupyterlab or VS Code session this environment can be selected from this menu.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>python</category>
  <guid>https://questionable.quarto.pub/blog/work/Configuring Jupyter.html</guid>
  <pubDate>Thu, 01 May 2025 06:00:00 GMT</pubDate>
  <media:content url="https://questionable.quarto.pub/blog/work/img/" medium="image"/>
</item>
</channel>
</rss>
