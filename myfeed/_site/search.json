[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Under development, please come back later :)"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "myfeed",
    "section": "",
    "text": "365\n\n\nscience\n\n\n\n\n365 days of hyperfixation\n\n\n\n\n\n\nAug 2, 2022\n\n\nLisa\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n365\n\n\nscience\n\n\n\n\n365 days of hyperfixation\n\n\n\n\n\n\nAug 2, 2022\n\n\nLisa\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n365\n\n\ncode\n\n\n\n\n365 days of hyperfixation\n\n\n\n\n\n\nJul 28, 2022\n\n\nLisa\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n365\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\nJul 28, 2022\n\n\nLisa\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "feed.html",
    "href": "feed.html",
    "title": "Feed",
    "section": "",
    "text": "Reference: https://github.com/rszymanski/shinyfeed/blob/master/app.R\nFeeds: https://mikestone.me/my-favorite-rss-feeds/\n\n\nWarning: package 'tidyRSS' was built under R version 4.1.3\n\n\nGET request successful. Parsing..."
  },
  {
    "objectID": "feed.html#shiny-documents",
    "href": "feed.html#shiny-documents",
    "title": "Feed",
    "section": "Shiny Documents",
    "text": "Shiny Documents\nThis Quarto document is made interactive using Shiny. Interactive documents allow readers to modify parameters and see the results immediately. Learn more about Shiny interactive documents at https://quarto.org/docs/interactive/shiny/."
  },
  {
    "objectID": "feed.html#inputs-and-outputs",
    "href": "feed.html#inputs-and-outputs",
    "title": "Feed",
    "section": "Inputs and Outputs",
    "text": "Inputs and Outputs\nYou can embed Shiny inputs and outputs in your document. Outputs are automatically updated whenever inputs change. This demonstrates how a standard R plot can be made interactive:\n\n\n\nNumber of bins:"
  },
  {
    "objectID": "posts/Day-3.html",
    "href": "posts/Day-3.html",
    "title": "Day 3",
    "section": "",
    "text": "Retracted science papers. Particularly with the engaging way the stories are told on For Better Science."
  },
  {
    "objectID": "posts/Day-3.html#for-better-science",
    "href": "posts/Day-3.html#for-better-science",
    "title": "Day 3",
    "section": "",
    "text": "The rabbit hole started with:\n\nSylvain Lesné is a failed scientist: https://forbetterscience.com/2022/07/27/silvain-lesne-is-a-failed-scientist/\nCassava fraud and Alzheimer’s capitalism: https://forbetterscience.com/2021/12/15/cassava-fraud-and-alzheimers-capitalism/"
  },
  {
    "objectID": "posts/Day-1/index.html",
    "href": "posts/Day-1/index.html",
    "title": "Day-1",
    "section": "",
    "text": "RSS (Really Simple Syndication) readers.\ndefault: rss_feeds: - “https://appsilon.com/rss” - “https://blog.rstudio.com/index.xml” - “https://www.r-bloggers.com/feed/” - “http://www.hackaday.com/rss.xml”\nSo much code out there to refer to:\n\nhttps://stackoverflow.com/questions/51762965/getting-rss-feed-in-r-shiny-web-app\nhttps://community.rstudio.com/t/shinyfeed-shiny-contest-submission/104723\nhttps://quarto.org/docs/websites/website-blog.html\nhttps://stackoverflow.com/questions/27772079/how-to-consume-streaming-xml-rss-feeds-with-r\nhttps://www.cdata.com/kb/tech/rss-jdbc-r.rst\nhttps://www.r-bloggers.com/2021/11/rss-feeds-of-package-updates-in-r-universe/\nhttps://www.r-bloggers.com/2016/08/feeder-reading-rss-and-atom-feeds-from-r/\nhttps://rss.app/blog/how-to-add-auto-updated-news-feeds-to-your-website-6KP2RL\nhttps://www.lifewire.com/what-is-an-rss-feed-4684568\nhttps://medium.com/samsung-internet-dev/add-rss-feeds-to-your-website-to-keep-your-core-readers-engaged-3179dca9c91e\nhttps://www.feedforall.com/displaying-rss.htm\nhttps://rhodygarden.org/sitehelp-show-rss-feed-in-ie/\nhttps://medium.com/@spians/how-to-get-rss-feed-of-popular-websites-c5cb2af83d71\nhttps://www.r-bloggers.com/2019/12/creating-an-rss-feed-to-add-your-jekyll-github-pages-blog-to-r-bloggers/\nhttps://www.w3schools.com/xml/xml_rss.asp\nhttps://github.com/rstudio/distill/issues/33\nhttps://blog.ouseful.info/2017/06/28/hexjson-htmlwidget-for-r-part-1/\nhttps://www.r-bloggers.com/2011/04/how-to-build-a-dataset-in-r-using-an-rss-feed-or-web-page/\nhttps://github.com/noahhl/r-does-rss\nhttps://datawookie.github.io/feedeR/index.html\nhttps://quarto.org/docs/websites/website-listings-custom.html\nhttps://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto/\nhttps://www.r-bloggers.com/2022/07/how-to-set-up-quarto-with-docker-part-1-static-content/\n\nAlternatively a program like feedly could be used on a local device (not sure about integration with quarto)."
  },
  {
    "objectID": "posts/Day-2.html",
    "href": "posts/Day-2.html",
    "title": "Day-2",
    "section": "",
    "text": "RSS (Really Simple Syndication) readers.\ndefault: rss_feeds: - “https://appsilon.com/rss” - “https://blog.rstudio.com/index.xml” - “https://www.r-bloggers.com/feed/” - “http://www.hackaday.com/rss.xml”\nSo much code out there to refer to:\n\nhttps://stackoverflow.com/questions/51762965/getting-rss-feed-in-r-shiny-web-app\nhttps://community.rstudio.com/t/shinyfeed-shiny-contest-submission/104723\nhttps://quarto.org/docs/websites/website-blog.html\nhttps://stackoverflow.com/questions/27772079/how-to-consume-streaming-xml-rss-feeds-with-r\nhttps://www.cdata.com/kb/tech/rss-jdbc-r.rst\nhttps://www.r-bloggers.com/2021/11/rss-feeds-of-package-updates-in-r-universe/\nhttps://www.r-bloggers.com/2016/08/feeder-reading-rss-and-atom-feeds-from-r/\nhttps://rss.app/blog/how-to-add-auto-updated-news-feeds-to-your-website-6KP2RL\nhttps://www.lifewire.com/what-is-an-rss-feed-4684568\nhttps://medium.com/samsung-internet-dev/add-rss-feeds-to-your-website-to-keep-your-core-readers-engaged-3179dca9c91e\nhttps://www.feedforall.com/displaying-rss.htm\nhttps://rhodygarden.org/sitehelp-show-rss-feed-in-ie/\nhttps://medium.com/@spians/how-to-get-rss-feed-of-popular-websites-c5cb2af83d71\nhttps://www.r-bloggers.com/2019/12/creating-an-rss-feed-to-add-your-jekyll-github-pages-blog-to-r-bloggers/\nhttps://www.w3schools.com/xml/xml_rss.asp\nhttps://github.com/rstudio/distill/issues/33\nhttps://blog.ouseful.info/2017/06/28/hexjson-htmlwidget-for-r-part-1/\nhttps://www.r-bloggers.com/2011/04/how-to-build-a-dataset-in-r-using-an-rss-feed-or-web-page/\nhttps://github.com/noahhl/r-does-rss\nhttps://datawookie.github.io/feedeR/index.html\nhttps://quarto.org/docs/websites/website-listings-custom.html\nhttps://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto/\nhttps://www.r-bloggers.com/2022/07/how-to-set-up-quarto-with-docker-part-1-static-content/\n\nAlternatively a program like feedly could be used on a local device (not sure about integration with quarto)."
  },
  {
    "objectID": "posts/Day-2.html#running-code",
    "href": "posts/Day-2.html#running-code",
    "title": "Day 2",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "posts/Day-4.html",
    "href": "posts/Day-4.html",
    "title": "test",
    "section": "",
    "text": "This Quarto document is made interactive using Observable JS. Interactive documents allow readers to modify parameters and see the results immediately. Learn more about OJS interactive documents at https://quarto.org/docs/interactive/ojs/."
  },
  {
    "objectID": "posts/Day-4.html#observable-js",
    "href": "posts/Day-4.html#observable-js",
    "title": "Day 3",
    "section": "Observable JS",
    "text": "Observable JS\nThis Quarto document is made interactive using Observable JS. Interactive documents allow readers to modify parameters and see the results immediately. Learn more about OJS interactive documents at https://quarto.org/docs/interactive/ojs/."
  },
  {
    "objectID": "posts/Day-4.html#data-wrangling",
    "href": "posts/Day-4.html#data-wrangling",
    "title": "Day 3",
    "section": "Data wrangling",
    "text": "Data wrangling\nLoad the data\n\n\nShow the code\ndata = FileAttachment(\"data/lyme_data.csv\").csv({ typed: true })\n\n\n\n\n\n\n\nFilter options\n\n\nShow the code\nviewof state = Inputs.select(data.map(d => d.Stname), {multiple: true, value: \"Alaska\", label: \"Choose a state: \", sort: true, unique: true})\n\nfiltered = data.filter(function(data) {\n  return state.includes(data.Stname);\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotData\n\n\nStacked bar chart of cases by state by year, remember to select an option above.\n\n\nShow the code\nPlot.plot({\n  y: {\n    grid: true\n  },\n  marks: [\n    Plot.barY(filtered, {x: \"date\", y: \"total_cases\", fill: \"#bab0ab\"}),\n    <!-- plot.text(filtered, {x: \"date\", y: \"total_cases\", text: \"Stname\", textAnchor: \"end\", dx: -6}), -->\n    Plot.ruleY([0])\n  ]\n})\n\n\n\n\n\n\n\n\n\nAggregated dataset for all states.\n\n\nShow the code\nInputs.table(data, { sort: \"date\", reverse: true })"
  },
  {
    "objectID": "posts/Day-4.html#references",
    "href": "posts/Day-4.html#references",
    "title": "Day 3",
    "section": "References",
    "text": "References\n\nhttps://journals.plos.org/plosone/article?id=10.1371/journal.pone.0260122\nhttps://www.hopkinslymetracker.org/\nhttps://quarto.org/docs/interactive/ojs/\nData from: https://www.cdc.gov/lyme/stats/survfaq.html\n\nAdditional data options: https://data.world/datasets/lyme-disease\nSome plots options using observable: https://github.com/observablehq/plot and https://observablehq.com/@observablehq/plot-bar\nSome various tutorials: https://observablehq.com/tutorials"
  },
  {
    "objectID": "posts/Day-1.html",
    "href": "posts/Day-1.html",
    "title": "Day 1",
    "section": "",
    "text": "It’s a whole new exciting world! And the default project has a lot of exciting files to explore.\nI’m using:\n\nhttps://quarto.org/docs/websites/website-blog.html\nhttps://albert-rapp.de/posts/13_quarto_blog_writing_guide/13_quarto_blog_writing_guide.html"
  },
  {
    "objectID": "posts/Day-1.html#example",
    "href": "posts/Day-1.html#example",
    "title": "Day 1",
    "section": "Example",
    "text": "Example\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "posts/Day-1.html#running-code",
    "href": "posts/Day-1.html#running-code",
    "title": "Day 1",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "posts/Day-4.html#bubble-chart",
    "href": "posts/Day-4.html#bubble-chart",
    "title": "test",
    "section": "Bubble Chart",
    "text": "Bubble Chart\nThis example uses a D3 bubble chart imported from Observable HQ to analyze commits to GitHub repositories.\nSelect a repository to analyze the commits of:\n\nviewof repo = Inputs.radio(\n  [\n    \"pandas-dev/pandas\",\n    \"tidyverse/ggplot2\",\n  ], \n  { label: \"Repository:\", value: \"pandas-dev/pandas\"}\n)\n\n\n\n\n\n\nFetch the commits for the specified repo using the GitHub API:\n\nd3 = require('d3')\ncontributors = await d3.json(\n  \"https://api.github.com/repos/\" + repo + \"/stats/contributors\"\n)\ncommits = contributors.map(contributor => {\n  const author = contributor.author;\n  return {\n    name: author.login,\n    title: author.login,\n    group: author.type,\n    value: contributor.total\n  }\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote that the repo variable is bound dynamically from the radio input defined above. If you change the input the contributors query will be automatically re-executed.\nView the commits sorted by most to least:\n\nInputs.table(commits, { sort: \"value\", reverse: true })\n\n\n\n\n\n\nVisualize using a D3 bubble chart imported from Observable HQ:\n\nimport { chart } with { commits as data } \n  from \"@d3/d3-bubble-chart\"\nchart"
  }
]